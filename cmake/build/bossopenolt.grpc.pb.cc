// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bossopenolt.proto

#include "bossopenolt.pb.h"
#include "bossopenolt.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bossopenolt {

static const char* BossOpenolt_method_names[] = {
  "/bossopenolt.BossOpenolt/GetOltConnect",
  "/bossopenolt.BossOpenolt/GetOltDeviceInfo",
  "/bossopenolt.BossOpenolt/SetPmdTxDis",
  "/bossopenolt.BossOpenolt/GetPmdTxdis",
  "/bossopenolt.BossOpenolt/GetDevicePmdStatus",
  "/bossopenolt.BossOpenolt/SetDevicePort",
  "/bossopenolt.BossOpenolt/GetDevicePort",
  "/bossopenolt.BossOpenolt/PortReset",
  "/bossopenolt.BossOpenolt/SetMtuSize",
  "/bossopenolt.BossOpenolt/GetMtuSize",
  "/bossopenolt.BossOpenolt/SetVlan",
  "/bossopenolt.BossOpenolt/GetVlan",
  "/bossopenolt.BossOpenolt/SetLutMode",
  "/bossopenolt.BossOpenolt/GetLutMode",
  "/bossopenolt.BossOpenolt/SetAgingMode",
  "/bossopenolt.BossOpenolt/GetAgingMode",
  "/bossopenolt.BossOpenolt/SetAgingTime",
  "/bossopenolt.BossOpenolt/GetAgingTime",
  "/bossopenolt.BossOpenolt/GetDeviceMacInfo",
  "/bossopenolt.BossOpenolt/SetSdnTable",
  "/bossopenolt.BossOpenolt/GetSdnTable",
  "/bossopenolt.BossOpenolt/SetLength",
  "/bossopenolt.BossOpenolt/GetLength",
  "/bossopenolt.BossOpenolt/SetQuietZone",
  "/bossopenolt.BossOpenolt/GetQuietZone",
  "/bossopenolt.BossOpenolt/SetFecMode",
  "/bossopenolt.BossOpenolt/GetFecMode",
  "/bossopenolt.BossOpenolt/AddOnu",
  "/bossopenolt.BossOpenolt/DeleteOnu",
  "/bossopenolt.BossOpenolt/AddOnuSla",
  "/bossopenolt.BossOpenolt/ClearOnuSla",
  "/bossopenolt.BossOpenolt/GetSlaTable",
  "/bossopenolt.BossOpenolt/SetOnuAllocid",
  "/bossopenolt.BossOpenolt/DelOnuAllocid",
  "/bossopenolt.BossOpenolt/SetOnuVssn",
  "/bossopenolt.BossOpenolt/GetOnuVssn",
  "/bossopenolt.BossOpenolt/GetOnuDistance",
  "/bossopenolt.BossOpenolt/SetBurstDelimiter",
  "/bossopenolt.BossOpenolt/GetBurstDelimiter",
  "/bossopenolt.BossOpenolt/SetBurstPreamble",
  "/bossopenolt.BossOpenolt/GetBurstPreamble",
  "/bossopenolt.BossOpenolt/SetBurstVersion",
  "/bossopenolt.BossOpenolt/GetBurstVersion",
  "/bossopenolt.BossOpenolt/SetBurstProfile",
  "/bossopenolt.BossOpenolt/GetBurstProfile",
  "/bossopenolt.BossOpenolt/GetRegisterStatus",
  "/bossopenolt.BossOpenolt/GetOnuInfo",
  "/bossopenolt.BossOpenolt/GetOmciStatus",
  "/bossopenolt.BossOpenolt/SetDsOmciOnu",
  "/bossopenolt.BossOpenolt/SetTod",
  "/bossopenolt.BossOpenolt/GetTod",
  "/bossopenolt.BossOpenolt/SetDataMode",
  "/bossopenolt.BossOpenolt/GetDataMode",
  "/bossopenolt.BossOpenolt/SetFecDecMode",
  "/bossopenolt.BossOpenolt/GetFecDecMode",
  "/bossopenolt.BossOpenolt/SetDelimiter",
  "/bossopenolt.BossOpenolt/GetDelimiter",
  "/bossopenolt.BossOpenolt/SetErrorPermit",
  "/bossopenolt.BossOpenolt/GetErrorPermit",
  "/bossopenolt.BossOpenolt/SetPmControl",
  "/bossopenolt.BossOpenolt/GetPmControl",
  "/bossopenolt.BossOpenolt/GetPmTable",
  "/bossopenolt.BossOpenolt/SetSAOn",
  "/bossopenolt.BossOpenolt/SetSAOff",
};

std::unique_ptr< BossOpenolt::Stub> BossOpenolt::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BossOpenolt::Stub> stub(new BossOpenolt::Stub(channel, options));
  return stub;
}

BossOpenolt::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOltConnect_(BossOpenolt_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOltDeviceInfo_(BossOpenolt_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPmdTxDis_(BossOpenolt_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPmdTxdis_(BossOpenolt_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevicePmdStatus_(BossOpenolt_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDevicePort_(BossOpenolt_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDevicePort_(BossOpenolt_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PortReset_(BossOpenolt_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMtuSize_(BossOpenolt_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMtuSize_(BossOpenolt_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVlan_(BossOpenolt_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVlan_(BossOpenolt_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLutMode_(BossOpenolt_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLutMode_(BossOpenolt_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAgingMode_(BossOpenolt_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgingMode_(BossOpenolt_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAgingTime_(BossOpenolt_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgingTime_(BossOpenolt_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceMacInfo_(BossOpenolt_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSdnTable_(BossOpenolt_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSdnTable_(BossOpenolt_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLength_(BossOpenolt_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLength_(BossOpenolt_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetQuietZone_(BossOpenolt_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQuietZone_(BossOpenolt_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFecMode_(BossOpenolt_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFecMode_(BossOpenolt_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddOnu_(BossOpenolt_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOnu_(BossOpenolt_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddOnuSla_(BossOpenolt_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearOnuSla_(BossOpenolt_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlaTable_(BossOpenolt_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOnuAllocid_(BossOpenolt_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelOnuAllocid_(BossOpenolt_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOnuVssn_(BossOpenolt_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOnuVssn_(BossOpenolt_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOnuDistance_(BossOpenolt_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBurstDelimiter_(BossOpenolt_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBurstDelimiter_(BossOpenolt_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBurstPreamble_(BossOpenolt_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBurstPreamble_(BossOpenolt_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBurstVersion_(BossOpenolt_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBurstVersion_(BossOpenolt_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBurstProfile_(BossOpenolt_method_names[43], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBurstProfile_(BossOpenolt_method_names[44], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRegisterStatus_(BossOpenolt_method_names[45], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOnuInfo_(BossOpenolt_method_names[46], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOmciStatus_(BossOpenolt_method_names[47], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDsOmciOnu_(BossOpenolt_method_names[48], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTod_(BossOpenolt_method_names[49], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTod_(BossOpenolt_method_names[50], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDataMode_(BossOpenolt_method_names[51], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDataMode_(BossOpenolt_method_names[52], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFecDecMode_(BossOpenolt_method_names[53], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFecDecMode_(BossOpenolt_method_names[54], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDelimiter_(BossOpenolt_method_names[55], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDelimiter_(BossOpenolt_method_names[56], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetErrorPermit_(BossOpenolt_method_names[57], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetErrorPermit_(BossOpenolt_method_names[58], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPmControl_(BossOpenolt_method_names[59], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPmControl_(BossOpenolt_method_names[60], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPmTable_(BossOpenolt_method_names[61], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSAOn_(BossOpenolt_method_names[62], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSAOff_(BossOpenolt_method_names[63], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BossOpenolt::Stub::GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OltConnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOltConnect_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOltConnect_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOltConnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>* BossOpenolt::Stub::PrepareAsyncGetOltConnectRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::OltConnResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOltConnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>* BossOpenolt::Stub::AsyncGetOltConnectRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOltConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OltDevResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOltDeviceInfo_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOltDeviceInfo_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOltDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>* BossOpenolt::Stub::PrepareAsyncGetOltDeviceInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::OltDevResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOltDeviceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>* BossOpenolt::Stub::AsyncGetOltDeviceInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOltDeviceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPmdTxDis_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPmdTxDis_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPmdTxDis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetPmdTxDisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPmdTxDis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetPmdTxDisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPmdTxDisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmdTxdisResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPmdTxdis_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPmdTxdis_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPmdTxdis_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>* BossOpenolt::Stub::PrepareAsyncGetPmdTxdisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::PmdTxdisResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPmdTxdis_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>* BossOpenolt::Stub::AsyncGetPmdTxdisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPmdTxdisRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmdStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevicePmdStatus_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevicePmdStatus_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevicePmdStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>* BossOpenolt::Stub::PrepareAsyncGetDevicePmdStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::PmdStatusResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevicePmdStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>* BossOpenolt::Stub::AsyncGetDevicePmdStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDevicePmdStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDevicePort_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDevicePort_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDevicePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDevicePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDevicePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::GetPortResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDevicePort_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevicePort_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDevicePort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>* BossOpenolt::Stub::PrepareAsyncGetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::GetPortResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDevicePort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>* BossOpenolt::Stub::AsyncGetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDevicePortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PortReset_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortReset_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortReset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncPortResetRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PortReset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncPortResetRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPortResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMtuSize_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMtuSize_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMtuSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMtuSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMtuSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::MtuSizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMtuSize_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMtuSize_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMtuSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>* BossOpenolt::Stub::PrepareAsyncGetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::MtuSizeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMtuSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>* BossOpenolt::Stub::AsyncGetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMtuSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVlan_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVlan_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVlan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVlanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::GetVlanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVlan_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVlan_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>* BossOpenolt::Stub::PrepareAsyncGetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::GetVlanResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVlan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>* BossOpenolt::Stub::AsyncGetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVlanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLutMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLutMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLutMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLutMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLutModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLutMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLutMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLutMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::PrepareAsyncGetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ModeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLutMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::AsyncGetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLutModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAgingMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgingMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAgingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAgingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgingMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgingMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::PrepareAsyncGetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ModeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::AsyncGetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAgingTime_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgingTime_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAgingTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAgingTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAgingTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::AgingTimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgingTime_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgingTime_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgingTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>* BossOpenolt::Stub::PrepareAsyncGetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::AgingTimeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgingTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>* BossOpenolt::Stub::AsyncGetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgingTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::DevMacInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceMacInfo_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceMacInfo_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceMacInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>* BossOpenolt::Stub::PrepareAsyncGetDeviceMacInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::DevMacInfoResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceMacInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>* BossOpenolt::Stub::AsyncGetDeviceMacInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceMacInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SdnTableKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSdnTable_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSdnTable_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSdnTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>* BossOpenolt::Stub::PrepareAsyncSetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::SdnTableKeyResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSdnTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>* BossOpenolt::Stub::AsyncSetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSdnTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SdnTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSdnTable_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSdnTable_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSdnTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>* BossOpenolt::Stub::PrepareAsyncGetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::SdnTableResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSdnTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>* BossOpenolt::Stub::AsyncGetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSdnTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLength_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLength_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLength_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLength_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLengthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::LengthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::LengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLength_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::LengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLength_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLength_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>* BossOpenolt::Stub::PrepareAsyncGetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::LengthResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLength_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>* BossOpenolt::Stub::AsyncGetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLengthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetQuietZone_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetQuietZone_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetQuietZone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetQuietZone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetQuietZoneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::QuietZoneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetQuietZone_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQuietZone_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQuietZone_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>* BossOpenolt::Stub::PrepareAsyncGetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::QuietZoneResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetQuietZone_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>* BossOpenolt::Stub::AsyncGetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetQuietZoneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFecMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFecMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFecMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFecMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFecModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFecMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFecMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFecMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::PrepareAsyncGetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ModeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFecMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::AsyncGetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFecModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::AddOnuResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddOnu_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddOnu_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddOnu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>* BossOpenolt::Stub::PrepareAsyncAddOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::AddOnuResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddOnu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>* BossOpenolt::Stub::AsyncAddOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddOnuRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteOnu_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteOnu_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteOnu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncDeleteOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteOnu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncDeleteOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteOnuRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddOnuSla_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddOnuSla_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddOnuSla_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncAddOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddOnuSla_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncAddOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddOnuSlaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearOnuSla_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearOnuSla_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearOnuSla_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncClearOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearOnuSla_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncClearOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearOnuSlaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SlaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::SlaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSlaTable_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::SlaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaTable_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSlaTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>* BossOpenolt::Stub::PrepareAsyncGetSlaTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::SlaResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSlaTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>* BossOpenolt::Stub::AsyncGetSlaTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSlaTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOnuAllocid_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOnuAllocid_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOnuAllocid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOnuAllocid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOnuAllocidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelOnuAllocid_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelOnuAllocid_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelOnuAllocid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncDelOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelOnuAllocid_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncDelOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelOnuAllocidRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOnuVssn_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOnuVssn_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOnuVssn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOnuVssn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOnuVssnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuVssnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOnuVssn_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnuVssn_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnuVssn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>* BossOpenolt::Stub::PrepareAsyncGetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::OnuVssnResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOnuVssn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>* BossOpenolt::Stub::AsyncGetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOnuVssnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuDistResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOnuDistance_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnuDistance_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnuDistance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>* BossOpenolt::Stub::PrepareAsyncGetOnuDistanceRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::OnuDistResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOnuDistance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>* BossOpenolt::Stub::AsyncGetOnuDistanceRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOnuDistanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBurstDelimiter_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstDelimiter_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstDelimiter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBurstDelimiter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBurstDelimiterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstDelimitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBurstDelimiter_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstDelimiter_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstDelimiter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>* BossOpenolt::Stub::PrepareAsyncGetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::BurstDelimitResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBurstDelimiter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>* BossOpenolt::Stub::AsyncGetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBurstDelimiterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBurstPreamble_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstPreamble_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstPreamble_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBurstPreamble_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBurstPreambleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstPreambleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBurstPreamble_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstPreamble_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstPreamble_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>* BossOpenolt::Stub::PrepareAsyncGetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::BurstPreambleResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBurstPreamble_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>* BossOpenolt::Stub::AsyncGetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBurstPreambleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBurstVersion_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstVersion_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBurstVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBurstVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBurstVersion_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstVersion_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>* BossOpenolt::Stub::PrepareAsyncGetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::BurstVersionResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBurstVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>* BossOpenolt::Stub::AsyncGetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBurstVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBurstProfile_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstProfile_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBurstProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBurstProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBurstProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBurstProfile_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstProfile_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBurstProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>* BossOpenolt::Stub::PrepareAsyncGetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::BurstProfileResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBurstProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>* BossOpenolt::Stub::AsyncGetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBurstProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::RegisterStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRegisterStatus_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRegisterStatus_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRegisterStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>* BossOpenolt::Stub::PrepareAsyncGetRegisterStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::RegisterStatusResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRegisterStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>* BossOpenolt::Stub::AsyncGetRegisterStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRegisterStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOnuInfo_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnuInfo_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOnuInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>* BossOpenolt::Stub::PrepareAsyncGetOnuInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::OnuInfoResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOnuInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>* BossOpenolt::Stub::AsyncGetOnuInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOnuInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOmciStatus_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOmciStatus_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOmciStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>* BossOpenolt::Stub::PrepareAsyncGetOmciStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::StatusResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOmciStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>* BossOpenolt::Stub::AsyncGetOmciStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOmciStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDsOmciOnu_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDsOmciOnu_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDsOmciOnu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetDsOmciOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDsOmciOnu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetDsOmciOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDsOmciOnuRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTod_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTod_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTod_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::TodResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::TodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTod_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::TodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTod_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTod_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>* BossOpenolt::Stub::PrepareAsyncGetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::TodResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTod_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>* BossOpenolt::Stub::AsyncGetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTodRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDataMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDataMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDataMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDataMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDataModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDataMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDataMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::PrepareAsyncGetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ModeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDataMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::AsyncGetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDataModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetFecDecMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFecDecMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetFecDecMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetFecDecMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetFecDecModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFecDecMode_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFecDecMode_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFecDecMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::PrepareAsyncGetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ModeResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFecDecMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* BossOpenolt::Stub::AsyncGetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFecDecModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDelimiter_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDelimiter_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDelimiter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDelimiter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDelimiterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::FecDecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDelimiter_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelimiter_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDelimiter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>* BossOpenolt::Stub::PrepareAsyncGetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::FecDecResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDelimiter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>* BossOpenolt::Stub::AsyncGetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDelimiterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetErrorPermit_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetErrorPermit_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetErrorPermit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetErrorPermit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetErrorPermitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ErrorPermitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetErrorPermit_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetErrorPermit_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetErrorPermit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>* BossOpenolt::Stub::PrepareAsyncGetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ErrorPermitResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetErrorPermit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>* BossOpenolt::Stub::AsyncGetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetErrorPermitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPmControl_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPmControl_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPmControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPmControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPmControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPmControl_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPmControl_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPmControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>* BossOpenolt::Stub::PrepareAsyncGetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::PmControlResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPmControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>* BossOpenolt::Stub::AsyncGetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPmControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPmTable_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPmTable_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPmTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>* BossOpenolt::Stub::PrepareAsyncGetPmTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::PmTableResponse, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPmTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>* BossOpenolt::Stub::AsyncGetPmTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPmTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSAOn_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSAOn_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSAOn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetSAOnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSAOn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetSAOnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSAOnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BossOpenolt::Stub::SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSAOff_, context, request, response);
}

void BossOpenolt::Stub::experimental_async::SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSAOff_, context, request, response, std::move(f));
}

void BossOpenolt::Stub::experimental_async::SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSAOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::PrepareAsyncSetSAOffRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bossopenolt::ExecResult, ::bossopenolt::boss_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSAOff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* BossOpenolt::Stub::AsyncSetSAOffRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSAOffRaw(context, request, cq);
  result->StartCall();
  return result;
}

BossOpenolt::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::OltConnResponse* resp) {
               return service->GetOltConnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::OltDevResponse* resp) {
               return service->GetOltDeviceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetPmdTxDis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::PmdTxdisResponse* resp) {
               return service->GetPmdTxdis(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::PmdStatusResponse* resp) {
               return service->GetDevicePmdStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetDevicePort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::GetPortResponse* resp) {
               return service->GetDevicePort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->PortReset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetMtuSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::MtuSizeResponse* resp) {
               return service->GetMtuSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetVlan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::GetVlanResponse* resp) {
               return service->GetVlan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetLutMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ModeResponse* resp) {
               return service->GetLutMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetAgingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ModeResponse* resp) {
               return service->GetAgingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetAgingTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::AgingTimeResponse* resp) {
               return service->GetAgingTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::DevMacInfoResponse* resp) {
               return service->GetDeviceMacInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::SdnTableKeyResponse* resp) {
               return service->SetSdnTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::SdnTableResponse* resp) {
               return service->GetSdnTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetLength(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::LengthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::LengthResponse* resp) {
               return service->GetLength(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetQuietZone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::QuietZoneResponse* resp) {
               return service->GetQuietZone(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetFecMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ModeResponse* resp) {
               return service->GetFecMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::AddOnuResponse* resp) {
               return service->AddOnu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->DeleteOnu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->AddOnuSla(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->ClearOnuSla(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::SlaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::SlaResponse* resp) {
               return service->GetSlaTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetOnuAllocid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->DelOnuAllocid(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetOnuVssn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::OnuVssnResponse* resp) {
               return service->GetOnuVssn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::OnuDistResponse* resp) {
               return service->GetOnuDistance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetBurstDelimiter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::BurstDelimitResponse* resp) {
               return service->GetBurstDelimiter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetBurstPreamble(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::BurstPreambleResponse* resp) {
               return service->GetBurstPreamble(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetBurstVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::BurstVersionResponse* resp) {
               return service->GetBurstVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetBurstProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::BurstProfileResponse* resp) {
               return service->GetBurstProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::RegisterStatusResponse* resp) {
               return service->GetRegisterStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::OnuInfoResponse* resp) {
               return service->GetOnuInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::StatusResponse* resp) {
               return service->GetOmciStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetDsOmciOnu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetTod(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::TodResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::TodResponse* resp) {
               return service->GetTod(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetDataMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ModeResponse* resp) {
               return service->GetDataMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetFecDecMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ModeResponse* resp) {
               return service->GetFecDecMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetDelimiter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::FecDecResponse* resp) {
               return service->GetDelimiter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetErrorPermit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ErrorPermitResponse* resp) {
               return service->GetErrorPermit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetPmControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::PmControlResponse* resp) {
               return service->GetPmControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::PmTableResponse* resp) {
               return service->GetPmTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetSAOn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BossOpenolt_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BossOpenolt::Service, ::bossopenolt::boss_request, ::bossopenolt::ExecResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BossOpenolt::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bossopenolt::boss_request* req,
             ::bossopenolt::ExecResult* resp) {
               return service->SetSAOff(ctx, req, resp);
             }, this)));
}

BossOpenolt::Service::~Service() {
}

::grpc::Status BossOpenolt::Service::GetOltConnect(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetOltDeviceInfo(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetPmdTxDis(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetPmdTxdis(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetDevicePmdStatus(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetDevicePort(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetDevicePort(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::PortReset(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetMtuSize(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetMtuSize(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetVlan(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetVlan(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetLutMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetLutMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetAgingMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetAgingMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetAgingTime(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetAgingTime(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetDeviceMacInfo(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetSdnTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetSdnTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetLength(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetLength(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetQuietZone(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetQuietZone(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetFecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetFecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::AddOnu(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::DeleteOnu(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::AddOnuSla(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::ClearOnuSla(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetSlaTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetOnuAllocid(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::DelOnuAllocid(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetOnuVssn(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetOnuVssn(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetOnuDistance(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetBurstDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetBurstDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetBurstPreamble(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetBurstPreamble(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetBurstVersion(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetBurstVersion(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetBurstProfile(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetBurstProfile(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetRegisterStatus(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetOnuInfo(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetOmciStatus(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetDsOmciOnu(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetTod(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetTod(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetDataMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetDataMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetFecDecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetFecDecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetErrorPermit(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetErrorPermit(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetPmControl(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetPmControl(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::GetPmTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetSAOn(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BossOpenolt::Service::SetSAOff(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bossopenolt

