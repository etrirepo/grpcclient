// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bossopenolt.proto
// Original file comments:
// Copyright (c) 2018 Open Networking Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_bossopenolt_2eproto__INCLUDED
#define GRPC_bossopenolt_2eproto__INCLUDED

#include "bossopenolt.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bossopenolt {

// import public "voltha_protos/tech_profile.proto";
// import public "voltha_protos/common.proto";
// import "voltha_protos/ext_config.proto";
class BossOpenolt final {
 public:
  static constexpr char const* service_full_name() {
    return "bossopenolt.BossOpenolt";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OltConnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltConnResponse>> AsyncGetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltConnResponse>>(AsyncGetOltConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltConnResponse>> PrepareAsyncGetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltConnResponse>>(PrepareAsyncGetOltConnectRaw(context, request, cq));
    }
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/getoltconnect"
    // //			body : "*"
    // //		};
    // 	
    virtual ::grpc::Status GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OltDevResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltDevResponse>> AsyncGetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltDevResponse>>(AsyncGetOltDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltDevResponse>> PrepareAsyncGetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltDevResponse>>(PrepareAsyncGetOltDeviceInfoRaw(context, request, cq));
    }
    // //		option (google.api.http) = {
    // //			post: "/api/boss/v1/getoltdeviceinfo"
    // //			body: "*"
    // //		};
    // 	
    virtual ::grpc::Status SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetPmdTxDisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetPmdTxDisRaw(context, request, cq));
    }
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/setpmdtxdis"
    // //			body: "*"
    // //		};
    //
    virtual ::grpc::Status GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmdTxdisResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdTxdisResponse>> AsyncGetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdTxdisResponse>>(AsyncGetPmdTxdisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdTxdisResponse>> PrepareAsyncGetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdTxdisResponse>>(PrepareAsyncGetPmdTxdisRaw(context, request, cq));
    }
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/getpmdtxdis"
    // //			body: "*"
    // //		};
    //
    virtual ::grpc::Status GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmdStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdStatusResponse>> AsyncGetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdStatusResponse>>(AsyncGetDevicePmdStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdStatusResponse>> PrepareAsyncGetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdStatusResponse>>(PrepareAsyncGetDevicePmdStatusRaw(context, request, cq));
    }
    // //		option (google.api.http) = {
    // //			post: "/api/boss/v1/getdevicepmdstatus"
    // //			body: "*"
    // //		};
    virtual ::grpc::Status SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetDevicePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetDevicePortRaw(context, request, cq));
    }
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/setdeviceport"
    // //			body: "*"
    // //		};
    // 	
    virtual ::grpc::Status GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::GetPortResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetPortResponse>> AsyncGetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetPortResponse>>(AsyncGetDevicePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetPortResponse>> PrepareAsyncGetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetPortResponse>>(PrepareAsyncGetDevicePortRaw(context, request, cq));
    }
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/getdeviceport"
    // //			body: "*"
    // //		};
    //
    virtual ::grpc::Status PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncPortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncPortResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncPortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncPortResetRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/portreset"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetMtuSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetMtuSizeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setmtusize"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::MtuSizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::MtuSizeResponse>> AsyncGetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::MtuSizeResponse>>(AsyncGetMtuSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::MtuSizeResponse>> PrepareAsyncGetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::MtuSizeResponse>>(PrepareAsyncGetMtuSizeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getmtusize"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetVlanRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setvlan"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::GetVlanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetVlanResponse>> AsyncGetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetVlanResponse>>(AsyncGetVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetVlanResponse>> PrepareAsyncGetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetVlanResponse>>(PrepareAsyncGetVlanRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getvlan"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetLutModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetLutModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setlutmode"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> AsyncGetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(AsyncGetLutModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> PrepareAsyncGetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(PrepareAsyncGetLutModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getlutmode"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetAgingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetAgingModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setagingmode"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> AsyncGetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(AsyncGetAgingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> PrepareAsyncGetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(PrepareAsyncGetAgingModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getagingmode"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetAgingTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetAgingTimeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setagingtime"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::AgingTimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AgingTimeResponse>> AsyncGetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AgingTimeResponse>>(AsyncGetAgingTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AgingTimeResponse>> PrepareAsyncGetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AgingTimeResponse>>(PrepareAsyncGetAgingTimeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getagingtime"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::DevMacInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::DevMacInfoResponse>> AsyncGetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::DevMacInfoResponse>>(AsyncGetDeviceMacInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::DevMacInfoResponse>> PrepareAsyncGetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::DevMacInfoResponse>>(PrepareAsyncGetDeviceMacInfoRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getdevicemacinfo"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SdnTableKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableKeyResponse>> AsyncSetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableKeyResponse>>(AsyncSetSdnTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableKeyResponse>> PrepareAsyncSetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableKeyResponse>>(PrepareAsyncSetSdnTableRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setsdntable"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SdnTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableResponse>> AsyncGetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableResponse>>(AsyncGetSdnTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableResponse>> PrepareAsyncGetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableResponse>>(PrepareAsyncGetSdnTableRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getsdntable"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetLengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetLengthRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setlength"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::LengthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::LengthResponse>> AsyncGetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::LengthResponse>>(AsyncGetLengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::LengthResponse>> PrepareAsyncGetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::LengthResponse>>(PrepareAsyncGetLengthRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getlength"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetQuietZoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetQuietZoneRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setquietzone"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::QuietZoneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::QuietZoneResponse>> AsyncGetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::QuietZoneResponse>>(AsyncGetQuietZoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::QuietZoneResponse>> PrepareAsyncGetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::QuietZoneResponse>>(PrepareAsyncGetQuietZoneRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getquietzone"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetFecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetFecModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setfecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> AsyncGetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(AsyncGetFecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> PrepareAsyncGetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(PrepareAsyncGetFecModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getfecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::AddOnuResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AddOnuResponse>> AsyncAddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AddOnuResponse>>(AsyncAddOnuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AddOnuResponse>> PrepareAsyncAddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AddOnuResponse>>(PrepareAsyncAddOnuRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/addonu"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncDeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncDeleteOnuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncDeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncDeleteOnuRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/delonu"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncAddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncAddOnuSlaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncAddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncAddOnuSlaRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/addonusla"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncClearOnuSlaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncClearOnuSlaRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/clearonusla"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SlaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SlaResponse>> AsyncGetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SlaResponse>>(AsyncGetSlaTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SlaResponse>> PrepareAsyncGetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SlaResponse>>(PrepareAsyncGetSlaTableRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getslatalbe"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetOnuAllocidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetOnuAllocidRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setonuallocid"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncDelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncDelOnuAllocidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncDelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncDelOnuAllocidRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/delonuallocid"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetOnuVssnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetOnuVssnRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setonuvssn"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuVssnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuVssnResponse>> AsyncGetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuVssnResponse>>(AsyncGetOnuVssnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuVssnResponse>> PrepareAsyncGetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuVssnResponse>>(PrepareAsyncGetOnuVssnRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "api/boss/v1/getonuvssn"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuDistResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuDistResponse>> AsyncGetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuDistResponse>>(AsyncGetOnuDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuDistResponse>> PrepareAsyncGetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuDistResponse>>(PrepareAsyncGetOnuDistanceRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post : "/api/boss/v1/getonudistance"
    // 			body : "*"
    // 		};
    virtual ::grpc::Status SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetBurstDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstDelimiterRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstDelimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstDelimitResponse>> AsyncGetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstDelimitResponse>>(AsyncGetBurstDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstDelimitResponse>> PrepareAsyncGetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstDelimitResponse>>(PrepareAsyncGetBurstDelimiterRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetBurstPreambleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstPreambleRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstpreamble"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstPreambleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstPreambleResponse>> AsyncGetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstPreambleResponse>>(AsyncGetBurstPreambleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstPreambleResponse>> PrepareAsyncGetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstPreambleResponse>>(PrepareAsyncGetBurstPreambleRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstpreamble"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetBurstVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstVersionRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstversion"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstVersionResponse>> AsyncGetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstVersionResponse>>(AsyncGetBurstVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstVersionResponse>> PrepareAsyncGetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstVersionResponse>>(PrepareAsyncGetBurstVersionRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstversion"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetBurstProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstProfileRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstprofile"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstProfileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstProfileResponse>> AsyncGetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstProfileResponse>>(AsyncGetBurstProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstProfileResponse>> PrepareAsyncGetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstProfileResponse>>(PrepareAsyncGetBurstProfileRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstprofile"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::RegisterStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::RegisterStatusResponse>> AsyncGetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::RegisterStatusResponse>>(AsyncGetRegisterStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::RegisterStatusResponse>> PrepareAsyncGetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::RegisterStatusResponse>>(PrepareAsyncGetRegisterStatusRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getregisterstatus"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuInfoResponse>> AsyncGetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuInfoResponse>>(AsyncGetOnuInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuInfoResponse>> PrepareAsyncGetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuInfoResponse>>(PrepareAsyncGetOnuInfoRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getonuinfo"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::StatusResponse>> AsyncGetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::StatusResponse>>(AsyncGetOmciStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::StatusResponse>> PrepareAsyncGetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::StatusResponse>>(PrepareAsyncGetOmciStatusRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstprofile"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetDsOmciOnuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetDsOmciOnuRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setdsomcionu"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetTodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetTodRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/settod"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::TodResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::TodResponse>> AsyncGetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::TodResponse>>(AsyncGetTodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::TodResponse>> PrepareAsyncGetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::TodResponse>>(PrepareAsyncGetTodRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/gettod"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetDataModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetDataModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setdatamode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> AsyncGetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(AsyncGetDataModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> PrepareAsyncGetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(PrepareAsyncGetDataModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getdatamode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetFecDecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetFecDecModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setfecdecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> AsyncGetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(AsyncGetFecDecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>> PrepareAsyncGetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>>(PrepareAsyncGetFecDecModeRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getfecdecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetDelimiterRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::FecDecResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::FecDecResponse>> AsyncGetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::FecDecResponse>>(AsyncGetDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::FecDecResponse>> PrepareAsyncGetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::FecDecResponse>>(PrepareAsyncGetDelimiterRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetErrorPermitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetErrorPermitRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/seterrorpermit"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ErrorPermitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ErrorPermitResponse>> AsyncGetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ErrorPermitResponse>>(AsyncGetErrorPermitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ErrorPermitResponse>> PrepareAsyncGetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ErrorPermitResponse>>(PrepareAsyncGetErrorPermitRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/geterrorpermit"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetPmControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetPmControlRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setpmcontrol"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmControlResponse>> AsyncGetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmControlResponse>>(AsyncGetPmControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmControlResponse>> PrepareAsyncGetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmControlResponse>>(PrepareAsyncGetPmControlRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getpmcontrol"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmTableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmTableResponse>> AsyncGetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmTableResponse>>(AsyncGetPmTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmTableResponse>> PrepareAsyncGetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmTableResponse>>(PrepareAsyncGetPmTableRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getpmtable"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetSAOnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetSAOnRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setsaon"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> AsyncSetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(AsyncSetSAOffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>> PrepareAsyncSetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>>(PrepareAsyncSetSAOffRaw(context, request, cq));
    }
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setsaoff"
    // 			body: "*"
    // 		};
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = { 
      // //			post: "/api/boss/v1/getoltconnect"
      // //			body : "*"
      // //		};
      // 	
      virtual void GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = {
      // //			post: "/api/boss/v1/getoltdeviceinfo"
      // //			body: "*"
      // //		};
      // 	
      virtual void SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = { 
      // //			post: "/api/boss/v1/setpmdtxdis"
      // //			body: "*"
      // //		};
      //
      virtual void GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = { 
      // //			post: "/api/boss/v1/getpmdtxdis"
      // //			body: "*"
      // //		};
      //
      virtual void GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = {
      // //			post: "/api/boss/v1/getdevicepmdstatus"
      // //			body: "*"
      // //		};
      virtual void SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = { 
      // //			post: "/api/boss/v1/setdeviceport"
      // //			body: "*"
      // //		};
      // 	
      virtual void GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //		option (google.api.http) = { 
      // //			post: "/api/boss/v1/getdeviceport"
      // //			body: "*"
      // //		};
      //
      virtual void PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/portreset"
      // 			body: "*"
      // 		};
      //
      virtual void SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setmtusize"
      // 			body: "*"
      // 		};
      //
      virtual void GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getmtusize"
      // 			body: "*"
      // 		};
      //
      virtual void SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setvlan"
      // 			body: "*"
      // 		};
      // 	
      virtual void GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getvlan"
      // 			body: "*"
      // 		};
      //
      virtual void SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setlutmode"
      // 			body: "*"
      // 		};
      //
      virtual void GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getlutmode"
      // 			body: "*"
      // 		};
      // 	
      virtual void SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setagingmode"
      // 			body: "*"
      // 		};
      //
      virtual void GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getagingmode"
      // 			body: "*"
      // 		};
      // 	
      virtual void SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setagingtime"
      // 			body: "*"
      // 		};
      // 	
      virtual void GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getagingtime"
      // 			body: "*"
      // 		};
      //
      virtual void GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getdevicemacinfo"
      // 			body: "*"
      // 		};
      //
      virtual void SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setsdntable"
      // 			body: "*"
      // 		};
      //
      virtual void GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getsdntable"
      // 			body: "*"
      // 		};
      //
      virtual void SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setlength"
      // 			body: "*"
      // 		};
      virtual void GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getlength"
      // 			body: "*"
      // 		};
      virtual void SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setquietzone"
      // 			body: "*"
      // 		};
      virtual void GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getquietzone"
      // 			body: "*"
      // 		};
      virtual void SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setfecmode"
      // 			body: "*"
      // 		};
      virtual void GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getfecmode"
      // 			body: "*"
      // 		};
      virtual void AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/addonu"
      // 			body: "*"
      // 		};
      virtual void DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/delonu"
      // 			body: "*"
      // 		};
      virtual void AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/addonusla"
      // 			body: "*"
      // 		};
      virtual void ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/clearonusla"
      // 			body: "*"
      // 		};
      virtual void GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getslatalbe"
      // 			body: "*"
      // 		};
      virtual void SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setonuallocid"
      // 			body: "*"
      // 		};
      virtual void DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/delonuallocid"
      // 			body: "*"
      // 		};
      virtual void SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setonuvssn"
      // 			body: "*"
      // 		};
      virtual void GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "api/boss/v1/getonuvssn"
      // 			body: "*"
      // 		};
      virtual void GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post : "/api/boss/v1/getonudistance"
      // 			body : "*"
      // 		};
      virtual void SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setburstdelimiter"
      // 			body: "*"
      // 		};
      virtual void GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getburstdelimiter"
      // 			body: "*"
      // 		};
      virtual void SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setburstpreamble"
      // 			body: "*"
      // 		};
      virtual void GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getburstpreamble"
      // 			body: "*"
      // 		};
      virtual void SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setburstversion"
      // 			body: "*"
      // 		};
      virtual void GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getburstversion"
      // 			body: "*"
      // 		};
      virtual void SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setburstprofile"
      // 			body: "*"
      // 		};
      virtual void GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getburstprofile"
      // 			body: "*"
      // 		};
      virtual void GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getregisterstatus"
      // 			body: "*"
      // 		};
      virtual void GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getonuinfo"
      // 			body: "*"
      // 		};
      virtual void GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getburstprofile"
      // 			body: "*"
      // 		};
      virtual void SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setdsomcionu"
      // 			body: "*"
      // 		};
      virtual void SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/settod"
      // 			body: "*"
      // 		};
      virtual void GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/gettod"
      // 			body: "*"
      // 		};
      virtual void SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setdatamode"
      // 			body: "*"
      // 		};
      virtual void GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getdatamode"
      // 			body: "*"
      // 		};
      virtual void SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setfecdecmode"
      // 			body: "*"
      // 		};
      virtual void GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getfecdecmode"
      // 			body: "*"
      // 		};
      virtual void SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setdelimiter"
      // 			body: "*"
      // 		};
      virtual void GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getdelimiter"
      // 			body: "*"
      // 		};
      virtual void SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/seterrorpermit"
      // 			body: "*"
      // 		};
      virtual void GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/geterrorpermit"
      // 			body: "*"
      // 		};
      virtual void SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setpmcontrol"
      // 			body: "*"
      // 		};
      virtual void GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getpmcontrol"
      // 			body: "*"
      // 		};
      virtual void GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/getpmtable"
      // 			body: "*"
      // 		};
      virtual void SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setsaon"
      // 			body: "*"
      // 		};
      virtual void SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 		option (google.api.http) = { 
      // 			post: "/api/boss/v1/setsaoff"
      // 			body: "*"
      // 		};
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltConnResponse>* AsyncGetOltConnectRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltConnResponse>* PrepareAsyncGetOltConnectRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltDevResponse>* AsyncGetOltDeviceInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OltDevResponse>* PrepareAsyncGetOltDeviceInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetPmdTxDisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetPmdTxDisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdTxdisResponse>* AsyncGetPmdTxdisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdTxdisResponse>* PrepareAsyncGetPmdTxdisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdStatusResponse>* AsyncGetDevicePmdStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmdStatusResponse>* PrepareAsyncGetDevicePmdStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetPortResponse>* AsyncGetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetPortResponse>* PrepareAsyncGetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncPortResetRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncPortResetRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::MtuSizeResponse>* AsyncGetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::MtuSizeResponse>* PrepareAsyncGetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetVlanResponse>* AsyncGetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::GetVlanResponse>* PrepareAsyncGetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* AsyncGetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* PrepareAsyncGetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* AsyncGetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* PrepareAsyncGetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AgingTimeResponse>* AsyncGetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AgingTimeResponse>* PrepareAsyncGetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::DevMacInfoResponse>* AsyncGetDeviceMacInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::DevMacInfoResponse>* PrepareAsyncGetDeviceMacInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableKeyResponse>* AsyncSetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableKeyResponse>* PrepareAsyncSetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableResponse>* AsyncGetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SdnTableResponse>* PrepareAsyncGetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::LengthResponse>* AsyncGetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::LengthResponse>* PrepareAsyncGetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::QuietZoneResponse>* AsyncGetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::QuietZoneResponse>* PrepareAsyncGetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* AsyncGetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* PrepareAsyncGetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AddOnuResponse>* AsyncAddOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::AddOnuResponse>* PrepareAsyncAddOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncDeleteOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncDeleteOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncAddOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncAddOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncClearOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncClearOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SlaResponse>* AsyncGetSlaTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::SlaResponse>* PrepareAsyncGetSlaTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncDelOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncDelOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuVssnResponse>* AsyncGetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuVssnResponse>* PrepareAsyncGetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuDistResponse>* AsyncGetOnuDistanceRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuDistResponse>* PrepareAsyncGetOnuDistanceRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstDelimitResponse>* AsyncGetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstDelimitResponse>* PrepareAsyncGetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstPreambleResponse>* AsyncGetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstPreambleResponse>* PrepareAsyncGetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstVersionResponse>* AsyncGetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstVersionResponse>* PrepareAsyncGetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstProfileResponse>* AsyncGetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::BurstProfileResponse>* PrepareAsyncGetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::RegisterStatusResponse>* AsyncGetRegisterStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::RegisterStatusResponse>* PrepareAsyncGetRegisterStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuInfoResponse>* AsyncGetOnuInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::OnuInfoResponse>* PrepareAsyncGetOnuInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::StatusResponse>* AsyncGetOmciStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::StatusResponse>* PrepareAsyncGetOmciStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetDsOmciOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetDsOmciOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::TodResponse>* AsyncGetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::TodResponse>* PrepareAsyncGetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* AsyncGetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* PrepareAsyncGetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* AsyncGetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ModeResponse>* PrepareAsyncGetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::FecDecResponse>* AsyncGetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::FecDecResponse>* PrepareAsyncGetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ErrorPermitResponse>* AsyncGetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ErrorPermitResponse>* PrepareAsyncGetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmControlResponse>* AsyncGetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmControlResponse>* PrepareAsyncGetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmTableResponse>* AsyncGetPmTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::PmTableResponse>* PrepareAsyncGetPmTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetSAOnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetSAOnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* AsyncSetSAOffRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bossopenolt::ExecResult>* PrepareAsyncSetSAOffRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OltConnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>> AsyncGetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>>(AsyncGetOltConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>> PrepareAsyncGetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>>(PrepareAsyncGetOltConnectRaw(context, request, cq));
    }
    ::grpc::Status GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OltDevResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>> AsyncGetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>>(AsyncGetOltDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>> PrepareAsyncGetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>>(PrepareAsyncGetOltDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetPmdTxDisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetPmdTxDisRaw(context, request, cq));
    }
    ::grpc::Status GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmdTxdisResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>> AsyncGetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>>(AsyncGetPmdTxdisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>> PrepareAsyncGetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>>(PrepareAsyncGetPmdTxdisRaw(context, request, cq));
    }
    ::grpc::Status GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmdStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>> AsyncGetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>>(AsyncGetDevicePmdStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>> PrepareAsyncGetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>>(PrepareAsyncGetDevicePmdStatusRaw(context, request, cq));
    }
    ::grpc::Status SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetDevicePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetDevicePortRaw(context, request, cq));
    }
    ::grpc::Status GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::GetPortResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>> AsyncGetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>>(AsyncGetDevicePortRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>> PrepareAsyncGetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>>(PrepareAsyncGetDevicePortRaw(context, request, cq));
    }
    ::grpc::Status PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncPortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncPortResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncPortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncPortResetRaw(context, request, cq));
    }
    ::grpc::Status SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetMtuSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetMtuSizeRaw(context, request, cq));
    }
    ::grpc::Status GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::MtuSizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>> AsyncGetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>>(AsyncGetMtuSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>> PrepareAsyncGetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>>(PrepareAsyncGetMtuSizeRaw(context, request, cq));
    }
    ::grpc::Status SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetVlanRaw(context, request, cq));
    }
    ::grpc::Status GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::GetVlanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>> AsyncGetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>>(AsyncGetVlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>> PrepareAsyncGetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>>(PrepareAsyncGetVlanRaw(context, request, cq));
    }
    ::grpc::Status SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetLutModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetLutModeRaw(context, request, cq));
    }
    ::grpc::Status GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> AsyncGetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(AsyncGetLutModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> PrepareAsyncGetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(PrepareAsyncGetLutModeRaw(context, request, cq));
    }
    ::grpc::Status SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetAgingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetAgingModeRaw(context, request, cq));
    }
    ::grpc::Status GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> AsyncGetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(AsyncGetAgingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> PrepareAsyncGetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(PrepareAsyncGetAgingModeRaw(context, request, cq));
    }
    ::grpc::Status SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetAgingTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetAgingTimeRaw(context, request, cq));
    }
    ::grpc::Status GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::AgingTimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>> AsyncGetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>>(AsyncGetAgingTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>> PrepareAsyncGetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>>(PrepareAsyncGetAgingTimeRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::DevMacInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>> AsyncGetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>>(AsyncGetDeviceMacInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>> PrepareAsyncGetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>>(PrepareAsyncGetDeviceMacInfoRaw(context, request, cq));
    }
    ::grpc::Status SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SdnTableKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>> AsyncSetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>>(AsyncSetSdnTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>> PrepareAsyncSetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>>(PrepareAsyncSetSdnTableRaw(context, request, cq));
    }
    ::grpc::Status GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SdnTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>> AsyncGetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>>(AsyncGetSdnTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>> PrepareAsyncGetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>>(PrepareAsyncGetSdnTableRaw(context, request, cq));
    }
    ::grpc::Status SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetLengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetLengthRaw(context, request, cq));
    }
    ::grpc::Status GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::LengthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>> AsyncGetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>>(AsyncGetLengthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>> PrepareAsyncGetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>>(PrepareAsyncGetLengthRaw(context, request, cq));
    }
    ::grpc::Status SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetQuietZoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetQuietZoneRaw(context, request, cq));
    }
    ::grpc::Status GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::QuietZoneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>> AsyncGetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>>(AsyncGetQuietZoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>> PrepareAsyncGetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>>(PrepareAsyncGetQuietZoneRaw(context, request, cq));
    }
    ::grpc::Status SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetFecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetFecModeRaw(context, request, cq));
    }
    ::grpc::Status GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> AsyncGetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(AsyncGetFecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> PrepareAsyncGetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(PrepareAsyncGetFecModeRaw(context, request, cq));
    }
    ::grpc::Status AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::AddOnuResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>> AsyncAddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>>(AsyncAddOnuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>> PrepareAsyncAddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>>(PrepareAsyncAddOnuRaw(context, request, cq));
    }
    ::grpc::Status DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncDeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncDeleteOnuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncDeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncDeleteOnuRaw(context, request, cq));
    }
    ::grpc::Status AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncAddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncAddOnuSlaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncAddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncAddOnuSlaRaw(context, request, cq));
    }
    ::grpc::Status ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncClearOnuSlaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncClearOnuSlaRaw(context, request, cq));
    }
    ::grpc::Status GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::SlaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>> AsyncGetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>>(AsyncGetSlaTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>> PrepareAsyncGetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>>(PrepareAsyncGetSlaTableRaw(context, request, cq));
    }
    ::grpc::Status SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetOnuAllocidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetOnuAllocidRaw(context, request, cq));
    }
    ::grpc::Status DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncDelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncDelOnuAllocidRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncDelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncDelOnuAllocidRaw(context, request, cq));
    }
    ::grpc::Status SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetOnuVssnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetOnuVssnRaw(context, request, cq));
    }
    ::grpc::Status GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuVssnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>> AsyncGetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>>(AsyncGetOnuVssnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>> PrepareAsyncGetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>>(PrepareAsyncGetOnuVssnRaw(context, request, cq));
    }
    ::grpc::Status GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuDistResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>> AsyncGetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>>(AsyncGetOnuDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>> PrepareAsyncGetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>>(PrepareAsyncGetOnuDistanceRaw(context, request, cq));
    }
    ::grpc::Status SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetBurstDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstDelimiterRaw(context, request, cq));
    }
    ::grpc::Status GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstDelimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>> AsyncGetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>>(AsyncGetBurstDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>> PrepareAsyncGetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>>(PrepareAsyncGetBurstDelimiterRaw(context, request, cq));
    }
    ::grpc::Status SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetBurstPreambleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstPreambleRaw(context, request, cq));
    }
    ::grpc::Status GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstPreambleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>> AsyncGetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>>(AsyncGetBurstPreambleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>> PrepareAsyncGetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>>(PrepareAsyncGetBurstPreambleRaw(context, request, cq));
    }
    ::grpc::Status SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetBurstVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstVersionRaw(context, request, cq));
    }
    ::grpc::Status GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>> AsyncGetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>>(AsyncGetBurstVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>> PrepareAsyncGetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>>(PrepareAsyncGetBurstVersionRaw(context, request, cq));
    }
    ::grpc::Status SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetBurstProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetBurstProfileRaw(context, request, cq));
    }
    ::grpc::Status GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::BurstProfileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>> AsyncGetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>>(AsyncGetBurstProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>> PrepareAsyncGetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>>(PrepareAsyncGetBurstProfileRaw(context, request, cq));
    }
    ::grpc::Status GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::RegisterStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>> AsyncGetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>>(AsyncGetRegisterStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>> PrepareAsyncGetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>>(PrepareAsyncGetRegisterStatusRaw(context, request, cq));
    }
    ::grpc::Status GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::OnuInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>> AsyncGetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>>(AsyncGetOnuInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>> PrepareAsyncGetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>>(PrepareAsyncGetOnuInfoRaw(context, request, cq));
    }
    ::grpc::Status GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>> AsyncGetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>>(AsyncGetOmciStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>> PrepareAsyncGetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>>(PrepareAsyncGetOmciStatusRaw(context, request, cq));
    }
    ::grpc::Status SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetDsOmciOnuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetDsOmciOnuRaw(context, request, cq));
    }
    ::grpc::Status SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetTodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetTodRaw(context, request, cq));
    }
    ::grpc::Status GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::TodResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>> AsyncGetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>>(AsyncGetTodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>> PrepareAsyncGetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>>(PrepareAsyncGetTodRaw(context, request, cq));
    }
    ::grpc::Status SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetDataModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetDataModeRaw(context, request, cq));
    }
    ::grpc::Status GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> AsyncGetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(AsyncGetDataModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> PrepareAsyncGetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(PrepareAsyncGetDataModeRaw(context, request, cq));
    }
    ::grpc::Status SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetFecDecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetFecDecModeRaw(context, request, cq));
    }
    ::grpc::Status GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> AsyncGetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(AsyncGetFecDecModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>> PrepareAsyncGetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>>(PrepareAsyncGetFecDecModeRaw(context, request, cq));
    }
    ::grpc::Status SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetDelimiterRaw(context, request, cq));
    }
    ::grpc::Status GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::FecDecResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>> AsyncGetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>>(AsyncGetDelimiterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>> PrepareAsyncGetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>>(PrepareAsyncGetDelimiterRaw(context, request, cq));
    }
    ::grpc::Status SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetErrorPermitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetErrorPermitRaw(context, request, cq));
    }
    ::grpc::Status GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ErrorPermitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>> AsyncGetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>>(AsyncGetErrorPermitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>> PrepareAsyncGetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>>(PrepareAsyncGetErrorPermitRaw(context, request, cq));
    }
    ::grpc::Status SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetPmControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetPmControlRaw(context, request, cq));
    }
    ::grpc::Status GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>> AsyncGetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>>(AsyncGetPmControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>> PrepareAsyncGetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>>(PrepareAsyncGetPmControlRaw(context, request, cq));
    }
    ::grpc::Status GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::PmTableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>> AsyncGetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>>(AsyncGetPmTableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>> PrepareAsyncGetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>>(PrepareAsyncGetPmTableRaw(context, request, cq));
    }
    ::grpc::Status SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetSAOnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetSAOnRaw(context, request, cq));
    }
    ::grpc::Status SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::bossopenolt::ExecResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> AsyncSetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(AsyncSetSAOffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>> PrepareAsyncSetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>>(PrepareAsyncSetSAOffRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOltConnect(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOltDeviceInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPmdTxDis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPmdTxdis(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDevicePmdStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDevicePort(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PortReset(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMtuSize(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVlan(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLutMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAgingMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAgingTime(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeviceMacInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSdnTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLength(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetQuietZone(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearOnuSla(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSlaTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DelOnuAllocid(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOnuVssn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOnuDistance(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBurstDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBurstPreamble(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBurstVersion(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBurstProfile(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRegisterStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOnuInfo(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOmciStatus(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDsOmciOnu(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTod(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDataMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetFecDecMode(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDelimiter(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetErrorPermit(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPmControl(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPmTable(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSAOn(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSAOff(::grpc::ClientContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>* AsyncGetOltConnectRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltConnResponse>* PrepareAsyncGetOltConnectRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>* AsyncGetOltDeviceInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OltDevResponse>* PrepareAsyncGetOltDeviceInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetPmdTxDisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetPmdTxDisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>* AsyncGetPmdTxdisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdTxdisResponse>* PrepareAsyncGetPmdTxdisRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>* AsyncGetDevicePmdStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmdStatusResponse>* PrepareAsyncGetDevicePmdStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>* AsyncGetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetPortResponse>* PrepareAsyncGetDevicePortRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncPortResetRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncPortResetRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>* AsyncGetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::MtuSizeResponse>* PrepareAsyncGetMtuSizeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>* AsyncGetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::GetVlanResponse>* PrepareAsyncGetVlanRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* AsyncGetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* PrepareAsyncGetLutModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* AsyncGetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* PrepareAsyncGetAgingModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>* AsyncGetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::AgingTimeResponse>* PrepareAsyncGetAgingTimeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>* AsyncGetDeviceMacInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::DevMacInfoResponse>* PrepareAsyncGetDeviceMacInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>* AsyncSetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableKeyResponse>* PrepareAsyncSetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>* AsyncGetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::SdnTableResponse>* PrepareAsyncGetSdnTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>* AsyncGetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::LengthResponse>* PrepareAsyncGetLengthRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>* AsyncGetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::QuietZoneResponse>* PrepareAsyncGetQuietZoneRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* AsyncGetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* PrepareAsyncGetFecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>* AsyncAddOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::AddOnuResponse>* PrepareAsyncAddOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncDeleteOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncDeleteOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncAddOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncAddOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncClearOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncClearOnuSlaRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>* AsyncGetSlaTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::SlaResponse>* PrepareAsyncGetSlaTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncDelOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncDelOnuAllocidRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>* AsyncGetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuVssnResponse>* PrepareAsyncGetOnuVssnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>* AsyncGetOnuDistanceRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuDistResponse>* PrepareAsyncGetOnuDistanceRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>* AsyncGetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstDelimitResponse>* PrepareAsyncGetBurstDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>* AsyncGetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstPreambleResponse>* PrepareAsyncGetBurstPreambleRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>* AsyncGetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstVersionResponse>* PrepareAsyncGetBurstVersionRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>* AsyncGetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::BurstProfileResponse>* PrepareAsyncGetBurstProfileRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>* AsyncGetRegisterStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::RegisterStatusResponse>* PrepareAsyncGetRegisterStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>* AsyncGetOnuInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::OnuInfoResponse>* PrepareAsyncGetOnuInfoRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>* AsyncGetOmciStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::StatusResponse>* PrepareAsyncGetOmciStatusRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetDsOmciOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetDsOmciOnuRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>* AsyncGetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::TodResponse>* PrepareAsyncGetTodRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* AsyncGetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* PrepareAsyncGetDataModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* AsyncGetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ModeResponse>* PrepareAsyncGetFecDecModeRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>* AsyncGetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::FecDecResponse>* PrepareAsyncGetDelimiterRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>* AsyncGetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ErrorPermitResponse>* PrepareAsyncGetErrorPermitRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>* AsyncGetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmControlResponse>* PrepareAsyncGetPmControlRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>* AsyncGetPmTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::PmTableResponse>* PrepareAsyncGetPmTableRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetSAOnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetSAOnRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* AsyncSetSAOffRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bossopenolt::ExecResult>* PrepareAsyncSetSAOffRaw(::grpc::ClientContext* context, const ::bossopenolt::boss_request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOltConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOltDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPmdTxDis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPmdTxdis_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevicePmdStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDevicePort_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDevicePort_;
    const ::grpc::internal::RpcMethod rpcmethod_PortReset_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMtuSize_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMtuSize_;
    const ::grpc::internal::RpcMethod rpcmethod_SetVlan_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVlan_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLutMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLutMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgingMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgingMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAgingTime_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgingTime_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceMacInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSdnTable_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSdnTable_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLength_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLength_;
    const ::grpc::internal::RpcMethod rpcmethod_SetQuietZone_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQuietZone_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFecMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFecMode_;
    const ::grpc::internal::RpcMethod rpcmethod_AddOnu_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOnu_;
    const ::grpc::internal::RpcMethod rpcmethod_AddOnuSla_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearOnuSla_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSlaTable_;
    const ::grpc::internal::RpcMethod rpcmethod_SetOnuAllocid_;
    const ::grpc::internal::RpcMethod rpcmethod_DelOnuAllocid_;
    const ::grpc::internal::RpcMethod rpcmethod_SetOnuVssn_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOnuVssn_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOnuDistance_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBurstDelimiter_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBurstDelimiter_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBurstPreamble_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBurstPreamble_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBurstVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBurstVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBurstProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBurstProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRegisterStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOnuInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOmciStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDsOmciOnu_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTod_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTod_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDataMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDataMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFecDecMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFecDecMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDelimiter_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDelimiter_;
    const ::grpc::internal::RpcMethod rpcmethod_SetErrorPermit_;
    const ::grpc::internal::RpcMethod rpcmethod_GetErrorPermit_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPmControl_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPmControl_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPmTable_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSAOn_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSAOff_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetOltConnect(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response);
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/getoltconnect"
    // //			body : "*"
    // //		};
    // 	
    virtual ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response);
    // //		option (google.api.http) = {
    // //			post: "/api/boss/v1/getoltdeviceinfo"
    // //			body: "*"
    // //		};
    // 	
    virtual ::grpc::Status SetPmdTxDis(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/setpmdtxdis"
    // //			body: "*"
    // //		};
    //
    virtual ::grpc::Status GetPmdTxdis(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response);
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/getpmdtxdis"
    // //			body: "*"
    // //		};
    //
    virtual ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response);
    // //		option (google.api.http) = {
    // //			post: "/api/boss/v1/getdevicepmdstatus"
    // //			body: "*"
    // //		};
    virtual ::grpc::Status SetDevicePort(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/setdeviceport"
    // //			body: "*"
    // //		};
    // 	
    virtual ::grpc::Status GetDevicePort(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response);
    // //		option (google.api.http) = { 
    // //			post: "/api/boss/v1/getdeviceport"
    // //			body: "*"
    // //		};
    //
    virtual ::grpc::Status PortReset(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/portreset"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetMtuSize(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setmtusize"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetMtuSize(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getmtusize"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetVlan(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setvlan"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status GetVlan(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getvlan"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetLutMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setlutmode"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetLutMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getlutmode"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status SetAgingMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setagingmode"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetAgingMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getagingmode"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status SetAgingTime(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setagingtime"
    // 			body: "*"
    // 		};
    // 	
    virtual ::grpc::Status GetAgingTime(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getagingtime"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getdevicemacinfo"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetSdnTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setsdntable"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status GetSdnTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getsdntable"
    // 			body: "*"
    // 		};
    //
    virtual ::grpc::Status SetLength(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setlength"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetLength(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getlength"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetQuietZone(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setquietzone"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetQuietZone(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getquietzone"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetFecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setfecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetFecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getfecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status AddOnu(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/addonu"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status DeleteOnu(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/delonu"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status AddOnuSla(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/addonusla"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status ClearOnuSla(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/clearonusla"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetSlaTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getslatalbe"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetOnuAllocid(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setonuallocid"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status DelOnuAllocid(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/delonuallocid"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetOnuVssn(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setonuvssn"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOnuVssn(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "api/boss/v1/getonuvssn"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOnuDistance(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response);
    // 		option (google.api.http) = { 
    // 			post : "/api/boss/v1/getonudistance"
    // 			body : "*"
    // 		};
    virtual ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetBurstPreamble(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstpreamble"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstPreamble(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstpreamble"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetBurstVersion(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstversion"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstVersion(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstversion"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetBurstProfile(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setburstprofile"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetBurstProfile(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstprofile"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetRegisterStatus(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getregisterstatus"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOnuInfo(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getonuinfo"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetOmciStatus(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getburstprofile"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setdsomcionu"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetTod(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/settod"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetTod(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/gettod"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetDataMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setdatamode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetDataMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getdatamode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetFecDecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setfecdecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetFecDecMode(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getfecdecmode"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetDelimiter(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getdelimiter"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetErrorPermit(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/seterrorpermit"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetErrorPermit(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/geterrorpermit"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetPmControl(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setpmcontrol"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetPmControl(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getpmcontrol"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status GetPmTable(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/getpmtable"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetSAOn(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setsaon"
    // 			body: "*"
    // 		};
    virtual ::grpc::Status SetSAOff(::grpc::ServerContext* context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response);
    // 		option (google.api.http) = { 
    // 			post: "/api/boss/v1/setsaoff"
    // 			body: "*"
    // 		};
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOltConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOltConnect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOltConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltConnect(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOltConnect(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::OltConnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOltDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOltDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOltDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOltDeviceInfo(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::OltDevResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPmdTxDis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPmdTxDis() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetPmdTxDis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmdTxDis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPmdTxDis(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPmdTxdis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPmdTxdis() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetPmdTxdis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmdTxdis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPmdTxdis(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::PmdTxdisResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevicePmdStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevicePmdStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetDevicePmdStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevicePmdStatus(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::PmdStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDevicePort() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDevicePort(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDevicePort() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevicePort(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::GetPortResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PortReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PortReset() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PortReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PortReset(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPortReset(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMtuSize() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMtuSize(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMtuSize() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMtuSize(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::MtuSizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetVlan() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVlan(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVlan() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVlan(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::GetVlanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLutMode() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLutMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLutMode() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLutMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgingMode() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgingMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgingMode() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgingMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAgingTime() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_SetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgingTime(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgingTime() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgingTime(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::AgingTimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceMacInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceMacInfo() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetDeviceMacInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceMacInfo(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::DevMacInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSdnTable() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_SetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSdnTable(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::SdnTableKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSdnTable() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSdnTable(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::SdnTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLength() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_SetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLength(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLength() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLength(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::LengthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetQuietZone() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_SetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetQuietZone(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQuietZone() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuietZone(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::QuietZoneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFecMode() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_SetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFecMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFecMode() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFecMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddOnu() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_AddOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOnu(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::AddOnuResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOnu() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_DeleteOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOnu(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddOnuSla() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_AddOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOnuSla(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearOnuSla() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_ClearOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearOnuSla(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSlaTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSlaTable() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_GetSlaTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlaTable(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::SlaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetOnuAllocid() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_SetOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOnuAllocid(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelOnuAllocid() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_DelOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelOnuAllocid(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetOnuVssn() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_SetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOnuVssn(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOnuVssn() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_GetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnuVssn(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::OnuVssnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOnuDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOnuDistance() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_GetOnuDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuDistance(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnuDistance(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::OnuDistResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBurstDelimiter() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_SetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstDelimiter(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBurstDelimiter() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_GetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstDelimiter(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::BurstDelimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBurstPreamble() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_SetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstPreamble(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBurstPreamble() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_GetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstPreamble(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::BurstPreambleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBurstVersion() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_SetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstVersion(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBurstVersion() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_GetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstVersion(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::BurstVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBurstProfile() {
      ::grpc::Service::MarkMethodAsync(43);
    }
    ~WithAsyncMethod_SetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstProfile(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBurstProfile() {
      ::grpc::Service::MarkMethodAsync(44);
    }
    ~WithAsyncMethod_GetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstProfile(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::BurstProfileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRegisterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRegisterStatus() {
      ::grpc::Service::MarkMethodAsync(45);
    }
    ~WithAsyncMethod_GetRegisterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegisterStatus(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::RegisterStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOnuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOnuInfo() {
      ::grpc::Service::MarkMethodAsync(46);
    }
    ~WithAsyncMethod_GetOnuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnuInfo(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::OnuInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOmciStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOmciStatus() {
      ::grpc::Service::MarkMethodAsync(47);
    }
    ~WithAsyncMethod_GetOmciStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOmciStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOmciStatus(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDsOmciOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDsOmciOnu() {
      ::grpc::Service::MarkMethodAsync(48);
    }
    ~WithAsyncMethod_SetDsOmciOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDsOmciOnu(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTod() {
      ::grpc::Service::MarkMethodAsync(49);
    }
    ~WithAsyncMethod_SetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTod(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTod() {
      ::grpc::Service::MarkMethodAsync(50);
    }
    ~WithAsyncMethod_GetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTod(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::TodResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDataMode() {
      ::grpc::Service::MarkMethodAsync(51);
    }
    ~WithAsyncMethod_SetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDataMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDataMode() {
      ::grpc::Service::MarkMethodAsync(52);
    }
    ~WithAsyncMethod_GetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFecDecMode() {
      ::grpc::Service::MarkMethodAsync(53);
    }
    ~WithAsyncMethod_SetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFecDecMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFecDecMode() {
      ::grpc::Service::MarkMethodAsync(54);
    }
    ~WithAsyncMethod_GetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFecDecMode(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDelimiter() {
      ::grpc::Service::MarkMethodAsync(55);
    }
    ~WithAsyncMethod_SetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDelimiter(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDelimiter() {
      ::grpc::Service::MarkMethodAsync(56);
    }
    ~WithAsyncMethod_GetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelimiter(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::FecDecResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetErrorPermit() {
      ::grpc::Service::MarkMethodAsync(57);
    }
    ~WithAsyncMethod_SetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetErrorPermit(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetErrorPermit() {
      ::grpc::Service::MarkMethodAsync(58);
    }
    ~WithAsyncMethod_GetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetErrorPermit(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ErrorPermitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPmControl() {
      ::grpc::Service::MarkMethodAsync(59);
    }
    ~WithAsyncMethod_SetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPmControl(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPmControl() {
      ::grpc::Service::MarkMethodAsync(60);
    }
    ~WithAsyncMethod_GetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPmControl(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::PmControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPmTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPmTable() {
      ::grpc::Service::MarkMethodAsync(61);
    }
    ~WithAsyncMethod_GetPmTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPmTable(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::PmTableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSAOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSAOn() {
      ::grpc::Service::MarkMethodAsync(62);
    }
    ~WithAsyncMethod_SetSAOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSAOn(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSAOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSAOff() {
      ::grpc::Service::MarkMethodAsync(63);
    }
    ~WithAsyncMethod_SetSAOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOff(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSAOff(::grpc::ServerContext* context, ::bossopenolt::boss_request* request, ::grpc::ServerAsyncResponseWriter< ::bossopenolt::ExecResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOltConnect<WithAsyncMethod_GetOltDeviceInfo<WithAsyncMethod_SetPmdTxDis<WithAsyncMethod_GetPmdTxdis<WithAsyncMethod_GetDevicePmdStatus<WithAsyncMethod_SetDevicePort<WithAsyncMethod_GetDevicePort<WithAsyncMethod_PortReset<WithAsyncMethod_SetMtuSize<WithAsyncMethod_GetMtuSize<WithAsyncMethod_SetVlan<WithAsyncMethod_GetVlan<WithAsyncMethod_SetLutMode<WithAsyncMethod_GetLutMode<WithAsyncMethod_SetAgingMode<WithAsyncMethod_GetAgingMode<WithAsyncMethod_SetAgingTime<WithAsyncMethod_GetAgingTime<WithAsyncMethod_GetDeviceMacInfo<WithAsyncMethod_SetSdnTable<WithAsyncMethod_GetSdnTable<WithAsyncMethod_SetLength<WithAsyncMethod_GetLength<WithAsyncMethod_SetQuietZone<WithAsyncMethod_GetQuietZone<WithAsyncMethod_SetFecMode<WithAsyncMethod_GetFecMode<WithAsyncMethod_AddOnu<WithAsyncMethod_DeleteOnu<WithAsyncMethod_AddOnuSla<WithAsyncMethod_ClearOnuSla<WithAsyncMethod_GetSlaTable<WithAsyncMethod_SetOnuAllocid<WithAsyncMethod_DelOnuAllocid<WithAsyncMethod_SetOnuVssn<WithAsyncMethod_GetOnuVssn<WithAsyncMethod_GetOnuDistance<WithAsyncMethod_SetBurstDelimiter<WithAsyncMethod_GetBurstDelimiter<WithAsyncMethod_SetBurstPreamble<WithAsyncMethod_GetBurstPreamble<WithAsyncMethod_SetBurstVersion<WithAsyncMethod_GetBurstVersion<WithAsyncMethod_SetBurstProfile<WithAsyncMethod_GetBurstProfile<WithAsyncMethod_GetRegisterStatus<WithAsyncMethod_GetOnuInfo<WithAsyncMethod_GetOmciStatus<WithAsyncMethod_SetDsOmciOnu<WithAsyncMethod_SetTod<WithAsyncMethod_GetTod<WithAsyncMethod_SetDataMode<WithAsyncMethod_GetDataMode<WithAsyncMethod_SetFecDecMode<WithAsyncMethod_GetFecDecMode<WithAsyncMethod_SetDelimiter<WithAsyncMethod_GetDelimiter<WithAsyncMethod_SetErrorPermit<WithAsyncMethod_GetErrorPermit<WithAsyncMethod_SetPmControl<WithAsyncMethod_GetPmControl<WithAsyncMethod_GetPmTable<WithAsyncMethod_SetSAOn<WithAsyncMethod_SetSAOff<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOltConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOltConnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltConnResponse* response) { return this->GetOltConnect(context, request, response); }));}
    void SetMessageAllocatorFor_GetOltConnect(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOltConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltConnect(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOltConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOltConnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOltDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOltDeviceInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::OltDevResponse* response) { return this->GetOltDeviceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetOltDeviceInfo(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOltDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOltDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOltDeviceInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPmdTxDis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPmdTxDis() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetPmdTxDis(context, request, response); }));}
    void SetMessageAllocatorFor_SetPmdTxDis(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPmdTxDis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmdTxDis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPmdTxDis(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPmdTxDis(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPmdTxdis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPmdTxdis() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdTxdisResponse* response) { return this->GetPmdTxdis(context, request, response); }));}
    void SetMessageAllocatorFor_GetPmdTxdis(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPmdTxdis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmdTxdis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPmdTxdis(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPmdTxdis(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDevicePmdStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDevicePmdStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmdStatusResponse* response) { return this->GetDevicePmdStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevicePmdStatus(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDevicePmdStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDevicePmdStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDevicePmdStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDevicePort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetDevicePort(context, request, response); }));}
    void SetMessageAllocatorFor_SetDevicePort(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDevicePort(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDevicePort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDevicePort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetPortResponse* response) { return this->GetDevicePort(context, request, response); }));}
    void SetMessageAllocatorFor_GetDevicePort(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDevicePort(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDevicePort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PortReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PortReset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->PortReset(context, request, response); }));}
    void SetMessageAllocatorFor_PortReset(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PortReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PortReset(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PortReset(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PortReset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetMtuSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetMtuSize(context, request, response); }));}
    void SetMessageAllocatorFor_SetMtuSize(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetMtuSize(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetMtuSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMtuSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::MtuSizeResponse* response) { return this->GetMtuSize(context, request, response); }));}
    void SetMessageAllocatorFor_GetMtuSize(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMtuSize(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMtuSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetVlan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetVlan(context, request, response); }));}
    void SetMessageAllocatorFor_SetVlan(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetVlan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVlan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::GetVlanResponse* response) { return this->GetVlan(context, request, response); }));}
    void SetMessageAllocatorFor_GetVlan(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVlan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetLutMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetLutMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetLutMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetLutMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetLutMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLutMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) { return this->GetLutMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetLutMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLutMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLutMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetAgingMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetAgingMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgingMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAgingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAgingMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAgingMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) { return this->GetAgingMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgingMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAgingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAgingMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetAgingTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetAgingTime(context, request, response); }));}
    void SetMessageAllocatorFor_SetAgingTime(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAgingTime(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAgingTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAgingTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::AgingTimeResponse* response) { return this->GetAgingTime(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgingTime(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAgingTime(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAgingTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDeviceMacInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDeviceMacInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::DevMacInfoResponse* response) { return this->GetDeviceMacInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceMacInfo(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDeviceMacInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeviceMacInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeviceMacInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetSdnTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableKeyResponse* response) { return this->SetSdnTable(context, request, response); }));}
    void SetMessageAllocatorFor_SetSdnTable(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSdnTable(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSdnTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSdnTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::SdnTableResponse* response) { return this->GetSdnTable(context, request, response); }));}
    void SetMessageAllocatorFor_GetSdnTable(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSdnTable(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSdnTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetLength() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetLength(context, request, response); }));}
    void SetMessageAllocatorFor_SetLength(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(21);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetLength(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetLength(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLength() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::LengthResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::LengthResponse* response) { return this->GetLength(context, request, response); }));}
    void SetMessageAllocatorFor_GetLength(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::LengthResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(22);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::LengthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLength(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLength(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetQuietZone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetQuietZone(context, request, response); }));}
    void SetMessageAllocatorFor_SetQuietZone(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(23);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetQuietZone(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetQuietZone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetQuietZone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::QuietZoneResponse* response) { return this->GetQuietZone(context, request, response); }));}
    void SetMessageAllocatorFor_GetQuietZone(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(24);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetQuietZone(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetQuietZone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetFecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetFecMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetFecMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(25);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetFecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetFecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) { return this->GetFecMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetFecMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(26);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddOnu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::AddOnuResponse* response) { return this->AddOnu(context, request, response); }));}
    void SetMessageAllocatorFor_AddOnu(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(27);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddOnu(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddOnu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteOnu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->DeleteOnu(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOnu(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(28);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOnu(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOnu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddOnuSla() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->AddOnuSla(context, request, response); }));}
    void SetMessageAllocatorFor_AddOnuSla(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(29);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddOnuSla(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddOnuSla(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClearOnuSla() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->ClearOnuSla(context, request, response); }));}
    void SetMessageAllocatorFor_ClearOnuSla(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(30);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearOnuSla(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearOnuSla(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSlaTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSlaTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::SlaResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::SlaResponse* response) { return this->GetSlaTable(context, request, response); }));}
    void SetMessageAllocatorFor_GetSlaTable(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::SlaResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(31);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::SlaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSlaTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSlaTable(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSlaTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetOnuAllocid() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetOnuAllocid(context, request, response); }));}
    void SetMessageAllocatorFor_SetOnuAllocid(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(32);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetOnuAllocid(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetOnuAllocid(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DelOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DelOnuAllocid() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->DelOnuAllocid(context, request, response); }));}
    void SetMessageAllocatorFor_DelOnuAllocid(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(33);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DelOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DelOnuAllocid(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DelOnuAllocid(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetOnuVssn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetOnuVssn(context, request, response); }));}
    void SetMessageAllocatorFor_SetOnuVssn(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(34);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetOnuVssn(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetOnuVssn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOnuVssn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuVssnResponse* response) { return this->GetOnuVssn(context, request, response); }));}
    void SetMessageAllocatorFor_GetOnuVssn(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(35);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOnuVssn(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOnuVssn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOnuDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOnuDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuDistResponse* response) { return this->GetOnuDistance(context, request, response); }));}
    void SetMessageAllocatorFor_GetOnuDistance(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(36);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOnuDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuDistance(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOnuDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOnuDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetBurstDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetBurstDelimiter(context, request, response); }));}
    void SetMessageAllocatorFor_SetBurstDelimiter(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(37);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBurstDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstDelimitResponse* response) { return this->GetBurstDelimiter(context, request, response); }));}
    void SetMessageAllocatorFor_GetBurstDelimiter(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(38);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetBurstPreamble() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetBurstPreamble(context, request, response); }));}
    void SetMessageAllocatorFor_SetBurstPreamble(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(39);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstPreamble(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstPreamble(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBurstPreamble() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstPreambleResponse* response) { return this->GetBurstPreamble(context, request, response); }));}
    void SetMessageAllocatorFor_GetBurstPreamble(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(40);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstPreamble(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstPreamble(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetBurstVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetBurstVersion(context, request, response); }));}
    void SetMessageAllocatorFor_SetBurstVersion(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(41);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBurstVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstVersionResponse* response) { return this->GetBurstVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetBurstVersion(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(42);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetBurstProfile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetBurstProfile(context, request, response); }));}
    void SetMessageAllocatorFor_SetBurstProfile(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(43);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(43);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstProfile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBurstProfile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::BurstProfileResponse* response) { return this->GetBurstProfile(context, request, response); }));}
    void SetMessageAllocatorFor_GetBurstProfile(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(44);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(44);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstProfile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRegisterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRegisterStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::RegisterStatusResponse* response) { return this->GetRegisterStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetRegisterStatus(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(45);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(45);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRegisterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRegisterStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRegisterStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOnuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOnuInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::OnuInfoResponse* response) { return this->GetOnuInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetOnuInfo(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(46);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(46);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOnuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOnuInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOnuInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOmciStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOmciStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::StatusResponse* response) { return this->GetOmciStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetOmciStatus(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(47);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(47);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOmciStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOmciStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOmciStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOmciStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDsOmciOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDsOmciOnu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetDsOmciOnu(context, request, response); }));}
    void SetMessageAllocatorFor_SetDsOmciOnu(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(48);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(48);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDsOmciOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDsOmciOnu(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDsOmciOnu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetTod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetTod(context, request, response); }));}
    void SetMessageAllocatorFor_SetTod(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(49);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(49);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetTod(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetTod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::TodResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::TodResponse* response) { return this->GetTod(context, request, response); }));}
    void SetMessageAllocatorFor_GetTod(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::TodResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(50);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(50);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::TodResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTod(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDataMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetDataMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetDataMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(51);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(51);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDataMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDataMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDataMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) { return this->GetDataMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetDataMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(52);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(52);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDataMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDataMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetFecDecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetFecDecMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetFecDecMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(53);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(53);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetFecDecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetFecDecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetFecDecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ModeResponse* response) { return this->GetFecDecMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetFecDecMode(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(54);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(54);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFecDecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFecDecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetDelimiter(context, request, response); }));}
    void SetMessageAllocatorFor_SetDelimiter(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(55);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(55);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::FecDecResponse* response) { return this->GetDelimiter(context, request, response); }));}
    void SetMessageAllocatorFor_GetDelimiter(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(56);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(56);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetErrorPermit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetErrorPermit(context, request, response); }));}
    void SetMessageAllocatorFor_SetErrorPermit(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(57);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(57);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetErrorPermit(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetErrorPermit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetErrorPermit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ErrorPermitResponse* response) { return this->GetErrorPermit(context, request, response); }));}
    void SetMessageAllocatorFor_GetErrorPermit(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(58);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(58);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetErrorPermit(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetErrorPermit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetPmControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetPmControl(context, request, response); }));}
    void SetMessageAllocatorFor_SetPmControl(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(59);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(59);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPmControl(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPmControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPmControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmControlResponse* response) { return this->GetPmControl(context, request, response); }));}
    void SetMessageAllocatorFor_GetPmControl(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(60);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(60);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPmControl(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPmControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPmTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPmTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::PmTableResponse* response) { return this->GetPmTable(context, request, response); }));}
    void SetMessageAllocatorFor_GetPmTable(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(61);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(61);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPmTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPmTable(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPmTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSAOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetSAOn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetSAOn(context, request, response); }));}
    void SetMessageAllocatorFor_SetSAOn(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(62);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(62);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetSAOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSAOn(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSAOn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSAOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetSAOff() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bossopenolt::boss_request* request, ::bossopenolt::ExecResult* response) { return this->SetSAOff(context, request, response); }));}
    void SetMessageAllocatorFor_SetSAOff(
        ::grpc::experimental::MessageAllocator< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(63);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(63);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bossopenolt::boss_request, ::bossopenolt::ExecResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetSAOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOff(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSAOff(
      ::grpc::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSAOff(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetOltConnect<ExperimentalWithCallbackMethod_GetOltDeviceInfo<ExperimentalWithCallbackMethod_SetPmdTxDis<ExperimentalWithCallbackMethod_GetPmdTxdis<ExperimentalWithCallbackMethod_GetDevicePmdStatus<ExperimentalWithCallbackMethod_SetDevicePort<ExperimentalWithCallbackMethod_GetDevicePort<ExperimentalWithCallbackMethod_PortReset<ExperimentalWithCallbackMethod_SetMtuSize<ExperimentalWithCallbackMethod_GetMtuSize<ExperimentalWithCallbackMethod_SetVlan<ExperimentalWithCallbackMethod_GetVlan<ExperimentalWithCallbackMethod_SetLutMode<ExperimentalWithCallbackMethod_GetLutMode<ExperimentalWithCallbackMethod_SetAgingMode<ExperimentalWithCallbackMethod_GetAgingMode<ExperimentalWithCallbackMethod_SetAgingTime<ExperimentalWithCallbackMethod_GetAgingTime<ExperimentalWithCallbackMethod_GetDeviceMacInfo<ExperimentalWithCallbackMethod_SetSdnTable<ExperimentalWithCallbackMethod_GetSdnTable<ExperimentalWithCallbackMethod_SetLength<ExperimentalWithCallbackMethod_GetLength<ExperimentalWithCallbackMethod_SetQuietZone<ExperimentalWithCallbackMethod_GetQuietZone<ExperimentalWithCallbackMethod_SetFecMode<ExperimentalWithCallbackMethod_GetFecMode<ExperimentalWithCallbackMethod_AddOnu<ExperimentalWithCallbackMethod_DeleteOnu<ExperimentalWithCallbackMethod_AddOnuSla<ExperimentalWithCallbackMethod_ClearOnuSla<ExperimentalWithCallbackMethod_GetSlaTable<ExperimentalWithCallbackMethod_SetOnuAllocid<ExperimentalWithCallbackMethod_DelOnuAllocid<ExperimentalWithCallbackMethod_SetOnuVssn<ExperimentalWithCallbackMethod_GetOnuVssn<ExperimentalWithCallbackMethod_GetOnuDistance<ExperimentalWithCallbackMethod_SetBurstDelimiter<ExperimentalWithCallbackMethod_GetBurstDelimiter<ExperimentalWithCallbackMethod_SetBurstPreamble<ExperimentalWithCallbackMethod_GetBurstPreamble<ExperimentalWithCallbackMethod_SetBurstVersion<ExperimentalWithCallbackMethod_GetBurstVersion<ExperimentalWithCallbackMethod_SetBurstProfile<ExperimentalWithCallbackMethod_GetBurstProfile<ExperimentalWithCallbackMethod_GetRegisterStatus<ExperimentalWithCallbackMethod_GetOnuInfo<ExperimentalWithCallbackMethod_GetOmciStatus<ExperimentalWithCallbackMethod_SetDsOmciOnu<ExperimentalWithCallbackMethod_SetTod<ExperimentalWithCallbackMethod_GetTod<ExperimentalWithCallbackMethod_SetDataMode<ExperimentalWithCallbackMethod_GetDataMode<ExperimentalWithCallbackMethod_SetFecDecMode<ExperimentalWithCallbackMethod_GetFecDecMode<ExperimentalWithCallbackMethod_SetDelimiter<ExperimentalWithCallbackMethod_GetDelimiter<ExperimentalWithCallbackMethod_SetErrorPermit<ExperimentalWithCallbackMethod_GetErrorPermit<ExperimentalWithCallbackMethod_SetPmControl<ExperimentalWithCallbackMethod_GetPmControl<ExperimentalWithCallbackMethod_GetPmTable<ExperimentalWithCallbackMethod_SetSAOn<ExperimentalWithCallbackMethod_SetSAOff<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetOltConnect<ExperimentalWithCallbackMethod_GetOltDeviceInfo<ExperimentalWithCallbackMethod_SetPmdTxDis<ExperimentalWithCallbackMethod_GetPmdTxdis<ExperimentalWithCallbackMethod_GetDevicePmdStatus<ExperimentalWithCallbackMethod_SetDevicePort<ExperimentalWithCallbackMethod_GetDevicePort<ExperimentalWithCallbackMethod_PortReset<ExperimentalWithCallbackMethod_SetMtuSize<ExperimentalWithCallbackMethod_GetMtuSize<ExperimentalWithCallbackMethod_SetVlan<ExperimentalWithCallbackMethod_GetVlan<ExperimentalWithCallbackMethod_SetLutMode<ExperimentalWithCallbackMethod_GetLutMode<ExperimentalWithCallbackMethod_SetAgingMode<ExperimentalWithCallbackMethod_GetAgingMode<ExperimentalWithCallbackMethod_SetAgingTime<ExperimentalWithCallbackMethod_GetAgingTime<ExperimentalWithCallbackMethod_GetDeviceMacInfo<ExperimentalWithCallbackMethod_SetSdnTable<ExperimentalWithCallbackMethod_GetSdnTable<ExperimentalWithCallbackMethod_SetLength<ExperimentalWithCallbackMethod_GetLength<ExperimentalWithCallbackMethod_SetQuietZone<ExperimentalWithCallbackMethod_GetQuietZone<ExperimentalWithCallbackMethod_SetFecMode<ExperimentalWithCallbackMethod_GetFecMode<ExperimentalWithCallbackMethod_AddOnu<ExperimentalWithCallbackMethod_DeleteOnu<ExperimentalWithCallbackMethod_AddOnuSla<ExperimentalWithCallbackMethod_ClearOnuSla<ExperimentalWithCallbackMethod_GetSlaTable<ExperimentalWithCallbackMethod_SetOnuAllocid<ExperimentalWithCallbackMethod_DelOnuAllocid<ExperimentalWithCallbackMethod_SetOnuVssn<ExperimentalWithCallbackMethod_GetOnuVssn<ExperimentalWithCallbackMethod_GetOnuDistance<ExperimentalWithCallbackMethod_SetBurstDelimiter<ExperimentalWithCallbackMethod_GetBurstDelimiter<ExperimentalWithCallbackMethod_SetBurstPreamble<ExperimentalWithCallbackMethod_GetBurstPreamble<ExperimentalWithCallbackMethod_SetBurstVersion<ExperimentalWithCallbackMethod_GetBurstVersion<ExperimentalWithCallbackMethod_SetBurstProfile<ExperimentalWithCallbackMethod_GetBurstProfile<ExperimentalWithCallbackMethod_GetRegisterStatus<ExperimentalWithCallbackMethod_GetOnuInfo<ExperimentalWithCallbackMethod_GetOmciStatus<ExperimentalWithCallbackMethod_SetDsOmciOnu<ExperimentalWithCallbackMethod_SetTod<ExperimentalWithCallbackMethod_GetTod<ExperimentalWithCallbackMethod_SetDataMode<ExperimentalWithCallbackMethod_GetDataMode<ExperimentalWithCallbackMethod_SetFecDecMode<ExperimentalWithCallbackMethod_GetFecDecMode<ExperimentalWithCallbackMethod_SetDelimiter<ExperimentalWithCallbackMethod_GetDelimiter<ExperimentalWithCallbackMethod_SetErrorPermit<ExperimentalWithCallbackMethod_GetErrorPermit<ExperimentalWithCallbackMethod_SetPmControl<ExperimentalWithCallbackMethod_GetPmControl<ExperimentalWithCallbackMethod_GetPmTable<ExperimentalWithCallbackMethod_SetSAOn<ExperimentalWithCallbackMethod_SetSAOff<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetOltConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOltConnect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOltConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltConnect(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOltDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOltDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOltDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPmdTxDis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPmdTxDis() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetPmdTxDis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmdTxDis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPmdTxdis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPmdTxdis() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetPmdTxdis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmdTxdis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevicePmdStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevicePmdStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetDevicePmdStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDevicePort() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDevicePort() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PortReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PortReset() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PortReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PortReset(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMtuSize() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMtuSize() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetVlan() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVlan() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLutMode() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLutMode() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgingMode() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgingMode() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAgingTime() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_SetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgingTime() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceMacInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceMacInfo() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetDeviceMacInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSdnTable() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_SetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSdnTable() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLength() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_SetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLength() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetQuietZone() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_SetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQuietZone() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFecMode() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_SetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFecMode() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddOnu() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_AddOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOnu() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_DeleteOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddOnuSla() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_AddOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearOnuSla() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_ClearOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSlaTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSlaTable() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_GetSlaTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetOnuAllocid() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_SetOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelOnuAllocid() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_DelOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetOnuVssn() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_SetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOnuVssn() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_GetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOnuDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOnuDistance() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_GetOnuDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuDistance(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBurstDelimiter() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_SetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBurstDelimiter() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_GetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBurstPreamble() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_SetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBurstPreamble() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_GetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBurstVersion() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_SetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBurstVersion() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_GetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBurstProfile() {
      ::grpc::Service::MarkMethodGeneric(43);
    }
    ~WithGenericMethod_SetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBurstProfile() {
      ::grpc::Service::MarkMethodGeneric(44);
    }
    ~WithGenericMethod_GetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRegisterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRegisterStatus() {
      ::grpc::Service::MarkMethodGeneric(45);
    }
    ~WithGenericMethod_GetRegisterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOnuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOnuInfo() {
      ::grpc::Service::MarkMethodGeneric(46);
    }
    ~WithGenericMethod_GetOnuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOmciStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOmciStatus() {
      ::grpc::Service::MarkMethodGeneric(47);
    }
    ~WithGenericMethod_GetOmciStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOmciStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDsOmciOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDsOmciOnu() {
      ::grpc::Service::MarkMethodGeneric(48);
    }
    ~WithGenericMethod_SetDsOmciOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTod() {
      ::grpc::Service::MarkMethodGeneric(49);
    }
    ~WithGenericMethod_SetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTod() {
      ::grpc::Service::MarkMethodGeneric(50);
    }
    ~WithGenericMethod_GetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDataMode() {
      ::grpc::Service::MarkMethodGeneric(51);
    }
    ~WithGenericMethod_SetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDataMode() {
      ::grpc::Service::MarkMethodGeneric(52);
    }
    ~WithGenericMethod_GetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFecDecMode() {
      ::grpc::Service::MarkMethodGeneric(53);
    }
    ~WithGenericMethod_SetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFecDecMode() {
      ::grpc::Service::MarkMethodGeneric(54);
    }
    ~WithGenericMethod_GetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDelimiter() {
      ::grpc::Service::MarkMethodGeneric(55);
    }
    ~WithGenericMethod_SetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDelimiter() {
      ::grpc::Service::MarkMethodGeneric(56);
    }
    ~WithGenericMethod_GetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetErrorPermit() {
      ::grpc::Service::MarkMethodGeneric(57);
    }
    ~WithGenericMethod_SetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetErrorPermit() {
      ::grpc::Service::MarkMethodGeneric(58);
    }
    ~WithGenericMethod_GetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPmControl() {
      ::grpc::Service::MarkMethodGeneric(59);
    }
    ~WithGenericMethod_SetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPmControl() {
      ::grpc::Service::MarkMethodGeneric(60);
    }
    ~WithGenericMethod_GetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPmTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPmTable() {
      ::grpc::Service::MarkMethodGeneric(61);
    }
    ~WithGenericMethod_GetPmTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSAOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSAOn() {
      ::grpc::Service::MarkMethodGeneric(62);
    }
    ~WithGenericMethod_SetSAOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSAOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSAOff() {
      ::grpc::Service::MarkMethodGeneric(63);
    }
    ~WithGenericMethod_SetSAOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOff(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOltConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOltConnect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetOltConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltConnect(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOltConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOltDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOltDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOltDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOltDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPmdTxDis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPmdTxDis() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetPmdTxDis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmdTxDis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPmdTxDis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPmdTxdis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPmdTxdis() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetPmdTxdis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmdTxdis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPmdTxdis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevicePmdStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevicePmdStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetDevicePmdStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevicePmdStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDevicePort() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDevicePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDevicePort() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDevicePort(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PortReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PortReset() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_PortReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PortReset(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPortReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMtuSize() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMtuSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMtuSize() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMtuSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetVlan() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVlan() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLutMode() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLutMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLutMode() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLutMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgingMode() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgingMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgingMode() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgingMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAgingTime() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_SetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAgingTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgingTime() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgingTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceMacInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceMacInfo() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetDeviceMacInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceMacInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSdnTable() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_SetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSdnTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSdnTable() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSdnTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLength() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_SetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLength(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLength() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLength(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetQuietZone() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_SetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetQuietZone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQuietZone() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQuietZone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFecMode() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_SetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFecMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFecMode() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFecMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddOnu() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_AddOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOnu(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOnu() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_DeleteOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOnu(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddOnuSla() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_AddOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddOnuSla(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearOnuSla() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_ClearOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearOnuSla(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSlaTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSlaTable() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_GetSlaTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlaTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetOnuAllocid() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_SetOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOnuAllocid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelOnuAllocid() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_DelOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelOnuAllocid(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetOnuVssn() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_SetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetOnuVssn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOnuVssn() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_GetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnuVssn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOnuDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOnuDistance() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_GetOnuDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuDistance(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnuDistance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBurstDelimiter() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_SetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstDelimiter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBurstDelimiter() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_GetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstDelimiter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBurstPreamble() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_SetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstPreamble(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBurstPreamble() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_GetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstPreamble(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBurstVersion() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_SetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBurstVersion() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_GetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBurstProfile() {
      ::grpc::Service::MarkMethodRaw(43);
    }
    ~WithRawMethod_SetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBurstProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(43, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBurstProfile() {
      ::grpc::Service::MarkMethodRaw(44);
    }
    ~WithRawMethod_GetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBurstProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(44, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRegisterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRegisterStatus() {
      ::grpc::Service::MarkMethodRaw(45);
    }
    ~WithRawMethod_GetRegisterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRegisterStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(45, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOnuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOnuInfo() {
      ::grpc::Service::MarkMethodRaw(46);
    }
    ~WithRawMethod_GetOnuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOnuInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(46, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOmciStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOmciStatus() {
      ::grpc::Service::MarkMethodRaw(47);
    }
    ~WithRawMethod_GetOmciStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOmciStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOmciStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(47, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDsOmciOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDsOmciOnu() {
      ::grpc::Service::MarkMethodRaw(48);
    }
    ~WithRawMethod_SetDsOmciOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDsOmciOnu(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(48, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTod() {
      ::grpc::Service::MarkMethodRaw(49);
    }
    ~WithRawMethod_SetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(49, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTod() {
      ::grpc::Service::MarkMethodRaw(50);
    }
    ~WithRawMethod_GetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(50, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDataMode() {
      ::grpc::Service::MarkMethodRaw(51);
    }
    ~WithRawMethod_SetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDataMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(51, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDataMode() {
      ::grpc::Service::MarkMethodRaw(52);
    }
    ~WithRawMethod_GetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDataMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(52, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFecDecMode() {
      ::grpc::Service::MarkMethodRaw(53);
    }
    ~WithRawMethod_SetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFecDecMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(53, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFecDecMode() {
      ::grpc::Service::MarkMethodRaw(54);
    }
    ~WithRawMethod_GetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFecDecMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(54, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDelimiter() {
      ::grpc::Service::MarkMethodRaw(55);
    }
    ~WithRawMethod_SetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDelimiter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(55, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDelimiter() {
      ::grpc::Service::MarkMethodRaw(56);
    }
    ~WithRawMethod_GetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDelimiter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(56, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetErrorPermit() {
      ::grpc::Service::MarkMethodRaw(57);
    }
    ~WithRawMethod_SetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetErrorPermit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(57, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetErrorPermit() {
      ::grpc::Service::MarkMethodRaw(58);
    }
    ~WithRawMethod_GetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetErrorPermit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(58, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPmControl() {
      ::grpc::Service::MarkMethodRaw(59);
    }
    ~WithRawMethod_SetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPmControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(59, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPmControl() {
      ::grpc::Service::MarkMethodRaw(60);
    }
    ~WithRawMethod_GetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPmControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(60, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPmTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPmTable() {
      ::grpc::Service::MarkMethodRaw(61);
    }
    ~WithRawMethod_GetPmTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPmTable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(61, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSAOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSAOn() {
      ::grpc::Service::MarkMethodRaw(62);
    }
    ~WithRawMethod_SetSAOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSAOn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(62, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSAOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSAOff() {
      ::grpc::Service::MarkMethodRaw(63);
    }
    ~WithRawMethod_SetSAOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOff(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSAOff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(63, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOltConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOltConnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOltConnect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOltConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltConnect(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOltConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOltConnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOltDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOltDeviceInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOltDeviceInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOltDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOltDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOltDeviceInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPmdTxDis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPmdTxDis() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPmdTxDis(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPmdTxDis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmdTxDis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPmdTxDis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPmdTxDis(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPmdTxdis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPmdTxdis() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPmdTxdis(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPmdTxdis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmdTxdis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPmdTxdis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPmdTxdis(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDevicePmdStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDevicePmdStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevicePmdStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDevicePmdStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDevicePmdStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDevicePmdStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDevicePort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDevicePort(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDevicePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDevicePort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDevicePort() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDevicePort(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDevicePort(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDevicePort(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PortReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PortReset() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PortReset(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PortReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PortReset(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PortReset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PortReset(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetMtuSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMtuSize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetMtuSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetMtuSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMtuSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMtuSize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMtuSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMtuSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetVlan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetVlan(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetVlan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVlan() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVlan(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVlan(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetLutMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLutMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetLutMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetLutMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLutMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLutMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLutMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLutMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAgingMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgingMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAgingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAgingMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAgingMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgingMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAgingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAgingMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAgingTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAgingTime(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAgingTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAgingTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAgingTime() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgingTime(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAgingTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAgingTime(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDeviceMacInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDeviceMacInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceMacInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDeviceMacInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeviceMacInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeviceMacInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSdnTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSdnTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSdnTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSdnTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSdnTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSdnTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSdnTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSdnTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetLength() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLength(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetLength(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetLength(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLength() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLength(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLength(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLength(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetQuietZone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetQuietZone(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetQuietZone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetQuietZone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetQuietZone() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQuietZone(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetQuietZone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetQuietZone(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetFecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFecMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetFecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetFecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFecMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddOnu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddOnu(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddOnu(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddOnu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteOnu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOnu(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOnu(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOnu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddOnuSla() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddOnuSla(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddOnuSla(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddOnuSla(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearOnuSla() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearOnuSla(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearOnuSla(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearOnuSla(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSlaTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSlaTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSlaTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSlaTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSlaTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSlaTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetOnuAllocid() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetOnuAllocid(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetOnuAllocid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetOnuAllocid(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DelOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DelOnuAllocid() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelOnuAllocid(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DelOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DelOnuAllocid(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DelOnuAllocid(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetOnuVssn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetOnuVssn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetOnuVssn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetOnuVssn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOnuVssn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOnuVssn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOnuVssn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOnuVssn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOnuDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOnuDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOnuDistance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOnuDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuDistance(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOnuDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOnuDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetBurstDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBurstDelimiter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBurstDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBurstDelimiter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetBurstPreamble() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBurstPreamble(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstPreamble(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstPreamble(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBurstPreamble() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBurstPreamble(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstPreamble(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstPreamble(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetBurstVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBurstVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBurstVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBurstVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetBurstProfile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(43,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBurstProfile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBurstProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBurstProfile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBurstProfile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(44,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBurstProfile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBurstProfile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBurstProfile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRegisterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRegisterStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(45,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRegisterStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRegisterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRegisterStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRegisterStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRegisterStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOnuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOnuInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(46,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOnuInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOnuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOnuInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOnuInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOnuInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOmciStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOmciStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(47,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOmciStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOmciStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOmciStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOmciStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOmciStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDsOmciOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDsOmciOnu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(48,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDsOmciOnu(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDsOmciOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDsOmciOnu(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDsOmciOnu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetTod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(49,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTod(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetTod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetTod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTod() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(50,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTod(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTod(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDataMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(51,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDataMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDataMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDataMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDataMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(52,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDataMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDataMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDataMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetFecDecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(53,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFecDecMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetFecDecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetFecDecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFecDecMode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(54,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFecDecMode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetFecDecMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetFecDecMode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(55,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetDelimiter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDelimiter() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(56,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDelimiter(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDelimiter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDelimiter(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetErrorPermit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(57,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetErrorPermit(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetErrorPermit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetErrorPermit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetErrorPermit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(58,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetErrorPermit(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetErrorPermit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetErrorPermit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetPmControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(59,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPmControl(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetPmControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetPmControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPmControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(60,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPmControl(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPmControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPmControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPmTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPmTable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(61,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPmTable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPmTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPmTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPmTable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPmTable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSAOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSAOn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(62,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSAOn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSAOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSAOn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSAOn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSAOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSAOff() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(63,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSAOff(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSAOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSAOff(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSAOff(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSAOff(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOltConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOltConnect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::OltConnResponse>* streamer) {
                       return this->StreamedGetOltConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOltConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOltConnect(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltConnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOltConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::OltConnResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOltDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOltDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::OltDevResponse>* streamer) {
                       return this->StreamedGetOltDeviceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOltDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOltDeviceInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OltDevResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOltDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::OltDevResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPmdTxDis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPmdTxDis() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetPmdTxDis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPmdTxDis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPmdTxDis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPmdTxDis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPmdTxdis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPmdTxdis() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::PmdTxdisResponse>* streamer) {
                       return this->StreamedGetPmdTxdis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPmdTxdis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPmdTxdis(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdTxdisResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPmdTxdis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::PmdTxdisResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevicePmdStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevicePmdStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::PmdStatusResponse>* streamer) {
                       return this->StreamedGetDevicePmdStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevicePmdStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevicePmdStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmdStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevicePmdStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::PmdStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDevicePort() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetDevicePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDevicePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDevicePort : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDevicePort() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::GetPortResponse>* streamer) {
                       return this->StreamedGetDevicePort(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDevicePort() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDevicePort(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetPortResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDevicePort(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::GetPortResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PortReset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PortReset() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedPortReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PortReset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PortReset(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPortReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMtuSize() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetMtuSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMtuSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMtuSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMtuSize() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::MtuSizeResponse>* streamer) {
                       return this->StreamedGetMtuSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMtuSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMtuSize(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::MtuSizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMtuSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::MtuSizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetVlan() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetVlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetVlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVlan() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::GetVlanResponse>* streamer) {
                       return this->StreamedGetVlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVlan(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::GetVlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::GetVlanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLutMode() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetLutMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLutMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLutMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLutMode() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* streamer) {
                       return this->StreamedGetLutMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLutMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLutMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLutMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgingMode() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetAgingMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgingMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgingMode() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* streamer) {
                       return this->StreamedGetAgingMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgingMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgingMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAgingTime() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetAgingTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAgingTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgingTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgingTime() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::AgingTimeResponse>* streamer) {
                       return this->StreamedGetAgingTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgingTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgingTime(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AgingTimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgingTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::AgingTimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceMacInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceMacInfo() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::DevMacInfoResponse>* streamer) {
                       return this->StreamedGetDeviceMacInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceMacInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceMacInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::DevMacInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceMacInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::DevMacInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSdnTable() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::SdnTableKeyResponse>* streamer) {
                       return this->StreamedSetSdnTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSdnTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::SdnTableKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSdnTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSdnTable() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::SdnTableResponse>* streamer) {
                       return this->StreamedGetSdnTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSdnTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSdnTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SdnTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSdnTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::SdnTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLength() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetLength(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLength(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLength : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLength() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::LengthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::LengthResponse>* streamer) {
                       return this->StreamedGetLength(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLength() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLength(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::LengthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLength(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::LengthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetQuietZone() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetQuietZone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetQuietZone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQuietZone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQuietZone() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::QuietZoneResponse>* streamer) {
                       return this->StreamedGetQuietZone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQuietZone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQuietZone(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::QuietZoneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQuietZone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::QuietZoneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFecMode() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetFecMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFecMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFecMode() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* streamer) {
                       return this->StreamedGetFecMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFecMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddOnu() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::AddOnuResponse>* streamer) {
                       return this->StreamedAddOnu(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::AddOnuResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddOnu(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::AddOnuResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOnu() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedDeleteOnu(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOnu(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddOnuSla() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedAddOnuSla(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddOnuSla(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearOnuSla : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearOnuSla() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedClearOnuSla(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearOnuSla() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearOnuSla(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearOnuSla(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSlaTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSlaTable() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::SlaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::SlaResponse>* streamer) {
                       return this->StreamedGetSlaTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSlaTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSlaTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::SlaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSlaTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::SlaResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetOnuAllocid() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetOnuAllocid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetOnuAllocid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelOnuAllocid : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelOnuAllocid() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedDelOnuAllocid(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelOnuAllocid() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelOnuAllocid(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelOnuAllocid(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetOnuVssn() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetOnuVssn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetOnuVssn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOnuVssn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOnuVssn() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::OnuVssnResponse>* streamer) {
                       return this->StreamedGetOnuVssn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOnuVssn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOnuVssn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuVssnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOnuVssn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::OnuVssnResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOnuDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOnuDistance() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::OnuDistResponse>* streamer) {
                       return this->StreamedGetOnuDistance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOnuDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOnuDistance(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuDistResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOnuDistance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::OnuDistResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBurstDelimiter() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetBurstDelimiter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBurstDelimiter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBurstDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBurstDelimiter() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::BurstDelimitResponse>* streamer) {
                       return this->StreamedGetBurstDelimiter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBurstDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBurstDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstDelimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBurstDelimiter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::BurstDelimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBurstPreamble() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetBurstPreamble(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBurstPreamble(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBurstPreamble : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBurstPreamble() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::BurstPreambleResponse>* streamer) {
                       return this->StreamedGetBurstPreamble(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBurstPreamble() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBurstPreamble(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstPreambleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBurstPreamble(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::BurstPreambleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBurstVersion() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetBurstVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBurstVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBurstVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBurstVersion() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::BurstVersionResponse>* streamer) {
                       return this->StreamedGetBurstVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBurstVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBurstVersion(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBurstVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::BurstVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBurstProfile() {
      ::grpc::Service::MarkMethodStreamed(43,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetBurstProfile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBurstProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBurstProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBurstProfile() {
      ::grpc::Service::MarkMethodStreamed(44,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::BurstProfileResponse>* streamer) {
                       return this->StreamedGetBurstProfile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBurstProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBurstProfile(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::BurstProfileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBurstProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::BurstProfileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRegisterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRegisterStatus() {
      ::grpc::Service::MarkMethodStreamed(45,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::RegisterStatusResponse>* streamer) {
                       return this->StreamedGetRegisterStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRegisterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRegisterStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::RegisterStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRegisterStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::RegisterStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOnuInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOnuInfo() {
      ::grpc::Service::MarkMethodStreamed(46,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::OnuInfoResponse>* streamer) {
                       return this->StreamedGetOnuInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOnuInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOnuInfo(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::OnuInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOnuInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::OnuInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOmciStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOmciStatus() {
      ::grpc::Service::MarkMethodStreamed(47,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::StatusResponse>* streamer) {
                       return this->StreamedGetOmciStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOmciStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOmciStatus(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOmciStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDsOmciOnu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDsOmciOnu() {
      ::grpc::Service::MarkMethodStreamed(48,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetDsOmciOnu(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDsOmciOnu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDsOmciOnu(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDsOmciOnu(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTod() {
      ::grpc::Service::MarkMethodStreamed(49,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetTod(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTod() {
      ::grpc::Service::MarkMethodStreamed(50,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::TodResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::TodResponse>* streamer) {
                       return this->StreamedGetTod(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTod(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::TodResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::TodResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDataMode() {
      ::grpc::Service::MarkMethodStreamed(51,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetDataMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDataMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDataMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDataMode() {
      ::grpc::Service::MarkMethodStreamed(52,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* streamer) {
                       return this->StreamedGetDataMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDataMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDataMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDataMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFecDecMode() {
      ::grpc::Service::MarkMethodStreamed(53,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetFecDecMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFecDecMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFecDecMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFecDecMode() {
      ::grpc::Service::MarkMethodStreamed(54,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ModeResponse>* streamer) {
                       return this->StreamedGetFecDecMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFecDecMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFecDecMode(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFecDecMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDelimiter() {
      ::grpc::Service::MarkMethodStreamed(55,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetDelimiter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDelimiter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDelimiter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDelimiter() {
      ::grpc::Service::MarkMethodStreamed(56,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::FecDecResponse>* streamer) {
                       return this->StreamedGetDelimiter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDelimiter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDelimiter(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::FecDecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDelimiter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::FecDecResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetErrorPermit() {
      ::grpc::Service::MarkMethodStreamed(57,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetErrorPermit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetErrorPermit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetErrorPermit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetErrorPermit() {
      ::grpc::Service::MarkMethodStreamed(58,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ErrorPermitResponse>* streamer) {
                       return this->StreamedGetErrorPermit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetErrorPermit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetErrorPermit(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ErrorPermitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetErrorPermit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ErrorPermitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPmControl() {
      ::grpc::Service::MarkMethodStreamed(59,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetPmControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPmControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPmControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPmControl() {
      ::grpc::Service::MarkMethodStreamed(60,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::PmControlResponse>* streamer) {
                       return this->StreamedGetPmControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPmControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPmControl(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPmControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::PmControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPmTable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPmTable() {
      ::grpc::Service::MarkMethodStreamed(61,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::PmTableResponse>* streamer) {
                       return this->StreamedGetPmTable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPmTable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPmTable(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::PmTableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPmTable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::PmTableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSAOn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSAOn() {
      ::grpc::Service::MarkMethodStreamed(62,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetSAOn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSAOn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSAOn(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSAOn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSAOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSAOff() {
      ::grpc::Service::MarkMethodStreamed(63,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bossopenolt::boss_request, ::bossopenolt::ExecResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bossopenolt::boss_request, ::bossopenolt::ExecResult>* streamer) {
                       return this->StreamedSetSAOff(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSAOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSAOff(::grpc::ServerContext* /*context*/, const ::bossopenolt::boss_request* /*request*/, ::bossopenolt::ExecResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSAOff(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bossopenolt::boss_request,::bossopenolt::ExecResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOltConnect<WithStreamedUnaryMethod_GetOltDeviceInfo<WithStreamedUnaryMethod_SetPmdTxDis<WithStreamedUnaryMethod_GetPmdTxdis<WithStreamedUnaryMethod_GetDevicePmdStatus<WithStreamedUnaryMethod_SetDevicePort<WithStreamedUnaryMethod_GetDevicePort<WithStreamedUnaryMethod_PortReset<WithStreamedUnaryMethod_SetMtuSize<WithStreamedUnaryMethod_GetMtuSize<WithStreamedUnaryMethod_SetVlan<WithStreamedUnaryMethod_GetVlan<WithStreamedUnaryMethod_SetLutMode<WithStreamedUnaryMethod_GetLutMode<WithStreamedUnaryMethod_SetAgingMode<WithStreamedUnaryMethod_GetAgingMode<WithStreamedUnaryMethod_SetAgingTime<WithStreamedUnaryMethod_GetAgingTime<WithStreamedUnaryMethod_GetDeviceMacInfo<WithStreamedUnaryMethod_SetSdnTable<WithStreamedUnaryMethod_GetSdnTable<WithStreamedUnaryMethod_SetLength<WithStreamedUnaryMethod_GetLength<WithStreamedUnaryMethod_SetQuietZone<WithStreamedUnaryMethod_GetQuietZone<WithStreamedUnaryMethod_SetFecMode<WithStreamedUnaryMethod_GetFecMode<WithStreamedUnaryMethod_AddOnu<WithStreamedUnaryMethod_DeleteOnu<WithStreamedUnaryMethod_AddOnuSla<WithStreamedUnaryMethod_ClearOnuSla<WithStreamedUnaryMethod_GetSlaTable<WithStreamedUnaryMethod_SetOnuAllocid<WithStreamedUnaryMethod_DelOnuAllocid<WithStreamedUnaryMethod_SetOnuVssn<WithStreamedUnaryMethod_GetOnuVssn<WithStreamedUnaryMethod_GetOnuDistance<WithStreamedUnaryMethod_SetBurstDelimiter<WithStreamedUnaryMethod_GetBurstDelimiter<WithStreamedUnaryMethod_SetBurstPreamble<WithStreamedUnaryMethod_GetBurstPreamble<WithStreamedUnaryMethod_SetBurstVersion<WithStreamedUnaryMethod_GetBurstVersion<WithStreamedUnaryMethod_SetBurstProfile<WithStreamedUnaryMethod_GetBurstProfile<WithStreamedUnaryMethod_GetRegisterStatus<WithStreamedUnaryMethod_GetOnuInfo<WithStreamedUnaryMethod_GetOmciStatus<WithStreamedUnaryMethod_SetDsOmciOnu<WithStreamedUnaryMethod_SetTod<WithStreamedUnaryMethod_GetTod<WithStreamedUnaryMethod_SetDataMode<WithStreamedUnaryMethod_GetDataMode<WithStreamedUnaryMethod_SetFecDecMode<WithStreamedUnaryMethod_GetFecDecMode<WithStreamedUnaryMethod_SetDelimiter<WithStreamedUnaryMethod_GetDelimiter<WithStreamedUnaryMethod_SetErrorPermit<WithStreamedUnaryMethod_GetErrorPermit<WithStreamedUnaryMethod_SetPmControl<WithStreamedUnaryMethod_GetPmControl<WithStreamedUnaryMethod_GetPmTable<WithStreamedUnaryMethod_SetSAOn<WithStreamedUnaryMethod_SetSAOff<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOltConnect<WithStreamedUnaryMethod_GetOltDeviceInfo<WithStreamedUnaryMethod_SetPmdTxDis<WithStreamedUnaryMethod_GetPmdTxdis<WithStreamedUnaryMethod_GetDevicePmdStatus<WithStreamedUnaryMethod_SetDevicePort<WithStreamedUnaryMethod_GetDevicePort<WithStreamedUnaryMethod_PortReset<WithStreamedUnaryMethod_SetMtuSize<WithStreamedUnaryMethod_GetMtuSize<WithStreamedUnaryMethod_SetVlan<WithStreamedUnaryMethod_GetVlan<WithStreamedUnaryMethod_SetLutMode<WithStreamedUnaryMethod_GetLutMode<WithStreamedUnaryMethod_SetAgingMode<WithStreamedUnaryMethod_GetAgingMode<WithStreamedUnaryMethod_SetAgingTime<WithStreamedUnaryMethod_GetAgingTime<WithStreamedUnaryMethod_GetDeviceMacInfo<WithStreamedUnaryMethod_SetSdnTable<WithStreamedUnaryMethod_GetSdnTable<WithStreamedUnaryMethod_SetLength<WithStreamedUnaryMethod_GetLength<WithStreamedUnaryMethod_SetQuietZone<WithStreamedUnaryMethod_GetQuietZone<WithStreamedUnaryMethod_SetFecMode<WithStreamedUnaryMethod_GetFecMode<WithStreamedUnaryMethod_AddOnu<WithStreamedUnaryMethod_DeleteOnu<WithStreamedUnaryMethod_AddOnuSla<WithStreamedUnaryMethod_ClearOnuSla<WithStreamedUnaryMethod_GetSlaTable<WithStreamedUnaryMethod_SetOnuAllocid<WithStreamedUnaryMethod_DelOnuAllocid<WithStreamedUnaryMethod_SetOnuVssn<WithStreamedUnaryMethod_GetOnuVssn<WithStreamedUnaryMethod_GetOnuDistance<WithStreamedUnaryMethod_SetBurstDelimiter<WithStreamedUnaryMethod_GetBurstDelimiter<WithStreamedUnaryMethod_SetBurstPreamble<WithStreamedUnaryMethod_GetBurstPreamble<WithStreamedUnaryMethod_SetBurstVersion<WithStreamedUnaryMethod_GetBurstVersion<WithStreamedUnaryMethod_SetBurstProfile<WithStreamedUnaryMethod_GetBurstProfile<WithStreamedUnaryMethod_GetRegisterStatus<WithStreamedUnaryMethod_GetOnuInfo<WithStreamedUnaryMethod_GetOmciStatus<WithStreamedUnaryMethod_SetDsOmciOnu<WithStreamedUnaryMethod_SetTod<WithStreamedUnaryMethod_GetTod<WithStreamedUnaryMethod_SetDataMode<WithStreamedUnaryMethod_GetDataMode<WithStreamedUnaryMethod_SetFecDecMode<WithStreamedUnaryMethod_GetFecDecMode<WithStreamedUnaryMethod_SetDelimiter<WithStreamedUnaryMethod_GetDelimiter<WithStreamedUnaryMethod_SetErrorPermit<WithStreamedUnaryMethod_GetErrorPermit<WithStreamedUnaryMethod_SetPmControl<WithStreamedUnaryMethod_GetPmControl<WithStreamedUnaryMethod_GetPmTable<WithStreamedUnaryMethod_SetSAOn<WithStreamedUnaryMethod_SetSAOff<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace bossopenolt


#endif  // GRPC_bossopenolt_2eproto__INCLUDED
