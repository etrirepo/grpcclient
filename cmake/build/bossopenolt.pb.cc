// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bossopenolt.proto

#include "bossopenolt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace bossopenolt {
constexpr boss_request::boss_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , param_(nullptr){}
struct boss_requestDefaultTypeInternal {
  constexpr boss_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~boss_requestDefaultTypeInternal() {}
  union {
    boss_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT boss_requestDefaultTypeInternal _boss_request_default_instance_;
constexpr paramFields::paramFields(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct paramFieldsDefaultTypeInternal {
  constexpr paramFieldsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~paramFieldsDefaultTypeInternal() {}
  union {
    paramFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT paramFieldsDefaultTypeInternal _paramFields_default_instance_;
constexpr SetPmControl::SetPmControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : onu_id_(0)
  , mode_(0)
  , power_time_(0)
  , aware_time_(0){}
struct SetPmControlDefaultTypeInternal {
  constexpr SetPmControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPmControlDefaultTypeInternal() {}
  union {
    SetPmControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPmControlDefaultTypeInternal _SetPmControl_default_instance_;
constexpr SetTod::SetTod(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
  , time_(0){}
struct SetTodDefaultTypeInternal {
  constexpr SetTodDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetTodDefaultTypeInternal() {}
  union {
    SetTod _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetTodDefaultTypeInternal _SetTod_default_instance_;
constexpr SetDsOmciData::SetDsOmciData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_(0){}
struct SetDsOmciDataDefaultTypeInternal {
  constexpr SetDsOmciDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDsOmciDataDefaultTypeInternal() {}
  union {
    SetDsOmciData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDsOmciDataDefaultTypeInternal _SetDsOmciData_default_instance_;
constexpr SetBurstVersion::SetBurstVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pontag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0){}
struct SetBurstVersionDefaultTypeInternal {
  constexpr SetBurstVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBurstVersionDefaultTypeInternal() {}
  union {
    SetBurstVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBurstVersionDefaultTypeInternal _SetBurstVersion_default_instance_;
constexpr SetBurstPreamble::SetBurstPreamble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repeat_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetBurstPreambleDefaultTypeInternal {
  constexpr SetBurstPreambleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBurstPreambleDefaultTypeInternal() {}
  union {
    SetBurstPreamble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBurstPreambleDefaultTypeInternal _SetBurstPreamble_default_instance_;
constexpr SetBurstDelimit::SetBurstDelimit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delimiter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , length_(0){}
struct SetBurstDelimitDefaultTypeInternal {
  constexpr SetBurstDelimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetBurstDelimitDefaultTypeInternal() {}
  union {
    SetBurstDelimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetBurstDelimitDefaultTypeInternal _SetBurstDelimit_default_instance_;
constexpr SetOnuVssn::SetOnuVssn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vssn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0){}
struct SetOnuVssnDefaultTypeInternal {
  constexpr SetOnuVssnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetOnuVssnDefaultTypeInternal() {}
  union {
    SetOnuVssn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetOnuVssnDefaultTypeInternal _SetOnuVssn_default_instance_;
constexpr SetOnuAllocid::SetOnuAllocid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : alloc_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0){}
struct SetOnuAllocidDefaultTypeInternal {
  constexpr SetOnuAllocidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetOnuAllocidDefaultTypeInternal() {}
  union {
    SetOnuAllocid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetOnuAllocidDefaultTypeInternal _SetOnuAllocid_default_instance_;
constexpr ClearOnuSla::ClearOnuSla(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : onu_id_(0)
  , tcont_(0){}
struct ClearOnuSlaDefaultTypeInternal {
  constexpr ClearOnuSlaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearOnuSlaDefaultTypeInternal() {}
  union {
    ClearOnuSla _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearOnuSlaDefaultTypeInternal _ClearOnuSla_default_instance_;
constexpr AddOnuSla::AddOnuSla(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : onu_id_(0)
  , tcont_(0)
  , type_(0)
  , si_(0)
  , abmin_(0)
  , absur_(0){}
struct AddOnuSlaDefaultTypeInternal {
  constexpr AddOnuSlaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddOnuSlaDefaultTypeInternal() {}
  union {
    AddOnuSla _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddOnuSlaDefaultTypeInternal _AddOnuSla_default_instance_;
constexpr SetPmdTxdis::SetPmdTxdis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_type_(0)
  , mode_(0)
  , port_no_(0){}
struct SetPmdTxdisDefaultTypeInternal {
  constexpr SetPmdTxdisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPmdTxdisDefaultTypeInternal() {}
  union {
    SetPmdTxdis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPmdTxdisDefaultTypeInternal _SetPmdTxdis_default_instance_;
constexpr GetPmdsKind::GetPmdsKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_type_(0)
  , port_no_(0){}
struct GetPmdsKindDefaultTypeInternal {
  constexpr GetPmdsKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPmdsKindDefaultTypeInternal() {}
  union {
    GetPmdsKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPmdsKindDefaultTypeInternal _GetPmdsKind_default_instance_;
constexpr SetPort::SetPort(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
  , port_no_(0){}
struct SetPortDefaultTypeInternal {
  constexpr SetPortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPortDefaultTypeInternal() {}
  union {
    SetPort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPortDefaultTypeInternal _SetPort_default_instance_;
constexpr SetPortKind::SetPortKind(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_no_(0){}
struct SetPortKindDefaultTypeInternal {
  constexpr SetPortKindDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetPortKindDefaultTypeInternal() {}
  union {
    SetPortKind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetPortKindDefaultTypeInternal _SetPortKind_default_instance_;
constexpr SetMtuSize::SetMtuSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mtu_size_(0){}
struct SetMtuSizeDefaultTypeInternal {
  constexpr SetMtuSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMtuSizeDefaultTypeInternal() {}
  union {
    SetMtuSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMtuSizeDefaultTypeInternal _SetMtuSize_default_instance_;
constexpr SetVlan::SetVlan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(0)
  , vid_(0)
  , pbit_(0){}
struct SetVlanDefaultTypeInternal {
  constexpr SetVlanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetVlanDefaultTypeInternal() {}
  union {
    SetVlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetVlanDefaultTypeInternal _SetVlan_default_instance_;
constexpr SetSdnTable::SetSdnTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : port_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vid_(0)
  , pbit_(0){}
struct SetSdnTableDefaultTypeInternal {
  constexpr SetSdnTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetSdnTableDefaultTypeInternal() {}
  union {
    SetSdnTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetSdnTableDefaultTypeInternal _SetSdnTable_default_instance_;
constexpr SetDirectionMode::SetDirectionMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : direction_(0)
  , mode_(0){}
struct SetDirectionModeDefaultTypeInternal {
  constexpr SetDirectionModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDirectionModeDefaultTypeInternal() {}
  union {
    SetDirectionMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDirectionModeDefaultTypeInternal _SetDirectionMode_default_instance_;
constexpr GetDirectionValue::GetDirectionValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : direction_(0){}
struct GetDirectionValueDefaultTypeInternal {
  constexpr GetDirectionValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDirectionValueDefaultTypeInternal() {}
  union {
    GetDirectionValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDirectionValueDefaultTypeInternal _GetDirectionValue_default_instance_;
constexpr GetSdnTable::GetSdnTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSdnTableDefaultTypeInternal {
  constexpr GetSdnTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSdnTableDefaultTypeInternal() {}
  union {
    GetSdnTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSdnTableDefaultTypeInternal _GetSdnTable_default_instance_;
constexpr IntegerValue::IntegerValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct IntegerValueDefaultTypeInternal {
  constexpr IntegerValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntegerValueDefaultTypeInternal() {}
  union {
    IntegerValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntegerValueDefaultTypeInternal _IntegerValue_default_instance_;
constexpr StringValue::StringValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringValueDefaultTypeInternal {
  constexpr StringValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringValueDefaultTypeInternal() {}
  union {
    StringValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringValueDefaultTypeInternal _StringValue_default_instance_;
constexpr SetLength::SetLength(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_(0)
  , value_(0){}
struct SetLengthDefaultTypeInternal {
  constexpr SetLengthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetLengthDefaultTypeInternal() {}
  union {
    SetLength _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetLengthDefaultTypeInternal _SetLength_default_instance_;
constexpr GetLength::GetLength(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operation_(0){}
struct GetLengthDefaultTypeInternal {
  constexpr GetLengthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLengthDefaultTypeInternal() {}
  union {
    GetLength _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLengthDefaultTypeInternal _GetLength_default_instance_;
constexpr OnuCtrl::OnuCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : onu_id_(0){}
struct OnuCtrlDefaultTypeInternal {
  constexpr OnuCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnuCtrlDefaultTypeInternal() {}
  union {
    OnuCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnuCtrlDefaultTypeInternal _OnuCtrl_default_instance_;
constexpr OltConnResponse::OltConnResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OltConnResponseDefaultTypeInternal {
  constexpr OltConnResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OltConnResponseDefaultTypeInternal() {}
  union {
    OltConnResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OltConnResponseDefaultTypeInternal _OltConnResponse_default_instance_;
constexpr OltDevResponse::OltDevResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fpga_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fpga_ver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fpga_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sw_ver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sw_date_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct OltDevResponseDefaultTypeInternal {
  constexpr OltDevResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OltDevResponseDefaultTypeInternal() {}
  union {
    OltDevResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OltDevResponseDefaultTypeInternal _OltDevResponse_default_instance_;
constexpr ExecResult::ExecResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0){}
struct ExecResultDefaultTypeInternal {
  constexpr ExecResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecResultDefaultTypeInternal() {}
  union {
    ExecResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecResultDefaultTypeInternal _ExecResult_default_instance_;
constexpr PmdTxdisResponse::PmdTxdisResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_no_(0){}
struct PmdTxdisResponseDefaultTypeInternal {
  constexpr PmdTxdisResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PmdTxdisResponseDefaultTypeInternal() {}
  union {
    PmdTxdisResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PmdTxdisResponseDefaultTypeInternal _PmdTxdisResponse_default_instance_;
constexpr PmdStatusResponse::PmdStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loss_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , module_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fault_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_no_(0){}
struct PmdStatusResponseDefaultTypeInternal {
  constexpr PmdStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PmdStatusResponseDefaultTypeInternal() {}
  union {
    PmdStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PmdStatusResponseDefaultTypeInternal _PmdStatusResponse_default_instance_;
constexpr GetPortResponse::GetPortResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_no_(0){}
struct GetPortResponseDefaultTypeInternal {
  constexpr GetPortResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPortResponseDefaultTypeInternal() {}
  union {
    GetPortResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPortResponseDefaultTypeInternal _GetPortResponse_default_instance_;
constexpr MtuSizeResponse::MtuSizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mtu_(0){}
struct MtuSizeResponseDefaultTypeInternal {
  constexpr MtuSizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MtuSizeResponseDefaultTypeInternal() {}
  union {
    MtuSizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MtuSizeResponseDefaultTypeInternal _MtuSizeResponse_default_instance_;
constexpr GetVlanResponse::GetVlanResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fields_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vlan_mode_(0){}
struct GetVlanResponseDefaultTypeInternal {
  constexpr GetVlanResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetVlanResponseDefaultTypeInternal() {}
  union {
    GetVlanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetVlanResponseDefaultTypeInternal _GetVlanResponse_default_instance_;
constexpr ModeResponse::ModeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0){}
struct ModeResponseDefaultTypeInternal {
  constexpr ModeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModeResponseDefaultTypeInternal() {}
  union {
    ModeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModeResponseDefaultTypeInternal _ModeResponse_default_instance_;
constexpr AgingTimeResponse::AgingTimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , aging_time_(0){}
struct AgingTimeResponseDefaultTypeInternal {
  constexpr AgingTimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgingTimeResponseDefaultTypeInternal() {}
  union {
    AgingTimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgingTimeResponseDefaultTypeInternal _AgingTimeResponse_default_instance_;
constexpr DevMacInfoResponse::DevMacInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , aging_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mtu_(0)
  , vlan_mode_(0)
  , lookup_mode_(0)
  , aging_time_(0){}
struct DevMacInfoResponseDefaultTypeInternal {
  constexpr DevMacInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DevMacInfoResponseDefaultTypeInternal() {}
  union {
    DevMacInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DevMacInfoResponseDefaultTypeInternal _DevMacInfoResponse_default_instance_;
constexpr SdnTableKeyResponse::SdnTableKeyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SdnTableKeyResponseDefaultTypeInternal {
  constexpr SdnTableKeyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SdnTableKeyResponseDefaultTypeInternal() {}
  union {
    SdnTableKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SdnTableKeyResponseDefaultTypeInternal _SdnTableKeyResponse_default_instance_;
constexpr SdnTableResponse::SdnTableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SdnTableResponseDefaultTypeInternal {
  constexpr SdnTableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SdnTableResponseDefaultTypeInternal() {}
  union {
    SdnTableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SdnTableResponseDefaultTypeInternal _SdnTableResponse_default_instance_;
constexpr LengthResponse::LengthResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0){}
struct LengthResponseDefaultTypeInternal {
  constexpr LengthResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LengthResponseDefaultTypeInternal() {}
  union {
    LengthResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LengthResponseDefaultTypeInternal _LengthResponse_default_instance_;
constexpr QuietZoneResponse::QuietZoneResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0){}
struct QuietZoneResponseDefaultTypeInternal {
  constexpr QuietZoneResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuietZoneResponseDefaultTypeInternal() {}
  union {
    QuietZoneResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuietZoneResponseDefaultTypeInternal _QuietZoneResponse_default_instance_;
constexpr AddOnuResponse::AddOnuResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vssn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0){}
struct AddOnuResponseDefaultTypeInternal {
  constexpr AddOnuResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddOnuResponseDefaultTypeInternal() {}
  union {
    AddOnuResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddOnuResponseDefaultTypeInternal _AddOnuResponse_default_instance_;
constexpr SlaResponse::SlaResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0)
  , tcont_(0)
  , si_(0)
  , abmin_(0)
  , distance_(0)
  , absur_(0){}
struct SlaResponseDefaultTypeInternal {
  constexpr SlaResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlaResponseDefaultTypeInternal() {}
  union {
    SlaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlaResponseDefaultTypeInternal _SlaResponse_default_instance_;
constexpr OnuVssnResponse::OnuVssnResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vssn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0){}
struct OnuVssnResponseDefaultTypeInternal {
  constexpr OnuVssnResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnuVssnResponseDefaultTypeInternal() {}
  union {
    OnuVssnResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnuVssnResponseDefaultTypeInternal _OnuVssnResponse_default_instance_;
constexpr OnuDistResponse::OnuDistResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distance_(0)
  , onu_id_(0){}
struct OnuDistResponseDefaultTypeInternal {
  constexpr OnuDistResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnuDistResponseDefaultTypeInternal() {}
  union {
    OnuDistResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnuDistResponseDefaultTypeInternal _OnuDistResponse_default_instance_;
constexpr BurstDelimitResponse::BurstDelimitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delimiter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , length_(0){}
struct BurstDelimitResponseDefaultTypeInternal {
  constexpr BurstDelimitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BurstDelimitResponseDefaultTypeInternal() {}
  union {
    BurstDelimitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BurstDelimitResponseDefaultTypeInternal _BurstDelimitResponse_default_instance_;
constexpr BurstPreambleResponse::BurstPreambleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preamble_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , length_(0)
  , repeat_(0){}
struct BurstPreambleResponseDefaultTypeInternal {
  constexpr BurstPreambleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BurstPreambleResponseDefaultTypeInternal() {}
  union {
    BurstPreambleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BurstPreambleResponseDefaultTypeInternal _BurstPreambleResponse_default_instance_;
constexpr BurstVersionResponse::BurstVersionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pontag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(0){}
struct BurstVersionResponseDefaultTypeInternal {
  constexpr BurstVersionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BurstVersionResponseDefaultTypeInternal() {}
  union {
    BurstVersionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BurstVersionResponseDefaultTypeInternal _BurstVersionResponse_default_instance_;
constexpr BurstProfileResponse::BurstProfileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delimiter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preamble_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pontag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0)
  , index_(0)
  , delimiter_length_(0)
  , preamble_length_(0)
  , repeat_(0){}
struct BurstProfileResponseDefaultTypeInternal {
  constexpr BurstProfileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BurstProfileResponseDefaultTypeInternal() {}
  union {
    BurstProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BurstProfileResponseDefaultTypeInternal _BurstProfileResponse_default_instance_;
constexpr RegisterStatusResponse::RegisterStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0){}
struct RegisterStatusResponseDefaultTypeInternal {
  constexpr RegisterStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisterStatusResponseDefaultTypeInternal() {}
  union {
    RegisterStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisterStatusResponseDefaultTypeInternal _RegisterStatusResponse_default_instance_;
constexpr OnuInfoResponse::OnuInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vendor_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vssn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distance_(0)
  , onu_id_(0){}
struct OnuInfoResponseDefaultTypeInternal {
  constexpr OnuInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OnuInfoResponseDefaultTypeInternal() {}
  union {
    OnuInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OnuInfoResponseDefaultTypeInternal _OnuInfoResponse_default_instance_;
constexpr StatusResponse::StatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StatusResponseDefaultTypeInternal {
  constexpr StatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
constexpr TodResponse::TodResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0)
  , time_(0){}
struct TodResponseDefaultTypeInternal {
  constexpr TodResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TodResponseDefaultTypeInternal() {}
  union {
    TodResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TodResponseDefaultTypeInternal _TodResponse_default_instance_;
constexpr FecDecResponse::FecDecResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FecDecResponseDefaultTypeInternal {
  constexpr FecDecResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FecDecResponseDefaultTypeInternal() {}
  union {
    FecDecResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FecDecResponseDefaultTypeInternal _FecDecResponse_default_instance_;
constexpr ErrorPermitResponse::ErrorPermitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0){}
struct ErrorPermitResponseDefaultTypeInternal {
  constexpr ErrorPermitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorPermitResponseDefaultTypeInternal() {}
  union {
    ErrorPermitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorPermitResponseDefaultTypeInternal _ErrorPermitResponse_default_instance_;
constexpr PmControlResponse::PmControlResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transinit_(0)
  , txinit_(0){}
struct PmControlResponseDefaultTypeInternal {
  constexpr PmControlResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PmControlResponseDefaultTypeInternal() {}
  union {
    PmControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PmControlResponseDefaultTypeInternal _PmControlResponse_default_instance_;
constexpr PmTableResponse::PmTableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , onu_id_(0)
  , sleep_(0)
  , aware_(0)
  , rxoff_(0)
  , hold_(0){}
struct PmTableResponseDefaultTypeInternal {
  constexpr PmTableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PmTableResponseDefaultTypeInternal() {}
  union {
    PmTableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PmTableResponseDefaultTypeInternal _PmTableResponse_default_instance_;
}  // namespace bossopenolt
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bossopenolt_2eproto[58];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bossopenolt_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bossopenolt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bossopenolt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::boss_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::boss_request, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::boss_request, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::paramFields, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::paramFields, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bossopenolt::paramFields, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmControl, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmControl, mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmControl, power_time_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmControl, aware_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetTod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetTod, mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetTod, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetDsOmciData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetDsOmciData, control_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetDsOmciData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstVersion, version_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstVersion, index_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstVersion, pontag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstPreamble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstPreamble, repeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstDelimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstDelimit, length_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetBurstDelimit, delimiter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetOnuVssn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetOnuVssn, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetOnuVssn, vssn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetOnuAllocid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetOnuAllocid, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetOnuAllocid, alloc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ClearOnuSla, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ClearOnuSla, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ClearOnuSla, tcont_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, tcont_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, type_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, si_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, abmin_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuSla, absur_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmdTxdis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmdTxdis, port_type_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmdTxdis, mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPmdTxdis, port_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetPmdsKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetPmdsKind, port_type_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetPmdsKind, port_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPort, mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPort, port_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPortKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetPortKind, port_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetMtuSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetMtuSize, mtu_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetVlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetVlan, action_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetVlan, vid_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetVlan, pbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetSdnTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetSdnTable, port_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetSdnTable, vid_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetSdnTable, pbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetDirectionMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetDirectionMode, direction_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetDirectionMode, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetDirectionValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetDirectionValue, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetSdnTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetSdnTable, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::IntegerValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::IntegerValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::StringValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::StringValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetLength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetLength, operation_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SetLength, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetLength, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetLength, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuCtrl, onu_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltConnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltConnResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltConnResponse, ip_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltConnResponse, mac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, fpga_type_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, fpga_ver_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, fpga_date_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, sw_ver_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OltDevResponse, sw_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ExecResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ExecResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdTxdisResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdTxdisResponse, port_no_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdTxdisResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdStatusResponse, port_no_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdStatusResponse, loss_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdStatusResponse, module_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdStatusResponse, fault_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmdStatusResponse, link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetPortResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetPortResponse, port_no_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetPortResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::MtuSizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::MtuSizeResponse, mtu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetVlanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetVlanResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetVlanResponse, vlan_mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::GetVlanResponse, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ModeResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ModeResponse, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AgingTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AgingTimeResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AgingTimeResponse, aging_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, mtu_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, vlan_mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, lookup_mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, aging_mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::DevMacInfoResponse, aging_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableKeyResponse, hash_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableResponse, address_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableResponse, port_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SdnTableResponse, mac_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::LengthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::LengthResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::LengthResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::QuietZoneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::QuietZoneResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::QuietZoneResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, result_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, rate_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, vendor_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::AddOnuResponse, vssn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, tcont_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, type_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, si_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, abmin_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, absur_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, fec_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::SlaResponse, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuVssnResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuVssnResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuVssnResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuVssnResponse, vssn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuDistResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuDistResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuDistResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuDistResponse, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstDelimitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstDelimitResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstDelimitResponse, length_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstDelimitResponse, delimiter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstPreambleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstPreambleResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstPreambleResponse, length_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstPreambleResponse, preamble_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstPreambleResponse, repeat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstVersionResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstVersionResponse, version_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstVersionResponse, index_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstVersionResponse, pontag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, version_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, index_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, delimiter_length_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, delimiter_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, preamble_length_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, preamble_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, repeat_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::BurstProfileResponse, pontag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::RegisterStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::RegisterStatusResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::RegisterStatusResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::RegisterStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, rate_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, vendor_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, vssn_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, distance_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::OnuInfoResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::StatusResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::StatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::TodResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::TodResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::TodResponse, mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::TodResponse, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::FecDecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::FecDecResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::FecDecResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ErrorPermitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ErrorPermitResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::ErrorPermitResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmControlResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmControlResponse, action_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmControlResponse, onu_mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmControlResponse, transinit_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmControlResponse, txinit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, device_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, onu_id_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, mode_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, sleep_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, aware_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, rxoff_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, hold_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, action_),
  PROTOBUF_FIELD_OFFSET(::bossopenolt::PmTableResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bossopenolt::boss_request)},
  { 7, -1, sizeof(::bossopenolt::paramFields)},
  { 38, -1, sizeof(::bossopenolt::SetPmControl)},
  { 47, -1, sizeof(::bossopenolt::SetTod)},
  { 54, -1, sizeof(::bossopenolt::SetDsOmciData)},
  { 61, -1, sizeof(::bossopenolt::SetBurstVersion)},
  { 69, -1, sizeof(::bossopenolt::SetBurstPreamble)},
  { 75, -1, sizeof(::bossopenolt::SetBurstDelimit)},
  { 82, -1, sizeof(::bossopenolt::SetOnuVssn)},
  { 89, -1, sizeof(::bossopenolt::SetOnuAllocid)},
  { 96, -1, sizeof(::bossopenolt::ClearOnuSla)},
  { 103, -1, sizeof(::bossopenolt::AddOnuSla)},
  { 114, -1, sizeof(::bossopenolt::SetPmdTxdis)},
  { 122, -1, sizeof(::bossopenolt::GetPmdsKind)},
  { 129, -1, sizeof(::bossopenolt::SetPort)},
  { 136, -1, sizeof(::bossopenolt::SetPortKind)},
  { 142, -1, sizeof(::bossopenolt::SetMtuSize)},
  { 148, -1, sizeof(::bossopenolt::SetVlan)},
  { 156, -1, sizeof(::bossopenolt::SetSdnTable)},
  { 164, -1, sizeof(::bossopenolt::SetDirectionMode)},
  { 171, -1, sizeof(::bossopenolt::GetDirectionValue)},
  { 177, -1, sizeof(::bossopenolt::GetSdnTable)},
  { 183, -1, sizeof(::bossopenolt::IntegerValue)},
  { 189, -1, sizeof(::bossopenolt::StringValue)},
  { 195, -1, sizeof(::bossopenolt::SetLength)},
  { 202, -1, sizeof(::bossopenolt::GetLength)},
  { 208, -1, sizeof(::bossopenolt::OnuCtrl)},
  { 214, -1, sizeof(::bossopenolt::OltConnResponse)},
  { 222, -1, sizeof(::bossopenolt::OltDevResponse)},
  { 233, -1, sizeof(::bossopenolt::ExecResult)},
  { 239, -1, sizeof(::bossopenolt::PmdTxdisResponse)},
  { 246, -1, sizeof(::bossopenolt::PmdStatusResponse)},
  { 256, -1, sizeof(::bossopenolt::GetPortResponse)},
  { 263, -1, sizeof(::bossopenolt::MtuSizeResponse)},
  { 269, -1, sizeof(::bossopenolt::GetVlanResponse)},
  { 277, -1, sizeof(::bossopenolt::ModeResponse)},
  { 284, -1, sizeof(::bossopenolt::AgingTimeResponse)},
  { 291, -1, sizeof(::bossopenolt::DevMacInfoResponse)},
  { 302, -1, sizeof(::bossopenolt::SdnTableKeyResponse)},
  { 308, -1, sizeof(::bossopenolt::SdnTableResponse)},
  { 317, -1, sizeof(::bossopenolt::LengthResponse)},
  { 324, -1, sizeof(::bossopenolt::QuietZoneResponse)},
  { 331, -1, sizeof(::bossopenolt::AddOnuResponse)},
  { 342, -1, sizeof(::bossopenolt::SlaResponse)},
  { 356, -1, sizeof(::bossopenolt::OnuVssnResponse)},
  { 364, -1, sizeof(::bossopenolt::OnuDistResponse)},
  { 372, -1, sizeof(::bossopenolt::BurstDelimitResponse)},
  { 380, -1, sizeof(::bossopenolt::BurstPreambleResponse)},
  { 389, -1, sizeof(::bossopenolt::BurstVersionResponse)},
  { 398, -1, sizeof(::bossopenolt::BurstProfileResponse)},
  { 413, -1, sizeof(::bossopenolt::RegisterStatusResponse)},
  { 421, -1, sizeof(::bossopenolt::OnuInfoResponse)},
  { 433, -1, sizeof(::bossopenolt::StatusResponse)},
  { 440, -1, sizeof(::bossopenolt::TodResponse)},
  { 448, -1, sizeof(::bossopenolt::FecDecResponse)},
  { 455, -1, sizeof(::bossopenolt::ErrorPermitResponse)},
  { 462, -1, sizeof(::bossopenolt::PmControlResponse)},
  { 472, -1, sizeof(::bossopenolt::PmTableResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_boss_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_paramFields_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetPmControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetTod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetDsOmciData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetBurstVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetBurstPreamble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetBurstDelimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetOnuVssn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetOnuAllocid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_ClearOnuSla_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_AddOnuSla_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetPmdTxdis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_GetPmdsKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetPortKind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetMtuSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetVlan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetSdnTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetDirectionMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_GetDirectionValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_GetSdnTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_IntegerValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_StringValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SetLength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_GetLength_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_OnuCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_OltConnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_OltDevResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_ExecResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_PmdTxdisResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_PmdStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_GetPortResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_MtuSizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_GetVlanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_ModeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_AgingTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_DevMacInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SdnTableKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SdnTableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_LengthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_QuietZoneResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_AddOnuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_SlaResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_OnuVssnResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_OnuDistResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_BurstDelimitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_BurstPreambleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_BurstVersionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_BurstProfileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_RegisterStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_OnuInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_TodResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_FecDecResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_ErrorPermitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_PmControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bossopenolt::_PmTableResponse_default_instance_),
};

const char descriptor_table_protodef_bossopenolt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021bossopenolt.proto\022\013bossopenolt\"J\n\014boss"
  "_request\022\021\n\tdevice_id\030\001 \001(\t\022\'\n\005param\030\002 \001"
  "(\0132\030.bossopenolt.paramFields\"\375\n\n\013paramFi"
  "elds\0225\n\021setpmdtxdis_param\030\002 \001(\0132\030.bossop"
  "enolt.SetPmdTxdisH\000\0225\n\021getpmdskind_param"
  "\030\003 \001(\0132\030.bossopenolt.GetPmdsKindH\000\022,\n\014se"
  "tport_aram\030\004 \001(\0132\024.bossopenolt.SetPortH\000"
  "\0225\n\021setportkind_param\030\005 \001(\0132\030.bossopenol"
  "t.SetPortKindH\000\0223\n\020setmtusize_param\030\006 \001("
  "\0132\027.bossopenolt.SetMtuSizeH\000\022-\n\rsetvlan_"
  "param\030\007 \001(\0132\024.bossopenolt.SetVlanH\000\022\?\n\026s"
  "etdirectiommode_param\030\010 \001(\0132\035.bossopenol"
  "t.SetDirectionModeH\000\022A\n\027getdirectionvalu"
  "e_param\030\t \001(\0132\036.bossopenolt.GetDirection"
  "ValueH\000\0227\n\022integervalue_param\030\n \001(\0132\031.bo"
  "ssopenolt.IntegerValueH\000\0225\n\021setsdntable_"
  "param\030\013 \001(\0132\030.bossopenolt.SetSdnTableH\000\022"
  "5\n\021getsdntable_param\030\014 \001(\0132\030.bossopenolt"
  ".GetSdnTableH\000\0221\n\017setlength_param\030\r \001(\0132"
  "\026.bossopenolt.SetLengthH\000\0221\n\017getlength_p"
  "aram\030\016 \001(\0132\026.bossopenolt.GetLengthH\000\022-\n\r"
  "onuctrl_param\030\017 \001(\0132\024.bossopenolt.OnuCtr"
  "lH\000\0221\n\017addonusla_param\030\020 \001(\0132\026.bossopeno"
  "lt.AddOnuSlaH\000\0225\n\021clearonusla_param\030\021 \001("
  "\0132\030.bossopenolt.ClearOnuSlaH\000\0229\n\023setonua"
  "llocid_param\030\022 \001(\0132\032.bossopenolt.SetOnuA"
  "llocidH\000\0223\n\020setonuvssn_param\030\023 \001(\0132\027.bos"
  "sopenolt.SetOnuVssnH\000\022=\n\025setburstdelimit"
  "_param\030\024 \001(\0132\034.bossopenolt.SetBurstDelim"
  "itH\000\022\?\n\026setburstpreamble_param\030\025 \001(\0132\035.b"
  "ossopenolt.SetBurstPreambleH\000\022=\n\025setburs"
  "tversion_param\030\026 \001(\0132\034.bossopenolt.SetBu"
  "rstVersionH\000\0229\n\023setdsomcidata_param\030\027 \001("
  "\0132\032.bossopenolt.SetDsOmciDataH\000\022+\n\014setto"
  "d_param\030\030 \001(\0132\023.bossopenolt.SetTodH\000\0225\n\021"
  "stringvalue_param\030\031 \001(\0132\030.bossopenolt.St"
  "ringValueH\000\0227\n\022setpmcontrol_param\030\032 \001(\0132"
  "\031.bossopenolt.SetPmControlH\000B\006\n\004data\"T\n\014"
  "SetPmControl\022\016\n\006onu_id\030\001 \001(\005\022\014\n\004mode\030\002 \001"
  "(\005\022\022\n\npower_time\030\003 \001(\005\022\022\n\naware_time\030\004 \001"
  "(\005\"$\n\006SetTod\022\014\n\004mode\030\001 \001(\005\022\014\n\004time\030\002 \001(\005"
  "\".\n\rSetDsOmciData\022\017\n\007control\030\001 \001(\005\022\014\n\004da"
  "ta\030\002 \001(\t\"A\n\017SetBurstVersion\022\017\n\007version\030\001"
  " \001(\t\022\r\n\005index\030\002 \001(\005\022\016\n\006pontag\030\003 \001(\t\"\"\n\020S"
  "etBurstPreamble\022\016\n\006repeat\030\001 \001(\t\"4\n\017SetBu"
  "rstDelimit\022\016\n\006length\030\001 \001(\005\022\021\n\tdelimiter\030"
  "\002 \001(\t\"*\n\nSetOnuVssn\022\016\n\006onu_id\030\001 \001(\005\022\014\n\004v"
  "ssn\030\002 \001(\t\"1\n\rSetOnuAllocid\022\016\n\006onu_id\030\001 \001"
  "(\005\022\020\n\010alloc_id\030\002 \001(\t\",\n\013ClearOnuSla\022\016\n\006o"
  "nu_id\030\001 \001(\005\022\r\n\005tcont\030\002 \001(\005\"b\n\tAddOnuSla\022"
  "\016\n\006onu_id\030\001 \001(\005\022\r\n\005tcont\030\002 \001(\005\022\014\n\004type\030\003"
  " \001(\005\022\n\n\002si\030\004 \001(\005\022\r\n\005abmin\030\005 \001(\005\022\r\n\005absur"
  "\030\006 \001(\005\"\?\n\013SetPmdTxdis\022\021\n\tport_type\030\001 \001(\005"
  "\022\014\n\004mode\030\002 \001(\005\022\017\n\007port_no\030\003 \001(\005\"1\n\013GetPm"
  "dsKind\022\021\n\tport_type\030\001 \001(\005\022\017\n\007port_no\030\002 \001"
  "(\005\"(\n\007SetPort\022\014\n\004mode\030\001 \001(\005\022\017\n\007port_no\030\002"
  " \001(\005\"\036\n\013SetPortKind\022\017\n\007port_no\030\001 \001(\005\"\036\n\n"
  "SetMtuSize\022\020\n\010mtu_size\030\002 \001(\005\"4\n\007SetVlan\022"
  "\016\n\006action\030\002 \001(\005\022\013\n\003vid\030\003 \001(\005\022\014\n\004pbit\030\004 \001"
  "(\005\"9\n\013SetSdnTable\022\017\n\007port_id\030\001 \001(\t\022\013\n\003vi"
  "d\030\002 \001(\005\022\014\n\004pbit\030\003 \001(\005\"3\n\020SetDirectionMod"
  "e\022\021\n\tdirection\030\001 \001(\005\022\014\n\004mode\030\002 \001(\005\"&\n\021Ge"
  "tDirectionValue\022\021\n\tdirection\030\001 \001(\005\"\036\n\013Ge"
  "tSdnTable\022\017\n\007address\030\001 \001(\t\"\035\n\014IntegerVal"
  "ue\022\r\n\005value\030\001 \001(\005\"\034\n\013StringValue\022\r\n\005valu"
  "e\030\001 \001(\t\"-\n\tSetLength\022\021\n\toperation\030\001 \001(\005\022"
  "\r\n\005value\030\002 \001(\005\"\036\n\tGetLength\022\021\n\toperation"
  "\030\001 \001(\005\"\031\n\007OnuCtrl\022\016\n\006onu_id\030\001 \001(\005\"=\n\017Olt"
  "ConnResponse\022\021\n\tdevice_id\030\001 \001(\t\022\n\n\002ip\030\002 "
  "\001(\t\022\013\n\003mac\030\003 \001(\t\"|\n\016OltDevResponse\022\021\n\tde"
  "vice_id\030\001 \001(\t\022\021\n\tfpga_type\030\002 \001(\t\022\020\n\010fpga"
  "_ver\030\003 \001(\t\022\021\n\tfpga_Date\030\004 \001(\t\022\016\n\006sw_ver\030"
  "\005 \001(\t\022\017\n\007sw_date\030\006 \001(\t\"\034\n\nExecResult\022\016\n\006"
  "result\030\001 \001(\005\"3\n\020PmdTxdisResponse\022\017\n\007port"
  "_no\030\001 \001(\005\022\016\n\006status\030\002 \001(\t\"_\n\021PmdStatusRe"
  "sponse\022\017\n\007port_no\030\001 \001(\005\022\014\n\004loss\030\002 \001(\t\022\016\n"
  "\006module\030\003 \001(\t\022\r\n\005fault\030\004 \001(\t\022\014\n\004link\030\005 \001"
  "(\t\"1\n\017GetPortResponse\022\017\n\007port_no\030\001 \001(\005\022\r"
  "\n\005state\030\002 \001(\t\"\036\n\017MtuSizeResponse\022\013\n\003mtu\030"
  "\001 \001(\005\"G\n\017GetVlanResponse\022\021\n\tdevice_id\030\001 "
  "\001(\t\022\021\n\tvlan_mode\030\002 \001(\005\022\016\n\006fields\030\003 \001(\t\"/"
  "\n\014ModeResponse\022\021\n\tdevice_id\030\001 \001(\t\022\014\n\004mod"
  "e\030\002 \001(\005\":\n\021AgingTimeResponse\022\021\n\tdevice_i"
  "d\030\001 \001(\t\022\022\n\naging_time\030\002 \001(\005\"\204\001\n\022DevMacIn"
  "foResponse\022\021\n\tdevice_id\030\001 \001(\t\022\013\n\003mtu\030\002 \001"
  "(\005\022\021\n\tvlan_mode\030\003 \001(\005\022\023\n\013lookup_mode\030\004 \001"
  "(\005\022\022\n\naging_mode\030\005 \001(\t\022\022\n\naging_time\030\006 \001"
  "(\005\"\'\n\023SdnTableKeyResponse\022\020\n\010hash_key\030\001 "
  "\001(\t\"Y\n\020SdnTableResponse\022\021\n\tdevice_id\030\001 \001"
  "(\t\022\017\n\007address\030\002 \001(\t\022\017\n\007port_id\030\003 \001(\t\022\020\n\010"
  "mac_addr\030\004 \001(\t\"2\n\016LengthResponse\022\021\n\tdevi"
  "ce_id\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\"5\n\021QuietZoneR"
  "esponse\022\021\n\tdevice_id\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\001\"r\n\016AddOnuResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016"
  "\n\006onu_id\030\002 \001(\005\022\016\n\006result\030\003 \001(\t\022\014\n\004rate\030\004"
  " \001(\t\022\021\n\tvendor_id\030\005 \001(\t\022\014\n\004vssn\030\006 \001(\t\"\226\001"
  "\n\013SlaResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006onu_"
  "id\030\002 \001(\005\022\r\n\005tcont\030\003 \001(\005\022\014\n\004type\030\004 \001(\t\022\n\n"
  "\002si\030\005 \001(\005\022\r\n\005abmin\030\006 \001(\005\022\r\n\005absur\030\007 \001(\005\022"
  "\013\n\003fec\030\010 \001(\t\022\020\n\010distance\030\t \001(\001\"B\n\017OnuVss"
  "nResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006onu_id\030\002"
  " \001(\005\022\014\n\004vssn\030\003 \001(\t\"F\n\017OnuDistResponse\022\021\n"
  "\tdevice_id\030\001 \001(\t\022\016\n\006onu_id\030\002 \001(\005\022\020\n\010dist"
  "ance\030\003 \001(\001\"L\n\024BurstDelimitResponse\022\021\n\tde"
  "vice_id\030\001 \001(\t\022\016\n\006length\030\002 \001(\005\022\021\n\tdelimit"
  "er\030\003 \001(\t\"\\\n\025BurstPreambleResponse\022\021\n\tdev"
  "ice_id\030\001 \001(\t\022\016\n\006length\030\002 \001(\005\022\020\n\010preamble"
  "\030\003 \001(\t\022\016\n\006repeat\030\004 \001(\005\"Y\n\024BurstVersionRe"
  "sponse\022\021\n\tdevice_id\030\001 \001(\t\022\017\n\007version\030\002 \001"
  "(\t\022\r\n\005index\030\003 \001(\005\022\016\n\006pontag\030\004 \001(\t\"\321\001\n\024Bu"
  "rstProfileResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n"
  "\006onu_id\030\002 \001(\005\022\017\n\007version\030\003 \001(\t\022\r\n\005index\030"
  "\004 \001(\005\022\030\n\020delimiter_length\030\005 \001(\005\022\021\n\tdelim"
  "iter\030\006 \001(\t\022\027\n\017preamble_length\030\007 \001(\005\022\020\n\010p"
  "reamble\030\010 \001(\t\022\016\n\006repeat\030\t \001(\005\022\016\n\006pontag\030"
  "\n \001(\t\"K\n\026RegisterStatusResponse\022\021\n\tdevic"
  "e_id\030\001 \001(\t\022\016\n\006onu_id\030\002 \001(\005\022\016\n\006status\030\003 \001"
  "(\t\"\205\001\n\017OnuInfoResponse\022\021\n\tdevice_id\030\001 \001("
  "\t\022\016\n\006onu_id\030\002 \001(\005\022\014\n\004rate\030\003 \001(\t\022\021\n\tvendo"
  "r_id\030\004 \001(\t\022\014\n\004vssn\030\005 \001(\t\022\020\n\010distance\030\006 \001"
  "(\001\022\016\n\006status\030\007 \001(\t\"3\n\016StatusResponse\022\021\n\t"
  "device_id\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\"<\n\013TodRe"
  "sponse\022\021\n\tdevice_id\030\001 \001(\t\022\014\n\004mode\030\002 \001(\005\022"
  "\014\n\004time\030\003 \001(\005\"2\n\016FecDecResponse\022\021\n\tdevic"
  "e_id\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"7\n\023ErrorPermit"
  "Response\022\021\n\tdevice_id\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\005\"k\n\021PmControlResponse\022\021\n\tdevice_id\030\001 \001"
  "(\t\022\016\n\006action\030\002 \001(\t\022\020\n\010onu_mode\030\003 \001(\t\022\021\n\t"
  "transinit\030\004 \001(\005\022\016\n\006txinit\030\005 \001(\005\"\235\001\n\017PmTa"
  "bleResponse\022\021\n\tdevice_id\030\001 \001(\t\022\016\n\006onu_id"
  "\030\002 \001(\005\022\014\n\004mode\030\003 \001(\t\022\r\n\005sleep\030\004 \001(\005\022\r\n\005a"
  "ware\030\005 \001(\005\022\r\n\005rxoff\030\006 \001(\005\022\014\n\004hold\030\007 \001(\005\022"
  "\016\n\006action\030\010 \001(\t\022\016\n\006status\030\t \001(\t2\273$\n\013Boss"
  "Openolt\022J\n\rGetOltConnect\022\031.bossopenolt.b"
  "oss_request\032\034.bossopenolt.OltConnRespons"
  "e\"\000\022L\n\020GetOltDeviceInfo\022\031.bossopenolt.bo"
  "ss_request\032\033.bossopenolt.OltDevResponse\""
  "\000\022C\n\013SetPmdTxDis\022\031.bossopenolt.boss_requ"
  "est\032\027.bossopenolt.ExecResult\"\000\022I\n\013GetPmd"
  "Txdis\022\031.bossopenolt.boss_request\032\035.bosso"
  "penolt.PmdTxdisResponse\"\000\022Q\n\022GetDevicePm"
  "dStatus\022\031.bossopenolt.boss_request\032\036.bos"
  "sopenolt.PmdStatusResponse\"\000\022E\n\rSetDevic"
  "ePort\022\031.bossopenolt.boss_request\032\027.bosso"
  "penolt.ExecResult\"\000\022J\n\rGetDevicePort\022\031.b"
  "ossopenolt.boss_request\032\034.bossopenolt.Ge"
  "tPortResponse\"\000\022A\n\tPortReset\022\031.bossopeno"
  "lt.boss_request\032\027.bossopenolt.ExecResult"
  "\"\000\022B\n\nSetMtuSize\022\031.bossopenolt.boss_requ"
  "est\032\027.bossopenolt.ExecResult\"\000\022G\n\nGetMtu"
  "Size\022\031.bossopenolt.boss_request\032\034.bossop"
  "enolt.MtuSizeResponse\"\000\022\?\n\007SetVlan\022\031.bos"
  "sopenolt.boss_request\032\027.bossopenolt.Exec"
  "Result\"\000\022D\n\007GetVlan\022\031.bossopenolt.boss_r"
  "equest\032\034.bossopenolt.GetVlanResponse\"\000\022B"
  "\n\nSetLutMode\022\031.bossopenolt.boss_request\032"
  "\027.bossopenolt.ExecResult\"\000\022D\n\nGetLutMode"
  "\022\031.bossopenolt.boss_request\032\031.bossopenol"
  "t.ModeResponse\"\000\022D\n\014SetAgingMode\022\031.bosso"
  "penolt.boss_request\032\027.bossopenolt.ExecRe"
  "sult\"\000\022F\n\014GetAgingMode\022\031.bossopenolt.bos"
  "s_request\032\031.bossopenolt.ModeResponse\"\000\022D"
  "\n\014SetAgingTime\022\031.bossopenolt.boss_reques"
  "t\032\027.bossopenolt.ExecResult\"\000\022K\n\014GetAging"
  "Time\022\031.bossopenolt.boss_request\032\036.bossop"
  "enolt.AgingTimeResponse\"\000\022P\n\020GetDeviceMa"
  "cInfo\022\031.bossopenolt.boss_request\032\037.bosso"
  "penolt.DevMacInfoResponse\"\000\022L\n\013SetSdnTab"
  "le\022\031.bossopenolt.boss_request\032 .bossopen"
  "olt.SdnTableKeyResponse\"\000\022I\n\013GetSdnTable"
  "\022\031.bossopenolt.boss_request\032\035.bossopenol"
  "t.SdnTableResponse\"\000\022A\n\tSetLength\022\031.boss"
  "openolt.boss_request\032\027.bossopenolt.ExecR"
  "esult\"\000\022E\n\tGetLength\022\031.bossopenolt.boss_"
  "request\032\033.bossopenolt.LengthResponse\"\000\022D"
  "\n\014SetQuietZone\022\031.bossopenolt.boss_reques"
  "t\032\027.bossopenolt.ExecResult\"\000\022K\n\014GetQuiet"
  "Zone\022\031.bossopenolt.boss_request\032\036.bossop"
  "enolt.QuietZoneResponse\"\000\022B\n\nSetFecMode\022"
  "\031.bossopenolt.boss_request\032\027.bossopenolt"
  ".ExecResult\"\000\022D\n\nGetFecMode\022\031.bossopenol"
  "t.boss_request\032\031.bossopenolt.ModeRespons"
  "e\"\000\022B\n\006AddOnu\022\031.bossopenolt.boss_request"
  "\032\033.bossopenolt.AddOnuResponse\"\000\022A\n\tDelet"
  "eOnu\022\031.bossopenolt.boss_request\032\027.bossop"
  "enolt.ExecResult\"\000\022A\n\tAddOnuSla\022\031.bossop"
  "enolt.boss_request\032\027.bossopenolt.ExecRes"
  "ult\"\000\022C\n\013ClearOnuSla\022\031.bossopenolt.boss_"
  "request\032\027.bossopenolt.ExecResult\"\000\022D\n\013Ge"
  "tSlaTable\022\031.bossopenolt.boss_request\032\030.b"
  "ossopenolt.SlaResponse\"\000\022E\n\rSetOnuAlloci"
  "d\022\031.bossopenolt.boss_request\032\027.bossopeno"
  "lt.ExecResult\"\000\022E\n\rDelOnuAllocid\022\031.bosso"
  "penolt.boss_request\032\027.bossopenolt.ExecRe"
  "sult\"\000\022B\n\nSetOnuVssn\022\031.bossopenolt.boss_"
  "request\032\027.bossopenolt.ExecResult\"\000\022G\n\nGe"
  "tOnuVssn\022\031.bossopenolt.boss_request\032\034.bo"
  "ssopenolt.OnuVssnResponse\"\000\022K\n\016GetOnuDis"
  "tance\022\031.bossopenolt.boss_request\032\034.bosso"
  "penolt.OnuDistResponse\"\000\022I\n\021SetBurstDeli"
  "miter\022\031.bossopenolt.boss_request\032\027.bosso"
  "penolt.ExecResult\"\000\022S\n\021GetBurstDelimiter"
  "\022\031.bossopenolt.boss_request\032!.bossopenol"
  "t.BurstDelimitResponse\"\000\022H\n\020SetBurstPrea"
  "mble\022\031.bossopenolt.boss_request\032\027.bossop"
  "enolt.ExecResult\"\000\022S\n\020GetBurstPreamble\022\031"
  ".bossopenolt.boss_request\032\".bossopenolt."
  "BurstPreambleResponse\"\000\022G\n\017SetBurstVersi"
  "on\022\031.bossopenolt.boss_request\032\027.bossopen"
  "olt.ExecResult\"\000\022Q\n\017GetBurstVersion\022\031.bo"
  "ssopenolt.boss_request\032!.bossopenolt.Bur"
  "stVersionResponse\"\000\022G\n\017SetBurstProfile\022\031"
  ".bossopenolt.boss_request\032\027.bossopenolt."
  "ExecResult\"\000\022Q\n\017GetBurstProfile\022\031.bossop"
  "enolt.boss_request\032!.bossopenolt.BurstPr"
  "ofileResponse\"\000\022U\n\021GetRegisterStatus\022\031.b"
  "ossopenolt.boss_request\032#.bossopenolt.Re"
  "gisterStatusResponse\"\000\022G\n\nGetOnuInfo\022\031.b"
  "ossopenolt.boss_request\032\034.bossopenolt.On"
  "uInfoResponse\"\000\022I\n\rGetOmciStatus\022\031.bosso"
  "penolt.boss_request\032\033.bossopenolt.Status"
  "Response\"\000\022D\n\014SetDsOmciOnu\022\031.bossopenolt"
  ".boss_request\032\027.bossopenolt.ExecResult\"\000"
  "\022>\n\006SetTod\022\031.bossopenolt.boss_request\032\027."
  "bossopenolt.ExecResult\"\000\022\?\n\006GetTod\022\031.bos"
  "sopenolt.boss_request\032\030.bossopenolt.TodR"
  "esponse\"\000\022C\n\013SetDataMode\022\031.bossopenolt.b"
  "oss_request\032\027.bossopenolt.ExecResult\"\000\022E"
  "\n\013GetDataMode\022\031.bossopenolt.boss_request"
  "\032\031.bossopenolt.ModeResponse\"\000\022E\n\rSetFecD"
  "ecMode\022\031.bossopenolt.boss_request\032\027.boss"
  "openolt.ExecResult\"\000\022G\n\rGetFecDecMode\022\031."
  "bossopenolt.boss_request\032\031.bossopenolt.M"
  "odeResponse\"\000\022D\n\014SetDelimiter\022\031.bossopen"
  "olt.boss_request\032\027.bossopenolt.ExecResul"
  "t\"\000\022H\n\014GetDelimiter\022\031.bossopenolt.boss_r"
  "equest\032\033.bossopenolt.FecDecResponse\"\000\022F\n"
  "\016SetErrorPermit\022\031.bossopenolt.boss_reque"
  "st\032\027.bossopenolt.ExecResult\"\000\022O\n\016GetErro"
  "rPermit\022\031.bossopenolt.boss_request\032 .bos"
  "sopenolt.ErrorPermitResponse\"\000\022D\n\014SetPmC"
  "ontrol\022\031.bossopenolt.boss_request\032\027.boss"
  "openolt.ExecResult\"\000\022K\n\014GetPmControl\022\031.b"
  "ossopenolt.boss_request\032\036.bossopenolt.Pm"
  "ControlResponse\"\000\022G\n\nGetPmTable\022\031.bossop"
  "enolt.boss_request\032\034.bossopenolt.PmTable"
  "Response\"\000\022\?\n\007SetSAOn\022\031.bossopenolt.boss"
  "_request\032\027.bossopenolt.ExecResult\"\000\022@\n\010S"
  "etSAOff\022\031.bossopenolt.boss_request\032\027.bos"
  "sopenolt.ExecResult\"\000Bi\n\037org.opencord.vo"
  "ltha.bossopenoltB\021VolthaBossOpenOLTZ3git"
  "hub.com/opencord/voltha-protos/v4/go/bos"
  "sopenoltb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bossopenolt_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bossopenolt_2eproto = {
  false, false, 10096, descriptor_table_protodef_bossopenolt_2eproto, "bossopenolt.proto", 
  &descriptor_table_bossopenolt_2eproto_once, nullptr, 0, 58,
  schemas, file_default_instances, TableStruct_bossopenolt_2eproto::offsets,
  file_level_metadata_bossopenolt_2eproto, file_level_enum_descriptors_bossopenolt_2eproto, file_level_service_descriptors_bossopenolt_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_bossopenolt_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bossopenolt_2eproto);
  return descriptor_table_bossopenolt_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_bossopenolt_2eproto(&descriptor_table_bossopenolt_2eproto);
namespace bossopenolt {

// ===================================================================

class boss_request::_Internal {
 public:
  static const ::bossopenolt::paramFields& param(const boss_request* msg);
};

const ::bossopenolt::paramFields&
boss_request::_Internal::param(const boss_request* msg) {
  return *msg->param_;
}
boss_request::boss_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.boss_request)
}
boss_request::boss_request(const boss_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  if (from._internal_has_param()) {
    param_ = new ::bossopenolt::paramFields(*from.param_);
  } else {
    param_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.boss_request)
}

void boss_request::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
param_ = nullptr;
}

boss_request::~boss_request() {
  // @@protoc_insertion_point(destructor:bossopenolt.boss_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void boss_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete param_;
}

void boss_request::ArenaDtor(void* object) {
  boss_request* _this = reinterpret_cast< boss_request* >(object);
  (void)_this;
}
void boss_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void boss_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void boss_request::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.boss_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* boss_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.boss_request.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.paramFields param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* boss_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.boss_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.boss_request.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // .bossopenolt.paramFields param = 2;
  if (this->has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.boss_request)
  return target;
}

size_t boss_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.boss_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .bossopenolt.paramFields param = 2;
  if (this->has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void boss_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.boss_request)
  GOOGLE_DCHECK_NE(&from, this);
  const boss_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<boss_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.boss_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.boss_request)
    MergeFrom(*source);
  }
}

void boss_request::MergeFrom(const boss_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.boss_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.has_param()) {
    _internal_mutable_param()->::bossopenolt::paramFields::MergeFrom(from._internal_param());
  }
}

void boss_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.boss_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boss_request::CopyFrom(const boss_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.boss_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boss_request::IsInitialized() const {
  return true;
}

void boss_request::InternalSwap(boss_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(param_, other->param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata boss_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class paramFields::_Internal {
 public:
  static const ::bossopenolt::SetPmdTxdis& setpmdtxdis_param(const paramFields* msg);
  static const ::bossopenolt::GetPmdsKind& getpmdskind_param(const paramFields* msg);
  static const ::bossopenolt::SetPort& setport_aram(const paramFields* msg);
  static const ::bossopenolt::SetPortKind& setportkind_param(const paramFields* msg);
  static const ::bossopenolt::SetMtuSize& setmtusize_param(const paramFields* msg);
  static const ::bossopenolt::SetVlan& setvlan_param(const paramFields* msg);
  static const ::bossopenolt::SetDirectionMode& setdirectiommode_param(const paramFields* msg);
  static const ::bossopenolt::GetDirectionValue& getdirectionvalue_param(const paramFields* msg);
  static const ::bossopenolt::IntegerValue& integervalue_param(const paramFields* msg);
  static const ::bossopenolt::SetSdnTable& setsdntable_param(const paramFields* msg);
  static const ::bossopenolt::GetSdnTable& getsdntable_param(const paramFields* msg);
  static const ::bossopenolt::SetLength& setlength_param(const paramFields* msg);
  static const ::bossopenolt::GetLength& getlength_param(const paramFields* msg);
  static const ::bossopenolt::OnuCtrl& onuctrl_param(const paramFields* msg);
  static const ::bossopenolt::AddOnuSla& addonusla_param(const paramFields* msg);
  static const ::bossopenolt::ClearOnuSla& clearonusla_param(const paramFields* msg);
  static const ::bossopenolt::SetOnuAllocid& setonuallocid_param(const paramFields* msg);
  static const ::bossopenolt::SetOnuVssn& setonuvssn_param(const paramFields* msg);
  static const ::bossopenolt::SetBurstDelimit& setburstdelimit_param(const paramFields* msg);
  static const ::bossopenolt::SetBurstPreamble& setburstpreamble_param(const paramFields* msg);
  static const ::bossopenolt::SetBurstVersion& setburstversion_param(const paramFields* msg);
  static const ::bossopenolt::SetDsOmciData& setdsomcidata_param(const paramFields* msg);
  static const ::bossopenolt::SetTod& settod_param(const paramFields* msg);
  static const ::bossopenolt::StringValue& stringvalue_param(const paramFields* msg);
  static const ::bossopenolt::SetPmControl& setpmcontrol_param(const paramFields* msg);
};

const ::bossopenolt::SetPmdTxdis&
paramFields::_Internal::setpmdtxdis_param(const paramFields* msg) {
  return *msg->data_.setpmdtxdis_param_;
}
const ::bossopenolt::GetPmdsKind&
paramFields::_Internal::getpmdskind_param(const paramFields* msg) {
  return *msg->data_.getpmdskind_param_;
}
const ::bossopenolt::SetPort&
paramFields::_Internal::setport_aram(const paramFields* msg) {
  return *msg->data_.setport_aram_;
}
const ::bossopenolt::SetPortKind&
paramFields::_Internal::setportkind_param(const paramFields* msg) {
  return *msg->data_.setportkind_param_;
}
const ::bossopenolt::SetMtuSize&
paramFields::_Internal::setmtusize_param(const paramFields* msg) {
  return *msg->data_.setmtusize_param_;
}
const ::bossopenolt::SetVlan&
paramFields::_Internal::setvlan_param(const paramFields* msg) {
  return *msg->data_.setvlan_param_;
}
const ::bossopenolt::SetDirectionMode&
paramFields::_Internal::setdirectiommode_param(const paramFields* msg) {
  return *msg->data_.setdirectiommode_param_;
}
const ::bossopenolt::GetDirectionValue&
paramFields::_Internal::getdirectionvalue_param(const paramFields* msg) {
  return *msg->data_.getdirectionvalue_param_;
}
const ::bossopenolt::IntegerValue&
paramFields::_Internal::integervalue_param(const paramFields* msg) {
  return *msg->data_.integervalue_param_;
}
const ::bossopenolt::SetSdnTable&
paramFields::_Internal::setsdntable_param(const paramFields* msg) {
  return *msg->data_.setsdntable_param_;
}
const ::bossopenolt::GetSdnTable&
paramFields::_Internal::getsdntable_param(const paramFields* msg) {
  return *msg->data_.getsdntable_param_;
}
const ::bossopenolt::SetLength&
paramFields::_Internal::setlength_param(const paramFields* msg) {
  return *msg->data_.setlength_param_;
}
const ::bossopenolt::GetLength&
paramFields::_Internal::getlength_param(const paramFields* msg) {
  return *msg->data_.getlength_param_;
}
const ::bossopenolt::OnuCtrl&
paramFields::_Internal::onuctrl_param(const paramFields* msg) {
  return *msg->data_.onuctrl_param_;
}
const ::bossopenolt::AddOnuSla&
paramFields::_Internal::addonusla_param(const paramFields* msg) {
  return *msg->data_.addonusla_param_;
}
const ::bossopenolt::ClearOnuSla&
paramFields::_Internal::clearonusla_param(const paramFields* msg) {
  return *msg->data_.clearonusla_param_;
}
const ::bossopenolt::SetOnuAllocid&
paramFields::_Internal::setonuallocid_param(const paramFields* msg) {
  return *msg->data_.setonuallocid_param_;
}
const ::bossopenolt::SetOnuVssn&
paramFields::_Internal::setonuvssn_param(const paramFields* msg) {
  return *msg->data_.setonuvssn_param_;
}
const ::bossopenolt::SetBurstDelimit&
paramFields::_Internal::setburstdelimit_param(const paramFields* msg) {
  return *msg->data_.setburstdelimit_param_;
}
const ::bossopenolt::SetBurstPreamble&
paramFields::_Internal::setburstpreamble_param(const paramFields* msg) {
  return *msg->data_.setburstpreamble_param_;
}
const ::bossopenolt::SetBurstVersion&
paramFields::_Internal::setburstversion_param(const paramFields* msg) {
  return *msg->data_.setburstversion_param_;
}
const ::bossopenolt::SetDsOmciData&
paramFields::_Internal::setdsomcidata_param(const paramFields* msg) {
  return *msg->data_.setdsomcidata_param_;
}
const ::bossopenolt::SetTod&
paramFields::_Internal::settod_param(const paramFields* msg) {
  return *msg->data_.settod_param_;
}
const ::bossopenolt::StringValue&
paramFields::_Internal::stringvalue_param(const paramFields* msg) {
  return *msg->data_.stringvalue_param_;
}
const ::bossopenolt::SetPmControl&
paramFields::_Internal::setpmcontrol_param(const paramFields* msg) {
  return *msg->data_.setpmcontrol_param_;
}
void paramFields::set_allocated_setpmdtxdis_param(::bossopenolt::SetPmdTxdis* setpmdtxdis_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setpmdtxdis_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setpmdtxdis_param);
    if (message_arena != submessage_arena) {
      setpmdtxdis_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpmdtxdis_param, submessage_arena);
    }
    set_has_setpmdtxdis_param();
    data_.setpmdtxdis_param_ = setpmdtxdis_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setpmdtxdis_param)
}
void paramFields::set_allocated_getpmdskind_param(::bossopenolt::GetPmdsKind* getpmdskind_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (getpmdskind_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getpmdskind_param);
    if (message_arena != submessage_arena) {
      getpmdskind_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpmdskind_param, submessage_arena);
    }
    set_has_getpmdskind_param();
    data_.getpmdskind_param_ = getpmdskind_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.getpmdskind_param)
}
void paramFields::set_allocated_setport_aram(::bossopenolt::SetPort* setport_aram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setport_aram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setport_aram);
    if (message_arena != submessage_arena) {
      setport_aram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setport_aram, submessage_arena);
    }
    set_has_setport_aram();
    data_.setport_aram_ = setport_aram;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setport_aram)
}
void paramFields::set_allocated_setportkind_param(::bossopenolt::SetPortKind* setportkind_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setportkind_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setportkind_param);
    if (message_arena != submessage_arena) {
      setportkind_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setportkind_param, submessage_arena);
    }
    set_has_setportkind_param();
    data_.setportkind_param_ = setportkind_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setportkind_param)
}
void paramFields::set_allocated_setmtusize_param(::bossopenolt::SetMtuSize* setmtusize_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setmtusize_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setmtusize_param);
    if (message_arena != submessage_arena) {
      setmtusize_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmtusize_param, submessage_arena);
    }
    set_has_setmtusize_param();
    data_.setmtusize_param_ = setmtusize_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setmtusize_param)
}
void paramFields::set_allocated_setvlan_param(::bossopenolt::SetVlan* setvlan_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setvlan_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setvlan_param);
    if (message_arena != submessage_arena) {
      setvlan_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setvlan_param, submessage_arena);
    }
    set_has_setvlan_param();
    data_.setvlan_param_ = setvlan_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setvlan_param)
}
void paramFields::set_allocated_setdirectiommode_param(::bossopenolt::SetDirectionMode* setdirectiommode_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setdirectiommode_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setdirectiommode_param);
    if (message_arena != submessage_arena) {
      setdirectiommode_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setdirectiommode_param, submessage_arena);
    }
    set_has_setdirectiommode_param();
    data_.setdirectiommode_param_ = setdirectiommode_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setdirectiommode_param)
}
void paramFields::set_allocated_getdirectionvalue_param(::bossopenolt::GetDirectionValue* getdirectionvalue_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (getdirectionvalue_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getdirectionvalue_param);
    if (message_arena != submessage_arena) {
      getdirectionvalue_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getdirectionvalue_param, submessage_arena);
    }
    set_has_getdirectionvalue_param();
    data_.getdirectionvalue_param_ = getdirectionvalue_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.getdirectionvalue_param)
}
void paramFields::set_allocated_integervalue_param(::bossopenolt::IntegerValue* integervalue_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (integervalue_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(integervalue_param);
    if (message_arena != submessage_arena) {
      integervalue_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integervalue_param, submessage_arena);
    }
    set_has_integervalue_param();
    data_.integervalue_param_ = integervalue_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.integervalue_param)
}
void paramFields::set_allocated_setsdntable_param(::bossopenolt::SetSdnTable* setsdntable_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setsdntable_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setsdntable_param);
    if (message_arena != submessage_arena) {
      setsdntable_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setsdntable_param, submessage_arena);
    }
    set_has_setsdntable_param();
    data_.setsdntable_param_ = setsdntable_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setsdntable_param)
}
void paramFields::set_allocated_getsdntable_param(::bossopenolt::GetSdnTable* getsdntable_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (getsdntable_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getsdntable_param);
    if (message_arena != submessage_arena) {
      getsdntable_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getsdntable_param, submessage_arena);
    }
    set_has_getsdntable_param();
    data_.getsdntable_param_ = getsdntable_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.getsdntable_param)
}
void paramFields::set_allocated_setlength_param(::bossopenolt::SetLength* setlength_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setlength_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setlength_param);
    if (message_arena != submessage_arena) {
      setlength_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setlength_param, submessage_arena);
    }
    set_has_setlength_param();
    data_.setlength_param_ = setlength_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setlength_param)
}
void paramFields::set_allocated_getlength_param(::bossopenolt::GetLength* getlength_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (getlength_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getlength_param);
    if (message_arena != submessage_arena) {
      getlength_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlength_param, submessage_arena);
    }
    set_has_getlength_param();
    data_.getlength_param_ = getlength_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.getlength_param)
}
void paramFields::set_allocated_onuctrl_param(::bossopenolt::OnuCtrl* onuctrl_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (onuctrl_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(onuctrl_param);
    if (message_arena != submessage_arena) {
      onuctrl_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuctrl_param, submessage_arena);
    }
    set_has_onuctrl_param();
    data_.onuctrl_param_ = onuctrl_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.onuctrl_param)
}
void paramFields::set_allocated_addonusla_param(::bossopenolt::AddOnuSla* addonusla_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (addonusla_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addonusla_param);
    if (message_arena != submessage_arena) {
      addonusla_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addonusla_param, submessage_arena);
    }
    set_has_addonusla_param();
    data_.addonusla_param_ = addonusla_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.addonusla_param)
}
void paramFields::set_allocated_clearonusla_param(::bossopenolt::ClearOnuSla* clearonusla_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (clearonusla_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clearonusla_param);
    if (message_arena != submessage_arena) {
      clearonusla_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearonusla_param, submessage_arena);
    }
    set_has_clearonusla_param();
    data_.clearonusla_param_ = clearonusla_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.clearonusla_param)
}
void paramFields::set_allocated_setonuallocid_param(::bossopenolt::SetOnuAllocid* setonuallocid_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setonuallocid_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setonuallocid_param);
    if (message_arena != submessage_arena) {
      setonuallocid_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setonuallocid_param, submessage_arena);
    }
    set_has_setonuallocid_param();
    data_.setonuallocid_param_ = setonuallocid_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setonuallocid_param)
}
void paramFields::set_allocated_setonuvssn_param(::bossopenolt::SetOnuVssn* setonuvssn_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setonuvssn_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setonuvssn_param);
    if (message_arena != submessage_arena) {
      setonuvssn_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setonuvssn_param, submessage_arena);
    }
    set_has_setonuvssn_param();
    data_.setonuvssn_param_ = setonuvssn_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setonuvssn_param)
}
void paramFields::set_allocated_setburstdelimit_param(::bossopenolt::SetBurstDelimit* setburstdelimit_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setburstdelimit_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setburstdelimit_param);
    if (message_arena != submessage_arena) {
      setburstdelimit_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setburstdelimit_param, submessage_arena);
    }
    set_has_setburstdelimit_param();
    data_.setburstdelimit_param_ = setburstdelimit_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setburstdelimit_param)
}
void paramFields::set_allocated_setburstpreamble_param(::bossopenolt::SetBurstPreamble* setburstpreamble_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setburstpreamble_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setburstpreamble_param);
    if (message_arena != submessage_arena) {
      setburstpreamble_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setburstpreamble_param, submessage_arena);
    }
    set_has_setburstpreamble_param();
    data_.setburstpreamble_param_ = setburstpreamble_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setburstpreamble_param)
}
void paramFields::set_allocated_setburstversion_param(::bossopenolt::SetBurstVersion* setburstversion_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setburstversion_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setburstversion_param);
    if (message_arena != submessage_arena) {
      setburstversion_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setburstversion_param, submessage_arena);
    }
    set_has_setburstversion_param();
    data_.setburstversion_param_ = setburstversion_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setburstversion_param)
}
void paramFields::set_allocated_setdsomcidata_param(::bossopenolt::SetDsOmciData* setdsomcidata_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setdsomcidata_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setdsomcidata_param);
    if (message_arena != submessage_arena) {
      setdsomcidata_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setdsomcidata_param, submessage_arena);
    }
    set_has_setdsomcidata_param();
    data_.setdsomcidata_param_ = setdsomcidata_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setdsomcidata_param)
}
void paramFields::set_allocated_settod_param(::bossopenolt::SetTod* settod_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (settod_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settod_param);
    if (message_arena != submessage_arena) {
      settod_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settod_param, submessage_arena);
    }
    set_has_settod_param();
    data_.settod_param_ = settod_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.settod_param)
}
void paramFields::set_allocated_stringvalue_param(::bossopenolt::StringValue* stringvalue_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (stringvalue_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stringvalue_param);
    if (message_arena != submessage_arena) {
      stringvalue_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stringvalue_param, submessage_arena);
    }
    set_has_stringvalue_param();
    data_.stringvalue_param_ = stringvalue_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.stringvalue_param)
}
void paramFields::set_allocated_setpmcontrol_param(::bossopenolt::SetPmControl* setpmcontrol_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (setpmcontrol_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setpmcontrol_param);
    if (message_arena != submessage_arena) {
      setpmcontrol_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpmcontrol_param, submessage_arena);
    }
    set_has_setpmcontrol_param();
    data_.setpmcontrol_param_ = setpmcontrol_param;
  }
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.paramFields.setpmcontrol_param)
}
paramFields::paramFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.paramFields)
}
paramFields::paramFields(const paramFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kSetpmdtxdisParam: {
      _internal_mutable_setpmdtxdis_param()->::bossopenolt::SetPmdTxdis::MergeFrom(from._internal_setpmdtxdis_param());
      break;
    }
    case kGetpmdskindParam: {
      _internal_mutable_getpmdskind_param()->::bossopenolt::GetPmdsKind::MergeFrom(from._internal_getpmdskind_param());
      break;
    }
    case kSetportAram: {
      _internal_mutable_setport_aram()->::bossopenolt::SetPort::MergeFrom(from._internal_setport_aram());
      break;
    }
    case kSetportkindParam: {
      _internal_mutable_setportkind_param()->::bossopenolt::SetPortKind::MergeFrom(from._internal_setportkind_param());
      break;
    }
    case kSetmtusizeParam: {
      _internal_mutable_setmtusize_param()->::bossopenolt::SetMtuSize::MergeFrom(from._internal_setmtusize_param());
      break;
    }
    case kSetvlanParam: {
      _internal_mutable_setvlan_param()->::bossopenolt::SetVlan::MergeFrom(from._internal_setvlan_param());
      break;
    }
    case kSetdirectiommodeParam: {
      _internal_mutable_setdirectiommode_param()->::bossopenolt::SetDirectionMode::MergeFrom(from._internal_setdirectiommode_param());
      break;
    }
    case kGetdirectionvalueParam: {
      _internal_mutable_getdirectionvalue_param()->::bossopenolt::GetDirectionValue::MergeFrom(from._internal_getdirectionvalue_param());
      break;
    }
    case kIntegervalueParam: {
      _internal_mutable_integervalue_param()->::bossopenolt::IntegerValue::MergeFrom(from._internal_integervalue_param());
      break;
    }
    case kSetsdntableParam: {
      _internal_mutable_setsdntable_param()->::bossopenolt::SetSdnTable::MergeFrom(from._internal_setsdntable_param());
      break;
    }
    case kGetsdntableParam: {
      _internal_mutable_getsdntable_param()->::bossopenolt::GetSdnTable::MergeFrom(from._internal_getsdntable_param());
      break;
    }
    case kSetlengthParam: {
      _internal_mutable_setlength_param()->::bossopenolt::SetLength::MergeFrom(from._internal_setlength_param());
      break;
    }
    case kGetlengthParam: {
      _internal_mutable_getlength_param()->::bossopenolt::GetLength::MergeFrom(from._internal_getlength_param());
      break;
    }
    case kOnuctrlParam: {
      _internal_mutable_onuctrl_param()->::bossopenolt::OnuCtrl::MergeFrom(from._internal_onuctrl_param());
      break;
    }
    case kAddonuslaParam: {
      _internal_mutable_addonusla_param()->::bossopenolt::AddOnuSla::MergeFrom(from._internal_addonusla_param());
      break;
    }
    case kClearonuslaParam: {
      _internal_mutable_clearonusla_param()->::bossopenolt::ClearOnuSla::MergeFrom(from._internal_clearonusla_param());
      break;
    }
    case kSetonuallocidParam: {
      _internal_mutable_setonuallocid_param()->::bossopenolt::SetOnuAllocid::MergeFrom(from._internal_setonuallocid_param());
      break;
    }
    case kSetonuvssnParam: {
      _internal_mutable_setonuvssn_param()->::bossopenolt::SetOnuVssn::MergeFrom(from._internal_setonuvssn_param());
      break;
    }
    case kSetburstdelimitParam: {
      _internal_mutable_setburstdelimit_param()->::bossopenolt::SetBurstDelimit::MergeFrom(from._internal_setburstdelimit_param());
      break;
    }
    case kSetburstpreambleParam: {
      _internal_mutable_setburstpreamble_param()->::bossopenolt::SetBurstPreamble::MergeFrom(from._internal_setburstpreamble_param());
      break;
    }
    case kSetburstversionParam: {
      _internal_mutable_setburstversion_param()->::bossopenolt::SetBurstVersion::MergeFrom(from._internal_setburstversion_param());
      break;
    }
    case kSetdsomcidataParam: {
      _internal_mutable_setdsomcidata_param()->::bossopenolt::SetDsOmciData::MergeFrom(from._internal_setdsomcidata_param());
      break;
    }
    case kSettodParam: {
      _internal_mutable_settod_param()->::bossopenolt::SetTod::MergeFrom(from._internal_settod_param());
      break;
    }
    case kStringvalueParam: {
      _internal_mutable_stringvalue_param()->::bossopenolt::StringValue::MergeFrom(from._internal_stringvalue_param());
      break;
    }
    case kSetpmcontrolParam: {
      _internal_mutable_setpmcontrol_param()->::bossopenolt::SetPmControl::MergeFrom(from._internal_setpmcontrol_param());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.paramFields)
}

void paramFields::SharedCtor() {
clear_has_data();
}

paramFields::~paramFields() {
  // @@protoc_insertion_point(destructor:bossopenolt.paramFields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void paramFields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void paramFields::ArenaDtor(void* object) {
  paramFields* _this = reinterpret_cast< paramFields* >(object);
  (void)_this;
}
void paramFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void paramFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void paramFields::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:bossopenolt.paramFields)
  switch (data_case()) {
    case kSetpmdtxdisParam: {
      if (GetArena() == nullptr) {
        delete data_.setpmdtxdis_param_;
      }
      break;
    }
    case kGetpmdskindParam: {
      if (GetArena() == nullptr) {
        delete data_.getpmdskind_param_;
      }
      break;
    }
    case kSetportAram: {
      if (GetArena() == nullptr) {
        delete data_.setport_aram_;
      }
      break;
    }
    case kSetportkindParam: {
      if (GetArena() == nullptr) {
        delete data_.setportkind_param_;
      }
      break;
    }
    case kSetmtusizeParam: {
      if (GetArena() == nullptr) {
        delete data_.setmtusize_param_;
      }
      break;
    }
    case kSetvlanParam: {
      if (GetArena() == nullptr) {
        delete data_.setvlan_param_;
      }
      break;
    }
    case kSetdirectiommodeParam: {
      if (GetArena() == nullptr) {
        delete data_.setdirectiommode_param_;
      }
      break;
    }
    case kGetdirectionvalueParam: {
      if (GetArena() == nullptr) {
        delete data_.getdirectionvalue_param_;
      }
      break;
    }
    case kIntegervalueParam: {
      if (GetArena() == nullptr) {
        delete data_.integervalue_param_;
      }
      break;
    }
    case kSetsdntableParam: {
      if (GetArena() == nullptr) {
        delete data_.setsdntable_param_;
      }
      break;
    }
    case kGetsdntableParam: {
      if (GetArena() == nullptr) {
        delete data_.getsdntable_param_;
      }
      break;
    }
    case kSetlengthParam: {
      if (GetArena() == nullptr) {
        delete data_.setlength_param_;
      }
      break;
    }
    case kGetlengthParam: {
      if (GetArena() == nullptr) {
        delete data_.getlength_param_;
      }
      break;
    }
    case kOnuctrlParam: {
      if (GetArena() == nullptr) {
        delete data_.onuctrl_param_;
      }
      break;
    }
    case kAddonuslaParam: {
      if (GetArena() == nullptr) {
        delete data_.addonusla_param_;
      }
      break;
    }
    case kClearonuslaParam: {
      if (GetArena() == nullptr) {
        delete data_.clearonusla_param_;
      }
      break;
    }
    case kSetonuallocidParam: {
      if (GetArena() == nullptr) {
        delete data_.setonuallocid_param_;
      }
      break;
    }
    case kSetonuvssnParam: {
      if (GetArena() == nullptr) {
        delete data_.setonuvssn_param_;
      }
      break;
    }
    case kSetburstdelimitParam: {
      if (GetArena() == nullptr) {
        delete data_.setburstdelimit_param_;
      }
      break;
    }
    case kSetburstpreambleParam: {
      if (GetArena() == nullptr) {
        delete data_.setburstpreamble_param_;
      }
      break;
    }
    case kSetburstversionParam: {
      if (GetArena() == nullptr) {
        delete data_.setburstversion_param_;
      }
      break;
    }
    case kSetdsomcidataParam: {
      if (GetArena() == nullptr) {
        delete data_.setdsomcidata_param_;
      }
      break;
    }
    case kSettodParam: {
      if (GetArena() == nullptr) {
        delete data_.settod_param_;
      }
      break;
    }
    case kStringvalueParam: {
      if (GetArena() == nullptr) {
        delete data_.stringvalue_param_;
      }
      break;
    }
    case kSetpmcontrolParam: {
      if (GetArena() == nullptr) {
        delete data_.setpmcontrol_param_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void paramFields::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.paramFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* paramFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bossopenolt.SetPmdTxdis setpmdtxdis_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpmdtxdis_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.GetPmdsKind getpmdskind_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getpmdskind_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetPort setport_aram = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_setport_aram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetPortKind setportkind_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_setportkind_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetMtuSize setmtusize_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_setmtusize_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetVlan setvlan_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_setvlan_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetDirectionMode setdirectiommode_param = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_setdirectiommode_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.GetDirectionValue getdirectionvalue_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getdirectionvalue_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.IntegerValue integervalue_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_integervalue_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetSdnTable setsdntable_param = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_setsdntable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.GetSdnTable getsdntable_param = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_getsdntable_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetLength setlength_param = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_setlength_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.GetLength getlength_param = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlength_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.OnuCtrl onuctrl_param = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuctrl_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.AddOnuSla addonusla_param = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_addonusla_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.ClearOnuSla clearonusla_param = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_clearonusla_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetOnuAllocid setonuallocid_param = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_setonuallocid_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetOnuVssn setonuvssn_param = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_setonuvssn_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetBurstDelimit setburstdelimit_param = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_setburstdelimit_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetBurstPreamble setburstpreamble_param = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_setburstpreamble_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetBurstVersion setburstversion_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_setburstversion_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetDsOmciData setdsomcidata_param = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_setdsomcidata_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetTod settod_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_settod_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.StringValue stringvalue_param = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_stringvalue_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bossopenolt.SetPmControl setpmcontrol_param = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_setpmcontrol_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* paramFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.paramFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bossopenolt.SetPmdTxdis setpmdtxdis_param = 2;
  if (_internal_has_setpmdtxdis_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::setpmdtxdis_param(this), target, stream);
  }

  // .bossopenolt.GetPmdsKind getpmdskind_param = 3;
  if (_internal_has_getpmdskind_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getpmdskind_param(this), target, stream);
  }

  // .bossopenolt.SetPort setport_aram = 4;
  if (_internal_has_setport_aram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::setport_aram(this), target, stream);
  }

  // .bossopenolt.SetPortKind setportkind_param = 5;
  if (_internal_has_setportkind_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::setportkind_param(this), target, stream);
  }

  // .bossopenolt.SetMtuSize setmtusize_param = 6;
  if (_internal_has_setmtusize_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::setmtusize_param(this), target, stream);
  }

  // .bossopenolt.SetVlan setvlan_param = 7;
  if (_internal_has_setvlan_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::setvlan_param(this), target, stream);
  }

  // .bossopenolt.SetDirectionMode setdirectiommode_param = 8;
  if (_internal_has_setdirectiommode_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::setdirectiommode_param(this), target, stream);
  }

  // .bossopenolt.GetDirectionValue getdirectionvalue_param = 9;
  if (_internal_has_getdirectionvalue_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::getdirectionvalue_param(this), target, stream);
  }

  // .bossopenolt.IntegerValue integervalue_param = 10;
  if (_internal_has_integervalue_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::integervalue_param(this), target, stream);
  }

  // .bossopenolt.SetSdnTable setsdntable_param = 11;
  if (_internal_has_setsdntable_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::setsdntable_param(this), target, stream);
  }

  // .bossopenolt.GetSdnTable getsdntable_param = 12;
  if (_internal_has_getsdntable_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::getsdntable_param(this), target, stream);
  }

  // .bossopenolt.SetLength setlength_param = 13;
  if (_internal_has_setlength_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::setlength_param(this), target, stream);
  }

  // .bossopenolt.GetLength getlength_param = 14;
  if (_internal_has_getlength_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::getlength_param(this), target, stream);
  }

  // .bossopenolt.OnuCtrl onuctrl_param = 15;
  if (_internal_has_onuctrl_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::onuctrl_param(this), target, stream);
  }

  // .bossopenolt.AddOnuSla addonusla_param = 16;
  if (_internal_has_addonusla_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::addonusla_param(this), target, stream);
  }

  // .bossopenolt.ClearOnuSla clearonusla_param = 17;
  if (_internal_has_clearonusla_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::clearonusla_param(this), target, stream);
  }

  // .bossopenolt.SetOnuAllocid setonuallocid_param = 18;
  if (_internal_has_setonuallocid_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::setonuallocid_param(this), target, stream);
  }

  // .bossopenolt.SetOnuVssn setonuvssn_param = 19;
  if (_internal_has_setonuvssn_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::setonuvssn_param(this), target, stream);
  }

  // .bossopenolt.SetBurstDelimit setburstdelimit_param = 20;
  if (_internal_has_setburstdelimit_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::setburstdelimit_param(this), target, stream);
  }

  // .bossopenolt.SetBurstPreamble setburstpreamble_param = 21;
  if (_internal_has_setburstpreamble_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::setburstpreamble_param(this), target, stream);
  }

  // .bossopenolt.SetBurstVersion setburstversion_param = 22;
  if (_internal_has_setburstversion_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::setburstversion_param(this), target, stream);
  }

  // .bossopenolt.SetDsOmciData setdsomcidata_param = 23;
  if (_internal_has_setdsomcidata_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::setdsomcidata_param(this), target, stream);
  }

  // .bossopenolt.SetTod settod_param = 24;
  if (_internal_has_settod_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::settod_param(this), target, stream);
  }

  // .bossopenolt.StringValue stringvalue_param = 25;
  if (_internal_has_stringvalue_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::stringvalue_param(this), target, stream);
  }

  // .bossopenolt.SetPmControl setpmcontrol_param = 26;
  if (_internal_has_setpmcontrol_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::setpmcontrol_param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.paramFields)
  return target;
}

size_t paramFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.paramFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .bossopenolt.SetPmdTxdis setpmdtxdis_param = 2;
    case kSetpmdtxdisParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setpmdtxdis_param_);
      break;
    }
    // .bossopenolt.GetPmdsKind getpmdskind_param = 3;
    case kGetpmdskindParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.getpmdskind_param_);
      break;
    }
    // .bossopenolt.SetPort setport_aram = 4;
    case kSetportAram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setport_aram_);
      break;
    }
    // .bossopenolt.SetPortKind setportkind_param = 5;
    case kSetportkindParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setportkind_param_);
      break;
    }
    // .bossopenolt.SetMtuSize setmtusize_param = 6;
    case kSetmtusizeParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setmtusize_param_);
      break;
    }
    // .bossopenolt.SetVlan setvlan_param = 7;
    case kSetvlanParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setvlan_param_);
      break;
    }
    // .bossopenolt.SetDirectionMode setdirectiommode_param = 8;
    case kSetdirectiommodeParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setdirectiommode_param_);
      break;
    }
    // .bossopenolt.GetDirectionValue getdirectionvalue_param = 9;
    case kGetdirectionvalueParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.getdirectionvalue_param_);
      break;
    }
    // .bossopenolt.IntegerValue integervalue_param = 10;
    case kIntegervalueParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.integervalue_param_);
      break;
    }
    // .bossopenolt.SetSdnTable setsdntable_param = 11;
    case kSetsdntableParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setsdntable_param_);
      break;
    }
    // .bossopenolt.GetSdnTable getsdntable_param = 12;
    case kGetsdntableParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.getsdntable_param_);
      break;
    }
    // .bossopenolt.SetLength setlength_param = 13;
    case kSetlengthParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setlength_param_);
      break;
    }
    // .bossopenolt.GetLength getlength_param = 14;
    case kGetlengthParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.getlength_param_);
      break;
    }
    // .bossopenolt.OnuCtrl onuctrl_param = 15;
    case kOnuctrlParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.onuctrl_param_);
      break;
    }
    // .bossopenolt.AddOnuSla addonusla_param = 16;
    case kAddonuslaParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.addonusla_param_);
      break;
    }
    // .bossopenolt.ClearOnuSla clearonusla_param = 17;
    case kClearonuslaParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.clearonusla_param_);
      break;
    }
    // .bossopenolt.SetOnuAllocid setonuallocid_param = 18;
    case kSetonuallocidParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setonuallocid_param_);
      break;
    }
    // .bossopenolt.SetOnuVssn setonuvssn_param = 19;
    case kSetonuvssnParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setonuvssn_param_);
      break;
    }
    // .bossopenolt.SetBurstDelimit setburstdelimit_param = 20;
    case kSetburstdelimitParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setburstdelimit_param_);
      break;
    }
    // .bossopenolt.SetBurstPreamble setburstpreamble_param = 21;
    case kSetburstpreambleParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setburstpreamble_param_);
      break;
    }
    // .bossopenolt.SetBurstVersion setburstversion_param = 22;
    case kSetburstversionParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setburstversion_param_);
      break;
    }
    // .bossopenolt.SetDsOmciData setdsomcidata_param = 23;
    case kSetdsomcidataParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setdsomcidata_param_);
      break;
    }
    // .bossopenolt.SetTod settod_param = 24;
    case kSettodParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.settod_param_);
      break;
    }
    // .bossopenolt.StringValue stringvalue_param = 25;
    case kStringvalueParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.stringvalue_param_);
      break;
    }
    // .bossopenolt.SetPmControl setpmcontrol_param = 26;
    case kSetpmcontrolParam: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.setpmcontrol_param_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void paramFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.paramFields)
  GOOGLE_DCHECK_NE(&from, this);
  const paramFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<paramFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.paramFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.paramFields)
    MergeFrom(*source);
  }
}

void paramFields::MergeFrom(const paramFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.paramFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kSetpmdtxdisParam: {
      _internal_mutable_setpmdtxdis_param()->::bossopenolt::SetPmdTxdis::MergeFrom(from._internal_setpmdtxdis_param());
      break;
    }
    case kGetpmdskindParam: {
      _internal_mutable_getpmdskind_param()->::bossopenolt::GetPmdsKind::MergeFrom(from._internal_getpmdskind_param());
      break;
    }
    case kSetportAram: {
      _internal_mutable_setport_aram()->::bossopenolt::SetPort::MergeFrom(from._internal_setport_aram());
      break;
    }
    case kSetportkindParam: {
      _internal_mutable_setportkind_param()->::bossopenolt::SetPortKind::MergeFrom(from._internal_setportkind_param());
      break;
    }
    case kSetmtusizeParam: {
      _internal_mutable_setmtusize_param()->::bossopenolt::SetMtuSize::MergeFrom(from._internal_setmtusize_param());
      break;
    }
    case kSetvlanParam: {
      _internal_mutable_setvlan_param()->::bossopenolt::SetVlan::MergeFrom(from._internal_setvlan_param());
      break;
    }
    case kSetdirectiommodeParam: {
      _internal_mutable_setdirectiommode_param()->::bossopenolt::SetDirectionMode::MergeFrom(from._internal_setdirectiommode_param());
      break;
    }
    case kGetdirectionvalueParam: {
      _internal_mutable_getdirectionvalue_param()->::bossopenolt::GetDirectionValue::MergeFrom(from._internal_getdirectionvalue_param());
      break;
    }
    case kIntegervalueParam: {
      _internal_mutable_integervalue_param()->::bossopenolt::IntegerValue::MergeFrom(from._internal_integervalue_param());
      break;
    }
    case kSetsdntableParam: {
      _internal_mutable_setsdntable_param()->::bossopenolt::SetSdnTable::MergeFrom(from._internal_setsdntable_param());
      break;
    }
    case kGetsdntableParam: {
      _internal_mutable_getsdntable_param()->::bossopenolt::GetSdnTable::MergeFrom(from._internal_getsdntable_param());
      break;
    }
    case kSetlengthParam: {
      _internal_mutable_setlength_param()->::bossopenolt::SetLength::MergeFrom(from._internal_setlength_param());
      break;
    }
    case kGetlengthParam: {
      _internal_mutable_getlength_param()->::bossopenolt::GetLength::MergeFrom(from._internal_getlength_param());
      break;
    }
    case kOnuctrlParam: {
      _internal_mutable_onuctrl_param()->::bossopenolt::OnuCtrl::MergeFrom(from._internal_onuctrl_param());
      break;
    }
    case kAddonuslaParam: {
      _internal_mutable_addonusla_param()->::bossopenolt::AddOnuSla::MergeFrom(from._internal_addonusla_param());
      break;
    }
    case kClearonuslaParam: {
      _internal_mutable_clearonusla_param()->::bossopenolt::ClearOnuSla::MergeFrom(from._internal_clearonusla_param());
      break;
    }
    case kSetonuallocidParam: {
      _internal_mutable_setonuallocid_param()->::bossopenolt::SetOnuAllocid::MergeFrom(from._internal_setonuallocid_param());
      break;
    }
    case kSetonuvssnParam: {
      _internal_mutable_setonuvssn_param()->::bossopenolt::SetOnuVssn::MergeFrom(from._internal_setonuvssn_param());
      break;
    }
    case kSetburstdelimitParam: {
      _internal_mutable_setburstdelimit_param()->::bossopenolt::SetBurstDelimit::MergeFrom(from._internal_setburstdelimit_param());
      break;
    }
    case kSetburstpreambleParam: {
      _internal_mutable_setburstpreamble_param()->::bossopenolt::SetBurstPreamble::MergeFrom(from._internal_setburstpreamble_param());
      break;
    }
    case kSetburstversionParam: {
      _internal_mutable_setburstversion_param()->::bossopenolt::SetBurstVersion::MergeFrom(from._internal_setburstversion_param());
      break;
    }
    case kSetdsomcidataParam: {
      _internal_mutable_setdsomcidata_param()->::bossopenolt::SetDsOmciData::MergeFrom(from._internal_setdsomcidata_param());
      break;
    }
    case kSettodParam: {
      _internal_mutable_settod_param()->::bossopenolt::SetTod::MergeFrom(from._internal_settod_param());
      break;
    }
    case kStringvalueParam: {
      _internal_mutable_stringvalue_param()->::bossopenolt::StringValue::MergeFrom(from._internal_stringvalue_param());
      break;
    }
    case kSetpmcontrolParam: {
      _internal_mutable_setpmcontrol_param()->::bossopenolt::SetPmControl::MergeFrom(from._internal_setpmcontrol_param());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void paramFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.paramFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void paramFields::CopyFrom(const paramFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.paramFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool paramFields::IsInitialized() const {
  return true;
}

void paramFields::InternalSwap(paramFields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata paramFields::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetPmControl::_Internal {
 public:
};

SetPmControl::SetPmControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetPmControl)
}
SetPmControl::SetPmControl(const SetPmControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&onu_id_, &from.onu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&aware_time_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(aware_time_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetPmControl)
}

void SetPmControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&onu_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aware_time_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(aware_time_));
}

SetPmControl::~SetPmControl() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetPmControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPmControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPmControl::ArenaDtor(void* object) {
  SetPmControl* _this = reinterpret_cast< SetPmControl* >(object);
  (void)_this;
}
void SetPmControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPmControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPmControl::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetPmControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&onu_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aware_time_) -
      reinterpret_cast<char*>(&onu_id_)) + sizeof(aware_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPmControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          power_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 aware_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          aware_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPmControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetPmControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onu_id(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // int32 power_time = 3;
  if (this->power_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_power_time(), target);
  }

  // int32 aware_time = 4;
  if (this->aware_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_aware_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetPmControl)
  return target;
}

size_t SetPmControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetPmControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 power_time = 3;
  if (this->power_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power_time());
  }

  // int32 aware_time = 4;
  if (this->aware_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aware_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPmControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetPmControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPmControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPmControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetPmControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetPmControl)
    MergeFrom(*source);
  }
}

void SetPmControl::MergeFrom(const SetPmControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetPmControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.power_time() != 0) {
    _internal_set_power_time(from._internal_power_time());
  }
  if (from.aware_time() != 0) {
    _internal_set_aware_time(from._internal_aware_time());
  }
}

void SetPmControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetPmControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPmControl::CopyFrom(const SetPmControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetPmControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPmControl::IsInitialized() const {
  return true;
}

void SetPmControl::InternalSwap(SetPmControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPmControl, aware_time_)
      + sizeof(SetPmControl::aware_time_)
      - PROTOBUF_FIELD_OFFSET(SetPmControl, onu_id_)>(
          reinterpret_cast<char*>(&onu_id_),
          reinterpret_cast<char*>(&other->onu_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPmControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetTod::_Internal {
 public:
};

SetTod::SetTod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetTod)
}
SetTod::SetTod(const SetTod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetTod)
}

void SetTod::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(time_));
}

SetTod::~SetTod() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetTod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetTod::ArenaDtor(void* object) {
  SetTod* _this = reinterpret_cast< SetTod* >(object);
  (void)_this;
}
void SetTod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetTod::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetTod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetTod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetTod)
  return target;
}

size_t SetTod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetTod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetTod)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetTod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetTod)
    MergeFrom(*source);
  }
}

void SetTod::MergeFrom(const SetTod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetTod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void SetTod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetTod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTod::CopyFrom(const SetTod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetTod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTod::IsInitialized() const {
  return true;
}

void SetTod::InternalSwap(SetTod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTod, time_)
      + sizeof(SetTod::time_)
      - PROTOBUF_FIELD_OFFSET(SetTod, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetDsOmciData::_Internal {
 public:
};

SetDsOmciData::SetDsOmciData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetDsOmciData)
}
SetDsOmciData::SetDsOmciData(const SetDsOmciData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  control_ = from.control_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetDsOmciData)
}

void SetDsOmciData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
control_ = 0;
}

SetDsOmciData::~SetDsOmciData() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetDsOmciData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetDsOmciData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetDsOmciData::ArenaDtor(void* object) {
  SetDsOmciData* _this = reinterpret_cast< SetDsOmciData* >(object);
  (void)_this;
}
void SetDsOmciData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDsOmciData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDsOmciData::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetDsOmciData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  control_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDsOmciData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetDsOmciData.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDsOmciData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetDsOmciData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 control = 1;
  if (this->control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_control(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetDsOmciData.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetDsOmciData)
  return target;
}

size_t SetDsOmciData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetDsOmciData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // int32 control = 1;
  if (this->control() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_control());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDsOmciData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetDsOmciData)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDsOmciData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDsOmciData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetDsOmciData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetDsOmciData)
    MergeFrom(*source);
  }
}

void SetDsOmciData::MergeFrom(const SetDsOmciData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetDsOmciData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.control() != 0) {
    _internal_set_control(from._internal_control());
  }
}

void SetDsOmciData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetDsOmciData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDsOmciData::CopyFrom(const SetDsOmciData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetDsOmciData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDsOmciData::IsInitialized() const {
  return true;
}

void SetDsOmciData::InternalSwap(SetDsOmciData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(control_, other->control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDsOmciData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetBurstVersion::_Internal {
 public:
};

SetBurstVersion::SetBurstVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetBurstVersion)
}
SetBurstVersion::SetBurstVersion(const SetBurstVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  pontag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pontag().empty()) {
    pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pontag(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetBurstVersion)
}

void SetBurstVersion::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pontag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
index_ = 0;
}

SetBurstVersion::~SetBurstVersion() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetBurstVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetBurstVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pontag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetBurstVersion::ArenaDtor(void* object) {
  SetBurstVersion* _this = reinterpret_cast< SetBurstVersion* >(object);
  (void)_this;
}
void SetBurstVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBurstVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBurstVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetBurstVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  pontag_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBurstVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetBurstVersion.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pontag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pontag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetBurstVersion.pontag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBurstVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetBurstVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetBurstVersion.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // string pontag = 3;
  if (this->pontag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pontag().data(), static_cast<int>(this->_internal_pontag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetBurstVersion.pontag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pontag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetBurstVersion)
  return target;
}

size_t SetBurstVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetBurstVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string pontag = 3;
  if (this->pontag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pontag());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBurstVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetBurstVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBurstVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetBurstVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetBurstVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetBurstVersion)
    MergeFrom(*source);
  }
}

void SetBurstVersion::MergeFrom(const SetBurstVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetBurstVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.pontag().size() > 0) {
    _internal_set_pontag(from._internal_pontag());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void SetBurstVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetBurstVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBurstVersion::CopyFrom(const SetBurstVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetBurstVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBurstVersion::IsInitialized() const {
  return true;
}

void SetBurstVersion::InternalSwap(SetBurstVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pontag_.Swap(&other->pontag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBurstVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetBurstPreamble::_Internal {
 public:
};

SetBurstPreamble::SetBurstPreamble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetBurstPreamble)
}
SetBurstPreamble::SetBurstPreamble(const SetBurstPreamble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  repeat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repeat().empty()) {
    repeat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_repeat(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetBurstPreamble)
}

void SetBurstPreamble::SharedCtor() {
repeat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetBurstPreamble::~SetBurstPreamble() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetBurstPreamble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetBurstPreamble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  repeat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetBurstPreamble::ArenaDtor(void* object) {
  SetBurstPreamble* _this = reinterpret_cast< SetBurstPreamble* >(object);
  (void)_this;
}
void SetBurstPreamble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBurstPreamble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBurstPreamble::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetBurstPreamble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBurstPreamble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string repeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_repeat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetBurstPreamble.repeat"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBurstPreamble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetBurstPreamble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repeat = 1;
  if (this->repeat().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repeat().data(), static_cast<int>(this->_internal_repeat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetBurstPreamble.repeat");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetBurstPreamble)
  return target;
}

size_t SetBurstPreamble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetBurstPreamble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repeat = 1;
  if (this->repeat().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repeat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBurstPreamble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetBurstPreamble)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBurstPreamble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetBurstPreamble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetBurstPreamble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetBurstPreamble)
    MergeFrom(*source);
  }
}

void SetBurstPreamble::MergeFrom(const SetBurstPreamble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetBurstPreamble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.repeat().size() > 0) {
    _internal_set_repeat(from._internal_repeat());
  }
}

void SetBurstPreamble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetBurstPreamble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBurstPreamble::CopyFrom(const SetBurstPreamble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetBurstPreamble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBurstPreamble::IsInitialized() const {
  return true;
}

void SetBurstPreamble::InternalSwap(SetBurstPreamble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  repeat_.Swap(&other->repeat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBurstPreamble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetBurstDelimit::_Internal {
 public:
};

SetBurstDelimit::SetBurstDelimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetBurstDelimit)
}
SetBurstDelimit::SetBurstDelimit(const SetBurstDelimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delimiter().empty()) {
    delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delimiter(), 
      GetArena());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetBurstDelimit)
}

void SetBurstDelimit::SharedCtor() {
delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
length_ = 0;
}

SetBurstDelimit::~SetBurstDelimit() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetBurstDelimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetBurstDelimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  delimiter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetBurstDelimit::ArenaDtor(void* object) {
  SetBurstDelimit* _this = reinterpret_cast< SetBurstDelimit* >(object);
  (void)_this;
}
void SetBurstDelimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBurstDelimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetBurstDelimit::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetBurstDelimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delimiter_.ClearToEmpty();
  length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBurstDelimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delimiter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_delimiter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetBurstDelimit.delimiter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBurstDelimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetBurstDelimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_length(), target);
  }

  // string delimiter = 2;
  if (this->delimiter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delimiter().data(), static_cast<int>(this->_internal_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetBurstDelimit.delimiter");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_delimiter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetBurstDelimit)
  return target;
}

size_t SetBurstDelimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetBurstDelimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delimiter = 2;
  if (this->delimiter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delimiter());
  }

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBurstDelimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetBurstDelimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBurstDelimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetBurstDelimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetBurstDelimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetBurstDelimit)
    MergeFrom(*source);
  }
}

void SetBurstDelimit::MergeFrom(const SetBurstDelimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetBurstDelimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delimiter().size() > 0) {
    _internal_set_delimiter(from._internal_delimiter());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void SetBurstDelimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetBurstDelimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBurstDelimit::CopyFrom(const SetBurstDelimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetBurstDelimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBurstDelimit::IsInitialized() const {
  return true;
}

void SetBurstDelimit::InternalSwap(SetBurstDelimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  delimiter_.Swap(&other->delimiter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBurstDelimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetOnuVssn::_Internal {
 public:
};

SetOnuVssn::SetOnuVssn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetOnuVssn)
}
SetOnuVssn::SetOnuVssn(const SetOnuVssn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vssn().empty()) {
    vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vssn(), 
      GetArena());
  }
  onu_id_ = from.onu_id_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetOnuVssn)
}

void SetOnuVssn::SharedCtor() {
vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onu_id_ = 0;
}

SetOnuVssn::~SetOnuVssn() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetOnuVssn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetOnuVssn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vssn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetOnuVssn::ArenaDtor(void* object) {
  SetOnuVssn* _this = reinterpret_cast< SetOnuVssn* >(object);
  (void)_this;
}
void SetOnuVssn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetOnuVssn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetOnuVssn::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetOnuVssn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vssn_.ClearToEmpty();
  onu_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOnuVssn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vssn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vssn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetOnuVssn.vssn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOnuVssn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetOnuVssn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onu_id(), target);
  }

  // string vssn = 2;
  if (this->vssn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vssn().data(), static_cast<int>(this->_internal_vssn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetOnuVssn.vssn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vssn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetOnuVssn)
  return target;
}

size_t SetOnuVssn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetOnuVssn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vssn = 2;
  if (this->vssn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vssn());
  }

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetOnuVssn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetOnuVssn)
  GOOGLE_DCHECK_NE(&from, this);
  const SetOnuVssn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetOnuVssn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetOnuVssn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetOnuVssn)
    MergeFrom(*source);
  }
}

void SetOnuVssn::MergeFrom(const SetOnuVssn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetOnuVssn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vssn().size() > 0) {
    _internal_set_vssn(from._internal_vssn());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void SetOnuVssn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetOnuVssn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOnuVssn::CopyFrom(const SetOnuVssn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetOnuVssn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOnuVssn::IsInitialized() const {
  return true;
}

void SetOnuVssn::InternalSwap(SetOnuVssn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vssn_.Swap(&other->vssn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(onu_id_, other->onu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOnuVssn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetOnuAllocid::_Internal {
 public:
};

SetOnuAllocid::SetOnuAllocid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetOnuAllocid)
}
SetOnuAllocid::SetOnuAllocid(const SetOnuAllocid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alloc_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alloc_id().empty()) {
    alloc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alloc_id(), 
      GetArena());
  }
  onu_id_ = from.onu_id_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetOnuAllocid)
}

void SetOnuAllocid::SharedCtor() {
alloc_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onu_id_ = 0;
}

SetOnuAllocid::~SetOnuAllocid() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetOnuAllocid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetOnuAllocid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  alloc_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetOnuAllocid::ArenaDtor(void* object) {
  SetOnuAllocid* _this = reinterpret_cast< SetOnuAllocid* >(object);
  (void)_this;
}
void SetOnuAllocid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetOnuAllocid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetOnuAllocid::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetOnuAllocid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alloc_id_.ClearToEmpty();
  onu_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetOnuAllocid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alloc_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alloc_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetOnuAllocid.alloc_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetOnuAllocid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetOnuAllocid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onu_id(), target);
  }

  // string alloc_id = 2;
  if (this->alloc_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alloc_id().data(), static_cast<int>(this->_internal_alloc_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetOnuAllocid.alloc_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alloc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetOnuAllocid)
  return target;
}

size_t SetOnuAllocid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetOnuAllocid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alloc_id = 2;
  if (this->alloc_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alloc_id());
  }

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetOnuAllocid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetOnuAllocid)
  GOOGLE_DCHECK_NE(&from, this);
  const SetOnuAllocid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetOnuAllocid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetOnuAllocid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetOnuAllocid)
    MergeFrom(*source);
  }
}

void SetOnuAllocid::MergeFrom(const SetOnuAllocid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetOnuAllocid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alloc_id().size() > 0) {
    _internal_set_alloc_id(from._internal_alloc_id());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void SetOnuAllocid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetOnuAllocid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOnuAllocid::CopyFrom(const SetOnuAllocid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetOnuAllocid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOnuAllocid::IsInitialized() const {
  return true;
}

void SetOnuAllocid::InternalSwap(SetOnuAllocid* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alloc_id_.Swap(&other->alloc_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(onu_id_, other->onu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetOnuAllocid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClearOnuSla::_Internal {
 public:
};

ClearOnuSla::ClearOnuSla(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.ClearOnuSla)
}
ClearOnuSla::ClearOnuSla(const ClearOnuSla& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&onu_id_, &from.onu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcont_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(tcont_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.ClearOnuSla)
}

void ClearOnuSla::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&onu_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tcont_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(tcont_));
}

ClearOnuSla::~ClearOnuSla() {
  // @@protoc_insertion_point(destructor:bossopenolt.ClearOnuSla)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearOnuSla::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClearOnuSla::ArenaDtor(void* object) {
  ClearOnuSla* _this = reinterpret_cast< ClearOnuSla* >(object);
  (void)_this;
}
void ClearOnuSla::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearOnuSla::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearOnuSla::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.ClearOnuSla)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&onu_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcont_) -
      reinterpret_cast<char*>(&onu_id_)) + sizeof(tcont_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearOnuSla::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tcont = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tcont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearOnuSla::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.ClearOnuSla)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onu_id(), target);
  }

  // int32 tcont = 2;
  if (this->tcont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tcont(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.ClearOnuSla)
  return target;
}

size_t ClearOnuSla::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.ClearOnuSla)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  // int32 tcont = 2;
  if (this->tcont() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tcont());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearOnuSla::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.ClearOnuSla)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearOnuSla* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearOnuSla>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.ClearOnuSla)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.ClearOnuSla)
    MergeFrom(*source);
  }
}

void ClearOnuSla::MergeFrom(const ClearOnuSla& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.ClearOnuSla)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
  if (from.tcont() != 0) {
    _internal_set_tcont(from._internal_tcont());
  }
}

void ClearOnuSla::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.ClearOnuSla)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearOnuSla::CopyFrom(const ClearOnuSla& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.ClearOnuSla)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearOnuSla::IsInitialized() const {
  return true;
}

void ClearOnuSla::InternalSwap(ClearOnuSla* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearOnuSla, tcont_)
      + sizeof(ClearOnuSla::tcont_)
      - PROTOBUF_FIELD_OFFSET(ClearOnuSla, onu_id_)>(
          reinterpret_cast<char*>(&onu_id_),
          reinterpret_cast<char*>(&other->onu_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearOnuSla::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddOnuSla::_Internal {
 public:
};

AddOnuSla::AddOnuSla(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.AddOnuSla)
}
AddOnuSla::AddOnuSla(const AddOnuSla& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&onu_id_, &from.onu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&absur_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(absur_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.AddOnuSla)
}

void AddOnuSla::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&onu_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&absur_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(absur_));
}

AddOnuSla::~AddOnuSla() {
  // @@protoc_insertion_point(destructor:bossopenolt.AddOnuSla)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddOnuSla::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddOnuSla::ArenaDtor(void* object) {
  AddOnuSla* _this = reinterpret_cast< AddOnuSla* >(object);
  (void)_this;
}
void AddOnuSla::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddOnuSla::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddOnuSla::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.AddOnuSla)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&onu_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absur_) -
      reinterpret_cast<char*>(&onu_id_)) + sizeof(absur_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddOnuSla::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tcont = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tcont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 si = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          si_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 abmin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          abmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 absur = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          absur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddOnuSla::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.AddOnuSla)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onu_id(), target);
  }

  // int32 tcont = 2;
  if (this->tcont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_tcont(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 si = 4;
  if (this->si() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_si(), target);
  }

  // int32 abmin = 5;
  if (this->abmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_abmin(), target);
  }

  // int32 absur = 6;
  if (this->absur() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_absur(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.AddOnuSla)
  return target;
}

size_t AddOnuSla::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.AddOnuSla)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  // int32 tcont = 2;
  if (this->tcont() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tcont());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 si = 4;
  if (this->si() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_si());
  }

  // int32 abmin = 5;
  if (this->abmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abmin());
  }

  // int32 absur = 6;
  if (this->absur() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_absur());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddOnuSla::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.AddOnuSla)
  GOOGLE_DCHECK_NE(&from, this);
  const AddOnuSla* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddOnuSla>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.AddOnuSla)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.AddOnuSla)
    MergeFrom(*source);
  }
}

void AddOnuSla::MergeFrom(const AddOnuSla& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.AddOnuSla)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
  if (from.tcont() != 0) {
    _internal_set_tcont(from._internal_tcont());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.si() != 0) {
    _internal_set_si(from._internal_si());
  }
  if (from.abmin() != 0) {
    _internal_set_abmin(from._internal_abmin());
  }
  if (from.absur() != 0) {
    _internal_set_absur(from._internal_absur());
  }
}

void AddOnuSla::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.AddOnuSla)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOnuSla::CopyFrom(const AddOnuSla& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.AddOnuSla)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOnuSla::IsInitialized() const {
  return true;
}

void AddOnuSla::InternalSwap(AddOnuSla* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddOnuSla, absur_)
      + sizeof(AddOnuSla::absur_)
      - PROTOBUF_FIELD_OFFSET(AddOnuSla, onu_id_)>(
          reinterpret_cast<char*>(&onu_id_),
          reinterpret_cast<char*>(&other->onu_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddOnuSla::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetPmdTxdis::_Internal {
 public:
};

SetPmdTxdis::SetPmdTxdis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetPmdTxdis)
}
SetPmdTxdis::SetPmdTxdis(const SetPmdTxdis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_type_, &from.port_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_no_) -
    reinterpret_cast<char*>(&port_type_)) + sizeof(port_no_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetPmdTxdis)
}

void SetPmdTxdis::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_no_) -
    reinterpret_cast<char*>(&port_type_)) + sizeof(port_no_));
}

SetPmdTxdis::~SetPmdTxdis() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetPmdTxdis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPmdTxdis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPmdTxdis::ArenaDtor(void* object) {
  SetPmdTxdis* _this = reinterpret_cast< SetPmdTxdis* >(object);
  (void)_this;
}
void SetPmdTxdis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPmdTxdis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPmdTxdis::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetPmdTxdis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_no_) -
      reinterpret_cast<char*>(&port_type_)) + sizeof(port_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPmdTxdis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 port_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port_no = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPmdTxdis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetPmdTxdis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_type = 1;
  if (this->port_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_type(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // int32 port_no = 3;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetPmdTxdis)
  return target;
}

size_t SetPmdTxdis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetPmdTxdis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port_type = 1;
  if (this->port_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_type());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 port_no = 3;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPmdTxdis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetPmdTxdis)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPmdTxdis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPmdTxdis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetPmdTxdis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetPmdTxdis)
    MergeFrom(*source);
  }
}

void SetPmdTxdis::MergeFrom(const SetPmdTxdis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetPmdTxdis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_type() != 0) {
    _internal_set_port_type(from._internal_port_type());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void SetPmdTxdis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetPmdTxdis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPmdTxdis::CopyFrom(const SetPmdTxdis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetPmdTxdis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPmdTxdis::IsInitialized() const {
  return true;
}

void SetPmdTxdis::InternalSwap(SetPmdTxdis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPmdTxdis, port_no_)
      + sizeof(SetPmdTxdis::port_no_)
      - PROTOBUF_FIELD_OFFSET(SetPmdTxdis, port_type_)>(
          reinterpret_cast<char*>(&port_type_),
          reinterpret_cast<char*>(&other->port_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPmdTxdis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPmdsKind::_Internal {
 public:
};

GetPmdsKind::GetPmdsKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.GetPmdsKind)
}
GetPmdsKind::GetPmdsKind(const GetPmdsKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&port_type_, &from.port_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_no_) -
    reinterpret_cast<char*>(&port_type_)) + sizeof(port_no_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.GetPmdsKind)
}

void GetPmdsKind::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_no_) -
    reinterpret_cast<char*>(&port_type_)) + sizeof(port_no_));
}

GetPmdsKind::~GetPmdsKind() {
  // @@protoc_insertion_point(destructor:bossopenolt.GetPmdsKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPmdsKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPmdsKind::ArenaDtor(void* object) {
  GetPmdsKind* _this = reinterpret_cast< GetPmdsKind* >(object);
  (void)_this;
}
void GetPmdsKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPmdsKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPmdsKind::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.GetPmdsKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&port_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_no_) -
      reinterpret_cast<char*>(&port_type_)) + sizeof(port_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPmdsKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 port_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPmdsKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.GetPmdsKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_type = 1;
  if (this->port_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_type(), target);
  }

  // int32 port_no = 2;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.GetPmdsKind)
  return target;
}

size_t GetPmdsKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.GetPmdsKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port_type = 1;
  if (this->port_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_type());
  }

  // int32 port_no = 2;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPmdsKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.GetPmdsKind)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPmdsKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPmdsKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.GetPmdsKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.GetPmdsKind)
    MergeFrom(*source);
  }
}

void GetPmdsKind::MergeFrom(const GetPmdsKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.GetPmdsKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_type() != 0) {
    _internal_set_port_type(from._internal_port_type());
  }
  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void GetPmdsKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.GetPmdsKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPmdsKind::CopyFrom(const GetPmdsKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.GetPmdsKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPmdsKind::IsInitialized() const {
  return true;
}

void GetPmdsKind::InternalSwap(GetPmdsKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPmdsKind, port_no_)
      + sizeof(GetPmdsKind::port_no_)
      - PROTOBUF_FIELD_OFFSET(GetPmdsKind, port_type_)>(
          reinterpret_cast<char*>(&port_type_),
          reinterpret_cast<char*>(&other->port_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPmdsKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetPort::_Internal {
 public:
};

SetPort::SetPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetPort)
}
SetPort::SetPort(const SetPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_no_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(port_no_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetPort)
}

void SetPort::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_no_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(port_no_));
}

SetPort::~SetPort() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPort::ArenaDtor(void* object) {
  SetPort* _this = reinterpret_cast< SetPort* >(object);
  (void)_this;
}
void SetPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPort::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_no_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(port_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // int32 port_no = 2;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetPort)
  return target;
}

size_t SetPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 port_no = 2;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetPort)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetPort)
    MergeFrom(*source);
  }
}

void SetPort::MergeFrom(const SetPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void SetPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPort::CopyFrom(const SetPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPort::IsInitialized() const {
  return true;
}

void SetPort::InternalSwap(SetPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPort, port_no_)
      + sizeof(SetPort::port_no_)
      - PROTOBUF_FIELD_OFFSET(SetPort, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetPortKind::_Internal {
 public:
};

SetPortKind::SetPortKind(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetPortKind)
}
SetPortKind::SetPortKind(const SetPortKind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_no_ = from.port_no_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetPortKind)
}

void SetPortKind::SharedCtor() {
port_no_ = 0;
}

SetPortKind::~SetPortKind() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetPortKind)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPortKind::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPortKind::ArenaDtor(void* object) {
  SetPortKind* _this = reinterpret_cast< SetPortKind* >(object);
  (void)_this;
}
void SetPortKind::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPortKind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetPortKind::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetPortKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPortKind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 port_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPortKind::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetPortKind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetPortKind)
  return target;
}

size_t SetPortKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetPortKind)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPortKind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetPortKind)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPortKind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPortKind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetPortKind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetPortKind)
    MergeFrom(*source);
  }
}

void SetPortKind::MergeFrom(const SetPortKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetPortKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void SetPortKind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetPortKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPortKind::CopyFrom(const SetPortKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetPortKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPortKind::IsInitialized() const {
  return true;
}

void SetPortKind::InternalSwap(SetPortKind* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(port_no_, other->port_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPortKind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetMtuSize::_Internal {
 public:
};

SetMtuSize::SetMtuSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetMtuSize)
}
SetMtuSize::SetMtuSize(const SetMtuSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mtu_size_ = from.mtu_size_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetMtuSize)
}

void SetMtuSize::SharedCtor() {
mtu_size_ = 0;
}

SetMtuSize::~SetMtuSize() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetMtuSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetMtuSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetMtuSize::ArenaDtor(void* object) {
  SetMtuSize* _this = reinterpret_cast< SetMtuSize* >(object);
  (void)_this;
}
void SetMtuSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMtuSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMtuSize::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetMtuSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtu_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMtuSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtu_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mtu_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMtuSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetMtuSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtu_size = 2;
  if (this->mtu_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtu_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetMtuSize)
  return target;
}

size_t SetMtuSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetMtuSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mtu_size = 2;
  if (this->mtu_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtu_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMtuSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetMtuSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMtuSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMtuSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetMtuSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetMtuSize)
    MergeFrom(*source);
  }
}

void SetMtuSize::MergeFrom(const SetMtuSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetMtuSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mtu_size() != 0) {
    _internal_set_mtu_size(from._internal_mtu_size());
  }
}

void SetMtuSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetMtuSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMtuSize::CopyFrom(const SetMtuSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetMtuSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMtuSize::IsInitialized() const {
  return true;
}

void SetMtuSize::InternalSwap(SetMtuSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mtu_size_, other->mtu_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMtuSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetVlan::_Internal {
 public:
};

SetVlan::SetVlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetVlan)
}
SetVlan::SetVlan(const SetVlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&pbit_) -
    reinterpret_cast<char*>(&action_)) + sizeof(pbit_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetVlan)
}

void SetVlan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pbit_) -
    reinterpret_cast<char*>(&action_)) + sizeof(pbit_));
}

SetVlan::~SetVlan() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetVlan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetVlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetVlan::ArenaDtor(void* object) {
  SetVlan* _this = reinterpret_cast< SetVlan* >(object);
  (void)_this;
}
void SetVlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetVlan::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetVlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbit_) -
      reinterpret_cast<char*>(&action_)) + sizeof(pbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pbit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetVlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 action = 2;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // int32 vid = 3;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vid(), target);
  }

  // int32 pbit = 4;
  if (this->pbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetVlan)
  return target;
}

size_t SetVlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetVlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // int32 vid = 3;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // int32 pbit = 4;
  if (this->pbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pbit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVlan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetVlan)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVlan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetVlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetVlan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetVlan)
    MergeFrom(*source);
  }
}

void SetVlan::MergeFrom(const SetVlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetVlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.pbit() != 0) {
    _internal_set_pbit(from._internal_pbit());
  }
}

void SetVlan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetVlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVlan::CopyFrom(const SetVlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetVlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVlan::IsInitialized() const {
  return true;
}

void SetVlan::InternalSwap(SetVlan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetVlan, pbit_)
      + sizeof(SetVlan::pbit_)
      - PROTOBUF_FIELD_OFFSET(SetVlan, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVlan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetSdnTable::_Internal {
 public:
};

SetSdnTable::SetSdnTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetSdnTable)
}
SetSdnTable::SetSdnTable(const SetSdnTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  port_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port_id().empty()) {
    port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port_id(), 
      GetArena());
  }
  ::memcpy(&vid_, &from.vid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pbit_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(pbit_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetSdnTable)
}

void SetSdnTable::SharedCtor() {
port_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pbit_) -
    reinterpret_cast<char*>(&vid_)) + sizeof(pbit_));
}

SetSdnTable::~SetSdnTable() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetSdnTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetSdnTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  port_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetSdnTable::ArenaDtor(void* object) {
  SetSdnTable* _this = reinterpret_cast< SetSdnTable* >(object);
  (void)_this;
}
void SetSdnTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetSdnTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetSdnTable::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetSdnTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_id_.ClearToEmpty();
  ::memset(&vid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbit_) -
      reinterpret_cast<char*>(&vid_)) + sizeof(pbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetSdnTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string port_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SetSdnTable.port_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pbit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSdnTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetSdnTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1;
  if (this->port_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port_id().data(), static_cast<int>(this->_internal_port_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SetSdnTable.port_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_port_id(), target);
  }

  // int32 vid = 2;
  if (this->vid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vid(), target);
  }

  // int32 pbit = 3;
  if (this->pbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetSdnTable)
  return target;
}

size_t SetSdnTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetSdnTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1;
  if (this->port_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port_id());
  }

  // int32 vid = 2;
  if (this->vid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vid());
  }

  // int32 pbit = 3;
  if (this->pbit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pbit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSdnTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetSdnTable)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSdnTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSdnTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetSdnTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetSdnTable)
    MergeFrom(*source);
  }
}

void SetSdnTable::MergeFrom(const SetSdnTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetSdnTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.port_id().size() > 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  if (from.vid() != 0) {
    _internal_set_vid(from._internal_vid());
  }
  if (from.pbit() != 0) {
    _internal_set_pbit(from._internal_pbit());
  }
}

void SetSdnTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetSdnTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSdnTable::CopyFrom(const SetSdnTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetSdnTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSdnTable::IsInitialized() const {
  return true;
}

void SetSdnTable::InternalSwap(SetSdnTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  port_id_.Swap(&other->port_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetSdnTable, pbit_)
      + sizeof(SetSdnTable::pbit_)
      - PROTOBUF_FIELD_OFFSET(SetSdnTable, vid_)>(
          reinterpret_cast<char*>(&vid_),
          reinterpret_cast<char*>(&other->vid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSdnTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetDirectionMode::_Internal {
 public:
};

SetDirectionMode::SetDirectionMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetDirectionMode)
}
SetDirectionMode::SetDirectionMode(const SetDirectionMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetDirectionMode)
}

void SetDirectionMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(mode_));
}

SetDirectionMode::~SetDirectionMode() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetDirectionMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetDirectionMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetDirectionMode::ArenaDtor(void* object) {
  SetDirectionMode* _this = reinterpret_cast< SetDirectionMode* >(object);
  (void)_this;
}
void SetDirectionMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDirectionMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDirectionMode::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetDirectionMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDirectionMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDirectionMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetDirectionMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_direction(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetDirectionMode)
  return target;
}

size_t SetDirectionMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetDirectionMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDirectionMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetDirectionMode)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDirectionMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDirectionMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetDirectionMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetDirectionMode)
    MergeFrom(*source);
  }
}

void SetDirectionMode::MergeFrom(const SetDirectionMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetDirectionMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void SetDirectionMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetDirectionMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDirectionMode::CopyFrom(const SetDirectionMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetDirectionMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDirectionMode::IsInitialized() const {
  return true;
}

void SetDirectionMode::InternalSwap(SetDirectionMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetDirectionMode, mode_)
      + sizeof(SetDirectionMode::mode_)
      - PROTOBUF_FIELD_OFFSET(SetDirectionMode, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDirectionMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetDirectionValue::_Internal {
 public:
};

GetDirectionValue::GetDirectionValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.GetDirectionValue)
}
GetDirectionValue::GetDirectionValue(const GetDirectionValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.GetDirectionValue)
}

void GetDirectionValue::SharedCtor() {
direction_ = 0;
}

GetDirectionValue::~GetDirectionValue() {
  // @@protoc_insertion_point(destructor:bossopenolt.GetDirectionValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDirectionValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDirectionValue::ArenaDtor(void* object) {
  GetDirectionValue* _this = reinterpret_cast< GetDirectionValue* >(object);
  (void)_this;
}
void GetDirectionValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDirectionValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDirectionValue::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.GetDirectionValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  direction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDirectionValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDirectionValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.GetDirectionValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.GetDirectionValue)
  return target;
}

size_t GetDirectionValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.GetDirectionValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDirectionValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.GetDirectionValue)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDirectionValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDirectionValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.GetDirectionValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.GetDirectionValue)
    MergeFrom(*source);
  }
}

void GetDirectionValue::MergeFrom(const GetDirectionValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.GetDirectionValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void GetDirectionValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.GetDirectionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDirectionValue::CopyFrom(const GetDirectionValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.GetDirectionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDirectionValue::IsInitialized() const {
  return true;
}

void GetDirectionValue::InternalSwap(GetDirectionValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDirectionValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetSdnTable::_Internal {
 public:
};

GetSdnTable::GetSdnTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.GetSdnTable)
}
GetSdnTable::GetSdnTable(const GetSdnTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.GetSdnTable)
}

void GetSdnTable::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSdnTable::~GetSdnTable() {
  // @@protoc_insertion_point(destructor:bossopenolt.GetSdnTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSdnTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSdnTable::ArenaDtor(void* object) {
  GetSdnTable* _this = reinterpret_cast< GetSdnTable* >(object);
  (void)_this;
}
void GetSdnTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSdnTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSdnTable::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.GetSdnTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSdnTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.GetSdnTable.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSdnTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.GetSdnTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.GetSdnTable.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.GetSdnTable)
  return target;
}

size_t GetSdnTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.GetSdnTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSdnTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.GetSdnTable)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSdnTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSdnTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.GetSdnTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.GetSdnTable)
    MergeFrom(*source);
  }
}

void GetSdnTable::MergeFrom(const GetSdnTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.GetSdnTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
}

void GetSdnTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.GetSdnTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSdnTable::CopyFrom(const GetSdnTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.GetSdnTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSdnTable::IsInitialized() const {
  return true;
}

void GetSdnTable::InternalSwap(GetSdnTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSdnTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntegerValue::_Internal {
 public:
};

IntegerValue::IntegerValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.IntegerValue)
}
IntegerValue::IntegerValue(const IntegerValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.IntegerValue)
}

void IntegerValue::SharedCtor() {
value_ = 0;
}

IntegerValue::~IntegerValue() {
  // @@protoc_insertion_point(destructor:bossopenolt.IntegerValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegerValue::ArenaDtor(void* object) {
  IntegerValue* _this = reinterpret_cast< IntegerValue* >(object);
  (void)_this;
}
void IntegerValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntegerValue::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.IntegerValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.IntegerValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.IntegerValue)
  return target;
}

size_t IntegerValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.IntegerValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.IntegerValue)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.IntegerValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.IntegerValue)
    MergeFrom(*source);
  }
}

void IntegerValue::MergeFrom(const IntegerValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.IntegerValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void IntegerValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.IntegerValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerValue::CopyFrom(const IntegerValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.IntegerValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerValue::IsInitialized() const {
  return true;
}

void IntegerValue::InternalSwap(IntegerValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringValue::_Internal {
 public:
};

StringValue::StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.StringValue)
}
StringValue::StringValue(const StringValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.StringValue)
}

void StringValue::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringValue::~StringValue() {
  // @@protoc_insertion_point(destructor:bossopenolt.StringValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringValue::ArenaDtor(void* object) {
  StringValue* _this = reinterpret_cast< StringValue* >(object);
  (void)_this;
}
void StringValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringValue::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.StringValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.StringValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.StringValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.StringValue.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.StringValue)
  return target;
}

size_t StringValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.StringValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.StringValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StringValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.StringValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.StringValue)
    MergeFrom(*source);
  }
}

void StringValue::MergeFrom(const StringValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.StringValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void StringValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.StringValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringValue::CopyFrom(const StringValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.StringValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringValue::IsInitialized() const {
  return true;
}

void StringValue::InternalSwap(StringValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SetLength::_Internal {
 public:
};

SetLength::SetLength(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SetLength)
}
SetLength::SetLength(const SetLength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SetLength)
}

void SetLength::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&operation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(value_));
}

SetLength::~SetLength() {
  // @@protoc_insertion_point(destructor:bossopenolt.SetLength)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLength::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetLength::ArenaDtor(void* object) {
  SetLength* _this = reinterpret_cast< SetLength* >(object);
  (void)_this;
}
void SetLength::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetLength::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SetLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SetLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_operation(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SetLength)
  return target;
}

size_t SetLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SetLength)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLength::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SetLength)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLength* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SetLength)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SetLength)
    MergeFrom(*source);
  }
}

void SetLength::MergeFrom(const SetLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SetLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void SetLength::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SetLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLength::CopyFrom(const SetLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SetLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLength::IsInitialized() const {
  return true;
}

void SetLength::InternalSwap(SetLength* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLength, value_)
      + sizeof(SetLength::value_)
      - PROTOBUF_FIELD_OFFSET(SetLength, operation_)>(
          reinterpret_cast<char*>(&operation_),
          reinterpret_cast<char*>(&other->operation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLength::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetLength::_Internal {
 public:
};

GetLength::GetLength(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.GetLength)
}
GetLength::GetLength(const GetLength& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.GetLength)
}

void GetLength::SharedCtor() {
operation_ = 0;
}

GetLength::~GetLength() {
  // @@protoc_insertion_point(destructor:bossopenolt.GetLength)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLength::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLength::ArenaDtor(void* object) {
  GetLength* _this = reinterpret_cast< GetLength* >(object);
  (void)_this;
}
void GetLength::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLength::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.GetLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLength::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.GetLength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.GetLength)
  return target;
}

size_t GetLength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.GetLength)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLength::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.GetLength)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLength* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLength>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.GetLength)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.GetLength)
    MergeFrom(*source);
  }
}

void GetLength::MergeFrom(const GetLength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.GetLength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void GetLength::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.GetLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLength::CopyFrom(const GetLength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.GetLength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLength::IsInitialized() const {
  return true;
}

void GetLength::InternalSwap(GetLength* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLength::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnuCtrl::_Internal {
 public:
};

OnuCtrl::OnuCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.OnuCtrl)
}
OnuCtrl::OnuCtrl(const OnuCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  onu_id_ = from.onu_id_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.OnuCtrl)
}

void OnuCtrl::SharedCtor() {
onu_id_ = 0;
}

OnuCtrl::~OnuCtrl() {
  // @@protoc_insertion_point(destructor:bossopenolt.OnuCtrl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnuCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OnuCtrl::ArenaDtor(void* object) {
  OnuCtrl* _this = reinterpret_cast< OnuCtrl* >(object);
  (void)_this;
}
void OnuCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnuCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnuCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.OnuCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onu_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnuCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 onu_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnuCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.OnuCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_onu_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.OnuCtrl)
  return target;
}

size_t OnuCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.OnuCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 onu_id = 1;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnuCtrl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.OnuCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const OnuCtrl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnuCtrl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.OnuCtrl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.OnuCtrl)
    MergeFrom(*source);
  }
}

void OnuCtrl::MergeFrom(const OnuCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.OnuCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void OnuCtrl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.OnuCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnuCtrl::CopyFrom(const OnuCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.OnuCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnuCtrl::IsInitialized() const {
  return true;
}

void OnuCtrl::InternalSwap(OnuCtrl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(onu_id_, other->onu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnuCtrl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OltConnResponse::_Internal {
 public:
};

OltConnResponse::OltConnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.OltConnResponse)
}
OltConnResponse::OltConnResponse(const OltConnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.OltConnResponse)
}

void OltConnResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OltConnResponse::~OltConnResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.OltConnResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OltConnResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OltConnResponse::ArenaDtor(void* object) {
  OltConnResponse* _this = reinterpret_cast< OltConnResponse* >(object);
  (void)_this;
}
void OltConnResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OltConnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OltConnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.OltConnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  ip_.ClearToEmpty();
  mac_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OltConnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltConnResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltConnResponse.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltConnResponse.mac"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OltConnResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.OltConnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltConnResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltConnResponse.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltConnResponse.mac");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.OltConnResponse)
  return target;
}

size_t OltConnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.OltConnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string mac = 3;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OltConnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.OltConnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OltConnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OltConnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.OltConnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.OltConnResponse)
    MergeFrom(*source);
  }
}

void OltConnResponse::MergeFrom(const OltConnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.OltConnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.mac().size() > 0) {
    _internal_set_mac(from._internal_mac());
  }
}

void OltConnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.OltConnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OltConnResponse::CopyFrom(const OltConnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.OltConnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OltConnResponse::IsInitialized() const {
  return true;
}

void OltConnResponse::InternalSwap(OltConnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_.Swap(&other->mac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OltConnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OltDevResponse::_Internal {
 public:
};

OltDevResponse::OltDevResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.OltDevResponse)
}
OltDevResponse::OltDevResponse(const OltDevResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  fpga_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fpga_type().empty()) {
    fpga_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fpga_type(), 
      GetArena());
  }
  fpga_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fpga_ver().empty()) {
    fpga_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fpga_ver(), 
      GetArena());
  }
  fpga_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fpga_date().empty()) {
    fpga_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fpga_date(), 
      GetArena());
  }
  sw_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sw_ver().empty()) {
    sw_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sw_ver(), 
      GetArena());
  }
  sw_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sw_date().empty()) {
    sw_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sw_date(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.OltDevResponse)
}

void OltDevResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fpga_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fpga_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fpga_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sw_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sw_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OltDevResponse::~OltDevResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.OltDevResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OltDevResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fpga_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fpga_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fpga_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OltDevResponse::ArenaDtor(void* object) {
  OltDevResponse* _this = reinterpret_cast< OltDevResponse* >(object);
  (void)_this;
}
void OltDevResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OltDevResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OltDevResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.OltDevResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  fpga_type_.ClearToEmpty();
  fpga_ver_.ClearToEmpty();
  fpga_date_.ClearToEmpty();
  sw_ver_.ClearToEmpty();
  sw_date_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OltDevResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltDevResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fpga_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fpga_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltDevResponse.fpga_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fpga_ver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fpga_ver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltDevResponse.fpga_ver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fpga_Date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fpga_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltDevResponse.fpga_Date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sw_ver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sw_ver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltDevResponse.sw_ver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sw_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sw_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OltDevResponse.sw_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OltDevResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.OltDevResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltDevResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string fpga_type = 2;
  if (this->fpga_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fpga_type().data(), static_cast<int>(this->_internal_fpga_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltDevResponse.fpga_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fpga_type(), target);
  }

  // string fpga_ver = 3;
  if (this->fpga_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fpga_ver().data(), static_cast<int>(this->_internal_fpga_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltDevResponse.fpga_ver");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fpga_ver(), target);
  }

  // string fpga_Date = 4;
  if (this->fpga_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fpga_date().data(), static_cast<int>(this->_internal_fpga_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltDevResponse.fpga_Date");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fpga_date(), target);
  }

  // string sw_ver = 5;
  if (this->sw_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sw_ver().data(), static_cast<int>(this->_internal_sw_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltDevResponse.sw_ver");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sw_ver(), target);
  }

  // string sw_date = 6;
  if (this->sw_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sw_date().data(), static_cast<int>(this->_internal_sw_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OltDevResponse.sw_date");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sw_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.OltDevResponse)
  return target;
}

size_t OltDevResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.OltDevResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string fpga_type = 2;
  if (this->fpga_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fpga_type());
  }

  // string fpga_ver = 3;
  if (this->fpga_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fpga_ver());
  }

  // string fpga_Date = 4;
  if (this->fpga_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fpga_date());
  }

  // string sw_ver = 5;
  if (this->sw_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_ver());
  }

  // string sw_date = 6;
  if (this->sw_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OltDevResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.OltDevResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OltDevResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OltDevResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.OltDevResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.OltDevResponse)
    MergeFrom(*source);
  }
}

void OltDevResponse::MergeFrom(const OltDevResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.OltDevResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.fpga_type().size() > 0) {
    _internal_set_fpga_type(from._internal_fpga_type());
  }
  if (from.fpga_ver().size() > 0) {
    _internal_set_fpga_ver(from._internal_fpga_ver());
  }
  if (from.fpga_date().size() > 0) {
    _internal_set_fpga_date(from._internal_fpga_date());
  }
  if (from.sw_ver().size() > 0) {
    _internal_set_sw_ver(from._internal_sw_ver());
  }
  if (from.sw_date().size() > 0) {
    _internal_set_sw_date(from._internal_sw_date());
  }
}

void OltDevResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.OltDevResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OltDevResponse::CopyFrom(const OltDevResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.OltDevResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OltDevResponse::IsInitialized() const {
  return true;
}

void OltDevResponse::InternalSwap(OltDevResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fpga_type_.Swap(&other->fpga_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fpga_ver_.Swap(&other->fpga_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fpga_date_.Swap(&other->fpga_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_ver_.Swap(&other->sw_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_date_.Swap(&other->sw_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OltDevResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecResult::_Internal {
 public:
};

ExecResult::ExecResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.ExecResult)
}
ExecResult::ExecResult(const ExecResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.ExecResult)
}

void ExecResult::SharedCtor() {
result_ = 0;
}

ExecResult::~ExecResult() {
  // @@protoc_insertion_point(destructor:bossopenolt.ExecResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExecResult::ArenaDtor(void* object) {
  ExecResult* _this = reinterpret_cast< ExecResult* >(object);
  (void)_this;
}
void ExecResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.ExecResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.ExecResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.ExecResult)
  return target;
}

size_t ExecResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.ExecResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.ExecResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.ExecResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.ExecResult)
    MergeFrom(*source);
  }
}

void ExecResult::MergeFrom(const ExecResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.ExecResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ExecResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.ExecResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecResult::CopyFrom(const ExecResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.ExecResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecResult::IsInitialized() const {
  return true;
}

void ExecResult::InternalSwap(ExecResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PmdTxdisResponse::_Internal {
 public:
};

PmdTxdisResponse::PmdTxdisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.PmdTxdisResponse)
}
PmdTxdisResponse::PmdTxdisResponse(const PmdTxdisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  port_no_ = from.port_no_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.PmdTxdisResponse)
}

void PmdTxdisResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_no_ = 0;
}

PmdTxdisResponse::~PmdTxdisResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.PmdTxdisResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PmdTxdisResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PmdTxdisResponse::ArenaDtor(void* object) {
  PmdTxdisResponse* _this = reinterpret_cast< PmdTxdisResponse* >(object);
  (void)_this;
}
void PmdTxdisResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PmdTxdisResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PmdTxdisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.PmdTxdisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  port_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PmdTxdisResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 port_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmdTxdisResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmdTxdisResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.PmdTxdisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_no(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmdTxdisResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.PmdTxdisResponse)
  return target;
}

size_t PmdTxdisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.PmdTxdisResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmdTxdisResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.PmdTxdisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PmdTxdisResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmdTxdisResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.PmdTxdisResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.PmdTxdisResponse)
    MergeFrom(*source);
  }
}

void PmdTxdisResponse::MergeFrom(const PmdTxdisResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.PmdTxdisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void PmdTxdisResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.PmdTxdisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmdTxdisResponse::CopyFrom(const PmdTxdisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.PmdTxdisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmdTxdisResponse::IsInitialized() const {
  return true;
}

void PmdTxdisResponse::InternalSwap(PmdTxdisResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_no_, other->port_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PmdTxdisResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PmdStatusResponse::_Internal {
 public:
};

PmdStatusResponse::PmdStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.PmdStatusResponse)
}
PmdStatusResponse::PmdStatusResponse(const PmdStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loss().empty()) {
    loss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loss(), 
      GetArena());
  }
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module().empty()) {
    module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_module(), 
      GetArena());
  }
  fault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fault().empty()) {
    fault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fault(), 
      GetArena());
  }
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link().empty()) {
    link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link(), 
      GetArena());
  }
  port_no_ = from.port_no_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.PmdStatusResponse)
}

void PmdStatusResponse::SharedCtor() {
loss_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fault_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_no_ = 0;
}

PmdStatusResponse::~PmdStatusResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.PmdStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PmdStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loss_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fault_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PmdStatusResponse::ArenaDtor(void* object) {
  PmdStatusResponse* _this = reinterpret_cast< PmdStatusResponse* >(object);
  (void)_this;
}
void PmdStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PmdStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PmdStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.PmdStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loss_.ClearToEmpty();
  module_.ClearToEmpty();
  fault_.ClearToEmpty();
  link_.ClearToEmpty();
  port_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PmdStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 port_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_loss();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmdStatusResponse.loss"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string module = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmdStatusResponse.module"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fault = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fault();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmdStatusResponse.fault"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmdStatusResponse.link"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmdStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.PmdStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_no(), target);
  }

  // string loss = 2;
  if (this->loss().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loss().data(), static_cast<int>(this->_internal_loss().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmdStatusResponse.loss");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loss(), target);
  }

  // string module = 3;
  if (this->module().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmdStatusResponse.module");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_module(), target);
  }

  // string fault = 4;
  if (this->fault().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fault().data(), static_cast<int>(this->_internal_fault().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmdStatusResponse.fault");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fault(), target);
  }

  // string link = 5;
  if (this->link().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmdStatusResponse.link");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_link(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.PmdStatusResponse)
  return target;
}

size_t PmdStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.PmdStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loss = 2;
  if (this->loss().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loss());
  }

  // string module = 3;
  if (this->module().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module());
  }

  // string fault = 4;
  if (this->fault().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fault());
  }

  // string link = 5;
  if (this->link().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link());
  }

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmdStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.PmdStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PmdStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmdStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.PmdStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.PmdStatusResponse)
    MergeFrom(*source);
  }
}

void PmdStatusResponse::MergeFrom(const PmdStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.PmdStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loss().size() > 0) {
    _internal_set_loss(from._internal_loss());
  }
  if (from.module().size() > 0) {
    _internal_set_module(from._internal_module());
  }
  if (from.fault().size() > 0) {
    _internal_set_fault(from._internal_fault());
  }
  if (from.link().size() > 0) {
    _internal_set_link(from._internal_link());
  }
  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void PmdStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.PmdStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmdStatusResponse::CopyFrom(const PmdStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.PmdStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmdStatusResponse::IsInitialized() const {
  return true;
}

void PmdStatusResponse::InternalSwap(PmdStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loss_.Swap(&other->loss_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  module_.Swap(&other->module_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fault_.Swap(&other->fault_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  link_.Swap(&other->link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_no_, other->port_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PmdStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetPortResponse::_Internal {
 public:
};

GetPortResponse::GetPortResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.GetPortResponse)
}
GetPortResponse::GetPortResponse(const GetPortResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArena());
  }
  port_no_ = from.port_no_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.GetPortResponse)
}

void GetPortResponse::SharedCtor() {
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_no_ = 0;
}

GetPortResponse::~GetPortResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.GetPortResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPortResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPortResponse::ArenaDtor(void* object) {
  GetPortResponse* _this = reinterpret_cast< GetPortResponse* >(object);
  (void)_this;
}
void GetPortResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPortResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPortResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.GetPortResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.ClearToEmpty();
  port_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPortResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 port_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          port_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.GetPortResponse.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPortResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.GetPortResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_port_no(), target);
  }

  // string state = 2;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.GetPortResponse.state");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.GetPortResponse)
  return target;
}

size_t GetPortResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.GetPortResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 2;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // int32 port_no = 1;
  if (this->port_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPortResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.GetPortResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPortResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPortResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.GetPortResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.GetPortResponse)
    MergeFrom(*source);
  }
}

void GetPortResponse::MergeFrom(const GetPortResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.GetPortResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.port_no() != 0) {
    _internal_set_port_no(from._internal_port_no());
  }
}

void GetPortResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.GetPortResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPortResponse::CopyFrom(const GetPortResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.GetPortResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPortResponse::IsInitialized() const {
  return true;
}

void GetPortResponse::InternalSwap(GetPortResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_no_, other->port_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPortResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MtuSizeResponse::_Internal {
 public:
};

MtuSizeResponse::MtuSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.MtuSizeResponse)
}
MtuSizeResponse::MtuSizeResponse(const MtuSizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mtu_ = from.mtu_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.MtuSizeResponse)
}

void MtuSizeResponse::SharedCtor() {
mtu_ = 0;
}

MtuSizeResponse::~MtuSizeResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.MtuSizeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MtuSizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MtuSizeResponse::ArenaDtor(void* object) {
  MtuSizeResponse* _this = reinterpret_cast< MtuSizeResponse* >(object);
  (void)_this;
}
void MtuSizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MtuSizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MtuSizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.MtuSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtu_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MtuSizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mtu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MtuSizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.MtuSizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mtu = 1;
  if (this->mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mtu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.MtuSizeResponse)
  return target;
}

size_t MtuSizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.MtuSizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mtu = 1;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MtuSizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.MtuSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MtuSizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MtuSizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.MtuSizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.MtuSizeResponse)
    MergeFrom(*source);
  }
}

void MtuSizeResponse::MergeFrom(const MtuSizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.MtuSizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
}

void MtuSizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.MtuSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MtuSizeResponse::CopyFrom(const MtuSizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.MtuSizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MtuSizeResponse::IsInitialized() const {
  return true;
}

void MtuSizeResponse::InternalSwap(MtuSizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mtu_, other->mtu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MtuSizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetVlanResponse::_Internal {
 public:
};

GetVlanResponse::GetVlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.GetVlanResponse)
}
GetVlanResponse::GetVlanResponse(const GetVlanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  fields_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fields().empty()) {
    fields_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fields(), 
      GetArena());
  }
  vlan_mode_ = from.vlan_mode_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.GetVlanResponse)
}

void GetVlanResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fields_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vlan_mode_ = 0;
}

GetVlanResponse::~GetVlanResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.GetVlanResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVlanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fields_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetVlanResponse::ArenaDtor(void* object) {
  GetVlanResponse* _this = reinterpret_cast< GetVlanResponse* >(object);
  (void)_this;
}
void GetVlanResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVlanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetVlanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.GetVlanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  fields_.ClearToEmpty();
  vlan_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVlanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.GetVlanResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vlan_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vlan_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fields();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.GetVlanResponse.fields"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVlanResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.GetVlanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.GetVlanResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 vlan_mode = 2;
  if (this->vlan_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vlan_mode(), target);
  }

  // string fields = 3;
  if (this->fields().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fields().data(), static_cast<int>(this->_internal_fields().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.GetVlanResponse.fields");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fields(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.GetVlanResponse)
  return target;
}

size_t GetVlanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.GetVlanResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string fields = 3;
  if (this->fields().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fields());
  }

  // int32 vlan_mode = 2;
  if (this->vlan_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vlan_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVlanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.GetVlanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVlanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVlanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.GetVlanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.GetVlanResponse)
    MergeFrom(*source);
  }
}

void GetVlanResponse::MergeFrom(const GetVlanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.GetVlanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.fields().size() > 0) {
    _internal_set_fields(from._internal_fields());
  }
  if (from.vlan_mode() != 0) {
    _internal_set_vlan_mode(from._internal_vlan_mode());
  }
}

void GetVlanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.GetVlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVlanResponse::CopyFrom(const GetVlanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.GetVlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVlanResponse::IsInitialized() const {
  return true;
}

void GetVlanResponse::InternalSwap(GetVlanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fields_.Swap(&other->fields_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vlan_mode_, other->vlan_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVlanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModeResponse::_Internal {
 public:
};

ModeResponse::ModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.ModeResponse)
}
ModeResponse::ModeResponse(const ModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.ModeResponse)
}

void ModeResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mode_ = 0;
}

ModeResponse::~ModeResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.ModeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModeResponse::ArenaDtor(void* object) {
  ModeResponse* _this = reinterpret_cast< ModeResponse* >(object);
  (void)_this;
}
void ModeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.ModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.ModeResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.ModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.ModeResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.ModeResponse)
  return target;
}

size_t ModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.ModeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.ModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.ModeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.ModeResponse)
    MergeFrom(*source);
  }
}

void ModeResponse::MergeFrom(const ModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.ModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void ModeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.ModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeResponse::CopyFrom(const ModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.ModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeResponse::IsInitialized() const {
  return true;
}

void ModeResponse::InternalSwap(ModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AgingTimeResponse::_Internal {
 public:
};

AgingTimeResponse::AgingTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.AgingTimeResponse)
}
AgingTimeResponse::AgingTimeResponse(const AgingTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  aging_time_ = from.aging_time_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.AgingTimeResponse)
}

void AgingTimeResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
aging_time_ = 0;
}

AgingTimeResponse::~AgingTimeResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.AgingTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgingTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgingTimeResponse::ArenaDtor(void* object) {
  AgingTimeResponse* _this = reinterpret_cast< AgingTimeResponse* >(object);
  (void)_this;
}
void AgingTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgingTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgingTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.AgingTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  aging_time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgingTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.AgingTimeResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 aging_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aging_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgingTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.AgingTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.AgingTimeResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 aging_time = 2;
  if (this->aging_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_aging_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.AgingTimeResponse)
  return target;
}

size_t AgingTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.AgingTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // int32 aging_time = 2;
  if (this->aging_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aging_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgingTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.AgingTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AgingTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgingTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.AgingTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.AgingTimeResponse)
    MergeFrom(*source);
  }
}

void AgingTimeResponse::MergeFrom(const AgingTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.AgingTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.aging_time() != 0) {
    _internal_set_aging_time(from._internal_aging_time());
  }
}

void AgingTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.AgingTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgingTimeResponse::CopyFrom(const AgingTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.AgingTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgingTimeResponse::IsInitialized() const {
  return true;
}

void AgingTimeResponse::InternalSwap(AgingTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(aging_time_, other->aging_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgingTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DevMacInfoResponse::_Internal {
 public:
};

DevMacInfoResponse::DevMacInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.DevMacInfoResponse)
}
DevMacInfoResponse::DevMacInfoResponse(const DevMacInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  aging_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aging_mode().empty()) {
    aging_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aging_mode(), 
      GetArena());
  }
  ::memcpy(&mtu_, &from.mtu_,
    static_cast<size_t>(reinterpret_cast<char*>(&aging_time_) -
    reinterpret_cast<char*>(&mtu_)) + sizeof(aging_time_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.DevMacInfoResponse)
}

void DevMacInfoResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
aging_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mtu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aging_time_) -
    reinterpret_cast<char*>(&mtu_)) + sizeof(aging_time_));
}

DevMacInfoResponse::~DevMacInfoResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.DevMacInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DevMacInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aging_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DevMacInfoResponse::ArenaDtor(void* object) {
  DevMacInfoResponse* _this = reinterpret_cast< DevMacInfoResponse* >(object);
  (void)_this;
}
void DevMacInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevMacInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DevMacInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.DevMacInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  aging_mode_.ClearToEmpty();
  ::memset(&mtu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aging_time_) -
      reinterpret_cast<char*>(&mtu_)) + sizeof(aging_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DevMacInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.DevMacInfoResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mtu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vlan_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vlan_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lookup_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lookup_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aging_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_aging_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.DevMacInfoResponse.aging_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 aging_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          aging_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevMacInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.DevMacInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.DevMacInfoResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 mtu = 2;
  if (this->mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mtu(), target);
  }

  // int32 vlan_mode = 3;
  if (this->vlan_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vlan_mode(), target);
  }

  // int32 lookup_mode = 4;
  if (this->lookup_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lookup_mode(), target);
  }

  // string aging_mode = 5;
  if (this->aging_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aging_mode().data(), static_cast<int>(this->_internal_aging_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.DevMacInfoResponse.aging_mode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_aging_mode(), target);
  }

  // int32 aging_time = 6;
  if (this->aging_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_aging_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.DevMacInfoResponse)
  return target;
}

size_t DevMacInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.DevMacInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string aging_mode = 5;
  if (this->aging_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aging_mode());
  }

  // int32 mtu = 2;
  if (this->mtu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mtu());
  }

  // int32 vlan_mode = 3;
  if (this->vlan_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vlan_mode());
  }

  // int32 lookup_mode = 4;
  if (this->lookup_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lookup_mode());
  }

  // int32 aging_time = 6;
  if (this->aging_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aging_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevMacInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.DevMacInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DevMacInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DevMacInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.DevMacInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.DevMacInfoResponse)
    MergeFrom(*source);
  }
}

void DevMacInfoResponse::MergeFrom(const DevMacInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.DevMacInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.aging_mode().size() > 0) {
    _internal_set_aging_mode(from._internal_aging_mode());
  }
  if (from.mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
  if (from.vlan_mode() != 0) {
    _internal_set_vlan_mode(from._internal_vlan_mode());
  }
  if (from.lookup_mode() != 0) {
    _internal_set_lookup_mode(from._internal_lookup_mode());
  }
  if (from.aging_time() != 0) {
    _internal_set_aging_time(from._internal_aging_time());
  }
}

void DevMacInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.DevMacInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevMacInfoResponse::CopyFrom(const DevMacInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.DevMacInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevMacInfoResponse::IsInitialized() const {
  return true;
}

void DevMacInfoResponse::InternalSwap(DevMacInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aging_mode_.Swap(&other->aging_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DevMacInfoResponse, aging_time_)
      + sizeof(DevMacInfoResponse::aging_time_)
      - PROTOBUF_FIELD_OFFSET(DevMacInfoResponse, mtu_)>(
          reinterpret_cast<char*>(&mtu_),
          reinterpret_cast<char*>(&other->mtu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DevMacInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SdnTableKeyResponse::_Internal {
 public:
};

SdnTableKeyResponse::SdnTableKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SdnTableKeyResponse)
}
SdnTableKeyResponse::SdnTableKeyResponse(const SdnTableKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash_key().empty()) {
    hash_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SdnTableKeyResponse)
}

void SdnTableKeyResponse::SharedCtor() {
hash_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SdnTableKeyResponse::~SdnTableKeyResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.SdnTableKeyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SdnTableKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SdnTableKeyResponse::ArenaDtor(void* object) {
  SdnTableKeyResponse* _this = reinterpret_cast< SdnTableKeyResponse* >(object);
  (void)_this;
}
void SdnTableKeyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SdnTableKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdnTableKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SdnTableKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdnTableKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SdnTableKeyResponse.hash_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SdnTableKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SdnTableKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash_key = 1;
  if (this->hash_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash_key().data(), static_cast<int>(this->_internal_hash_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SdnTableKeyResponse.hash_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SdnTableKeyResponse)
  return target;
}

size_t SdnTableKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SdnTableKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash_key = 1;
  if (this->hash_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdnTableKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SdnTableKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SdnTableKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SdnTableKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SdnTableKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SdnTableKeyResponse)
    MergeFrom(*source);
  }
}

void SdnTableKeyResponse::MergeFrom(const SdnTableKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SdnTableKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash_key().size() > 0) {
    _internal_set_hash_key(from._internal_hash_key());
  }
}

void SdnTableKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SdnTableKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdnTableKeyResponse::CopyFrom(const SdnTableKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SdnTableKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdnTableKeyResponse::IsInitialized() const {
  return true;
}

void SdnTableKeyResponse::InternalSwap(SdnTableKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_key_.Swap(&other->hash_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SdnTableKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SdnTableResponse::_Internal {
 public:
};

SdnTableResponse::SdnTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SdnTableResponse)
}
SdnTableResponse::SdnTableResponse(const SdnTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  port_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port_id().empty()) {
    port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_port_id(), 
      GetArena());
  }
  mac_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac_addr().empty()) {
    mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac_addr(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SdnTableResponse)
}

void SdnTableResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mac_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SdnTableResponse::~SdnTableResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.SdnTableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SdnTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SdnTableResponse::ArenaDtor(void* object) {
  SdnTableResponse* _this = reinterpret_cast< SdnTableResponse* >(object);
  (void)_this;
}
void SdnTableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SdnTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SdnTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SdnTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  address_.ClearToEmpty();
  port_id_.ClearToEmpty();
  mac_addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SdnTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SdnTableResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SdnTableResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SdnTableResponse.port_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mac_addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mac_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SdnTableResponse.mac_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SdnTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SdnTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SdnTableResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SdnTableResponse.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string port_id = 3;
  if (this->port_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port_id().data(), static_cast<int>(this->_internal_port_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SdnTableResponse.port_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port_id(), target);
  }

  // string mac_addr = 4;
  if (this->mac_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_addr().data(), static_cast<int>(this->_internal_mac_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SdnTableResponse.mac_addr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SdnTableResponse)
  return target;
}

size_t SdnTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SdnTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string port_id = 3;
  if (this->port_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port_id());
  }

  // string mac_addr = 4;
  if (this->mac_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdnTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SdnTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SdnTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SdnTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SdnTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SdnTableResponse)
    MergeFrom(*source);
  }
}

void SdnTableResponse::MergeFrom(const SdnTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SdnTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.port_id().size() > 0) {
    _internal_set_port_id(from._internal_port_id());
  }
  if (from.mac_addr().size() > 0) {
    _internal_set_mac_addr(from._internal_mac_addr());
  }
}

void SdnTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SdnTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SdnTableResponse::CopyFrom(const SdnTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SdnTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdnTableResponse::IsInitialized() const {
  return true;
}

void SdnTableResponse::InternalSwap(SdnTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_id_.Swap(&other->port_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mac_addr_.Swap(&other->mac_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SdnTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LengthResponse::_Internal {
 public:
};

LengthResponse::LengthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.LengthResponse)
}
LengthResponse::LengthResponse(const LengthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.LengthResponse)
}

void LengthResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = 0;
}

LengthResponse::~LengthResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.LengthResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LengthResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LengthResponse::ArenaDtor(void* object) {
  LengthResponse* _this = reinterpret_cast< LengthResponse* >(object);
  (void)_this;
}
void LengthResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LengthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LengthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.LengthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LengthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.LengthResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LengthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.LengthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.LengthResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.LengthResponse)
  return target;
}

size_t LengthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.LengthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LengthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.LengthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LengthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LengthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.LengthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.LengthResponse)
    MergeFrom(*source);
  }
}

void LengthResponse::MergeFrom(const LengthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.LengthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void LengthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.LengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LengthResponse::CopyFrom(const LengthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.LengthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LengthResponse::IsInitialized() const {
  return true;
}

void LengthResponse::InternalSwap(LengthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LengthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QuietZoneResponse::_Internal {
 public:
};

QuietZoneResponse::QuietZoneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.QuietZoneResponse)
}
QuietZoneResponse::QuietZoneResponse(const QuietZoneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.QuietZoneResponse)
}

void QuietZoneResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = 0;
}

QuietZoneResponse::~QuietZoneResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.QuietZoneResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuietZoneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuietZoneResponse::ArenaDtor(void* object) {
  QuietZoneResponse* _this = reinterpret_cast< QuietZoneResponse* >(object);
  (void)_this;
}
void QuietZoneResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuietZoneResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuietZoneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.QuietZoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuietZoneResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.QuietZoneResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuietZoneResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.QuietZoneResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.QuietZoneResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.QuietZoneResponse)
  return target;
}

size_t QuietZoneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.QuietZoneResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuietZoneResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.QuietZoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuietZoneResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuietZoneResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.QuietZoneResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.QuietZoneResponse)
    MergeFrom(*source);
  }
}

void QuietZoneResponse::MergeFrom(const QuietZoneResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.QuietZoneResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void QuietZoneResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.QuietZoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuietZoneResponse::CopyFrom(const QuietZoneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.QuietZoneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuietZoneResponse::IsInitialized() const {
  return true;
}

void QuietZoneResponse::InternalSwap(QuietZoneResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuietZoneResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddOnuResponse::_Internal {
 public:
};

AddOnuResponse::AddOnuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.AddOnuResponse)
}
AddOnuResponse::AddOnuResponse(const AddOnuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rate().empty()) {
    rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rate(), 
      GetArena());
  }
  vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_id().empty()) {
    vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_id(), 
      GetArena());
  }
  vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vssn().empty()) {
    vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vssn(), 
      GetArena());
  }
  onu_id_ = from.onu_id_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.AddOnuResponse)
}

void AddOnuResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onu_id_ = 0;
}

AddOnuResponse::~AddOnuResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.AddOnuResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddOnuResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vssn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddOnuResponse::ArenaDtor(void* object) {
  AddOnuResponse* _this = reinterpret_cast< AddOnuResponse* >(object);
  (void)_this;
}
void AddOnuResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddOnuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddOnuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.AddOnuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  result_.ClearToEmpty();
  rate_.ClearToEmpty();
  vendor_id_.ClearToEmpty();
  vssn_.ClearToEmpty();
  onu_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddOnuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.AddOnuResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.AddOnuResponse.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.AddOnuResponse.rate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vendor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.AddOnuResponse.vendor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vssn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_vssn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.AddOnuResponse.vssn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddOnuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.AddOnuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.AddOnuResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // string result = 3;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.AddOnuResponse.result");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result(), target);
  }

  // string rate = 4;
  if (this->rate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rate().data(), static_cast<int>(this->_internal_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.AddOnuResponse.rate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rate(), target);
  }

  // string vendor_id = 5;
  if (this->vendor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_id().data(), static_cast<int>(this->_internal_vendor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.AddOnuResponse.vendor_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vendor_id(), target);
  }

  // string vssn = 6;
  if (this->vssn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vssn().data(), static_cast<int>(this->_internal_vssn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.AddOnuResponse.vssn");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_vssn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.AddOnuResponse)
  return target;
}

size_t AddOnuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.AddOnuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // string rate = 4;
  if (this->rate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rate());
  }

  // string vendor_id = 5;
  if (this->vendor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_id());
  }

  // string vssn = 6;
  if (this->vssn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vssn());
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddOnuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.AddOnuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddOnuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddOnuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.AddOnuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.AddOnuResponse)
    MergeFrom(*source);
  }
}

void AddOnuResponse::MergeFrom(const AddOnuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.AddOnuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.rate().size() > 0) {
    _internal_set_rate(from._internal_rate());
  }
  if (from.vendor_id().size() > 0) {
    _internal_set_vendor_id(from._internal_vendor_id());
  }
  if (from.vssn().size() > 0) {
    _internal_set_vssn(from._internal_vssn());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void AddOnuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.AddOnuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOnuResponse::CopyFrom(const AddOnuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.AddOnuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOnuResponse::IsInitialized() const {
  return true;
}

void AddOnuResponse::InternalSwap(AddOnuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rate_.Swap(&other->rate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_id_.Swap(&other->vendor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vssn_.Swap(&other->vssn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(onu_id_, other->onu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddOnuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SlaResponse::_Internal {
 public:
};

SlaResponse::SlaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.SlaResponse)
}
SlaResponse::SlaResponse(const SlaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  fec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fec().empty()) {
    fec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fec(), 
      GetArena());
  }
  ::memcpy(&onu_id_, &from.onu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&absur_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(absur_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.SlaResponse)
}

void SlaResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&onu_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&absur_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(absur_));
}

SlaResponse::~SlaResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.SlaResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SlaResponse::ArenaDtor(void* object) {
  SlaResponse* _this = reinterpret_cast< SlaResponse* >(object);
  (void)_this;
}
void SlaResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.SlaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  type_.ClearToEmpty();
  fec_.ClearToEmpty();
  ::memset(&onu_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absur_) -
      reinterpret_cast<char*>(&onu_id_)) + sizeof(absur_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SlaResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tcont = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tcont_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SlaResponse.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 si = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          si_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 abmin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          abmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 absur = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          absur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fec = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.SlaResponse.fec"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlaResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.SlaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SlaResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // int32 tcont = 3;
  if (this->tcont() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tcont(), target);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SlaResponse.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // int32 si = 5;
  if (this->si() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_si(), target);
  }

  // int32 abmin = 6;
  if (this->abmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_abmin(), target);
  }

  // int32 absur = 7;
  if (this->absur() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_absur(), target);
  }

  // string fec = 8;
  if (this->fec().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fec().data(), static_cast<int>(this->_internal_fec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.SlaResponse.fec");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fec(), target);
  }

  // double distance = 9;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.SlaResponse)
  return target;
}

size_t SlaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.SlaResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string type = 4;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string fec = 8;
  if (this->fec().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fec());
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  // int32 tcont = 3;
  if (this->tcont() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tcont());
  }

  // int32 si = 5;
  if (this->si() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_si());
  }

  // int32 abmin = 6;
  if (this->abmin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abmin());
  }

  // double distance = 9;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 absur = 7;
  if (this->absur() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_absur());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.SlaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SlaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.SlaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.SlaResponse)
    MergeFrom(*source);
  }
}

void SlaResponse::MergeFrom(const SlaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.SlaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.fec().size() > 0) {
    _internal_set_fec(from._internal_fec());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
  if (from.tcont() != 0) {
    _internal_set_tcont(from._internal_tcont());
  }
  if (from.si() != 0) {
    _internal_set_si(from._internal_si());
  }
  if (from.abmin() != 0) {
    _internal_set_abmin(from._internal_abmin());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.absur() != 0) {
    _internal_set_absur(from._internal_absur());
  }
}

void SlaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.SlaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaResponse::CopyFrom(const SlaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.SlaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaResponse::IsInitialized() const {
  return true;
}

void SlaResponse::InternalSwap(SlaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fec_.Swap(&other->fec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlaResponse, absur_)
      + sizeof(SlaResponse::absur_)
      - PROTOBUF_FIELD_OFFSET(SlaResponse, onu_id_)>(
          reinterpret_cast<char*>(&onu_id_),
          reinterpret_cast<char*>(&other->onu_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnuVssnResponse::_Internal {
 public:
};

OnuVssnResponse::OnuVssnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.OnuVssnResponse)
}
OnuVssnResponse::OnuVssnResponse(const OnuVssnResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vssn().empty()) {
    vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vssn(), 
      GetArena());
  }
  onu_id_ = from.onu_id_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.OnuVssnResponse)
}

void OnuVssnResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onu_id_ = 0;
}

OnuVssnResponse::~OnuVssnResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.OnuVssnResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnuVssnResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vssn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnuVssnResponse::ArenaDtor(void* object) {
  OnuVssnResponse* _this = reinterpret_cast< OnuVssnResponse* >(object);
  (void)_this;
}
void OnuVssnResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnuVssnResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnuVssnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.OnuVssnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  vssn_.ClearToEmpty();
  onu_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnuVssnResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuVssnResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vssn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vssn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuVssnResponse.vssn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnuVssnResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.OnuVssnResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuVssnResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // string vssn = 3;
  if (this->vssn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vssn().data(), static_cast<int>(this->_internal_vssn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuVssnResponse.vssn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vssn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.OnuVssnResponse)
  return target;
}

size_t OnuVssnResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.OnuVssnResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string vssn = 3;
  if (this->vssn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vssn());
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnuVssnResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.OnuVssnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OnuVssnResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnuVssnResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.OnuVssnResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.OnuVssnResponse)
    MergeFrom(*source);
  }
}

void OnuVssnResponse::MergeFrom(const OnuVssnResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.OnuVssnResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.vssn().size() > 0) {
    _internal_set_vssn(from._internal_vssn());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void OnuVssnResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.OnuVssnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnuVssnResponse::CopyFrom(const OnuVssnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.OnuVssnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnuVssnResponse::IsInitialized() const {
  return true;
}

void OnuVssnResponse::InternalSwap(OnuVssnResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vssn_.Swap(&other->vssn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(onu_id_, other->onu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnuVssnResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnuDistResponse::_Internal {
 public:
};

OnuDistResponse::OnuDistResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.OnuDistResponse)
}
OnuDistResponse::OnuDistResponse(const OnuDistResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&onu_id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(onu_id_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.OnuDistResponse)
}

void OnuDistResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&onu_id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(onu_id_));
}

OnuDistResponse::~OnuDistResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.OnuDistResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnuDistResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnuDistResponse::ArenaDtor(void* object) {
  OnuDistResponse* _this = reinterpret_cast< OnuDistResponse* >(object);
  (void)_this;
}
void OnuDistResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnuDistResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnuDistResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.OnuDistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onu_id_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(onu_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnuDistResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuDistResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnuDistResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.OnuDistResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuDistResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.OnuDistResponse)
  return target;
}

size_t OnuDistResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.OnuDistResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnuDistResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.OnuDistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OnuDistResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnuDistResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.OnuDistResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.OnuDistResponse)
    MergeFrom(*source);
  }
}

void OnuDistResponse::MergeFrom(const OnuDistResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.OnuDistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void OnuDistResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.OnuDistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnuDistResponse::CopyFrom(const OnuDistResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.OnuDistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnuDistResponse::IsInitialized() const {
  return true;
}

void OnuDistResponse::InternalSwap(OnuDistResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnuDistResponse, onu_id_)
      + sizeof(OnuDistResponse::onu_id_)
      - PROTOBUF_FIELD_OFFSET(OnuDistResponse, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnuDistResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BurstDelimitResponse::_Internal {
 public:
};

BurstDelimitResponse::BurstDelimitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.BurstDelimitResponse)
}
BurstDelimitResponse::BurstDelimitResponse(const BurstDelimitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delimiter().empty()) {
    delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delimiter(), 
      GetArena());
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.BurstDelimitResponse)
}

void BurstDelimitResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
length_ = 0;
}

BurstDelimitResponse::~BurstDelimitResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.BurstDelimitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurstDelimitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delimiter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BurstDelimitResponse::ArenaDtor(void* object) {
  BurstDelimitResponse* _this = reinterpret_cast< BurstDelimitResponse* >(object);
  (void)_this;
}
void BurstDelimitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurstDelimitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BurstDelimitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.BurstDelimitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  delimiter_.ClearToEmpty();
  length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurstDelimitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstDelimitResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delimiter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_delimiter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstDelimitResponse.delimiter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurstDelimitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.BurstDelimitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstDelimitResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // string delimiter = 3;
  if (this->delimiter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delimiter().data(), static_cast<int>(this->_internal_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstDelimitResponse.delimiter");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_delimiter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.BurstDelimitResponse)
  return target;
}

size_t BurstDelimitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.BurstDelimitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string delimiter = 3;
  if (this->delimiter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delimiter());
  }

  // int32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurstDelimitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.BurstDelimitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BurstDelimitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurstDelimitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.BurstDelimitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.BurstDelimitResponse)
    MergeFrom(*source);
  }
}

void BurstDelimitResponse::MergeFrom(const BurstDelimitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.BurstDelimitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.delimiter().size() > 0) {
    _internal_set_delimiter(from._internal_delimiter());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void BurstDelimitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.BurstDelimitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurstDelimitResponse::CopyFrom(const BurstDelimitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.BurstDelimitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurstDelimitResponse::IsInitialized() const {
  return true;
}

void BurstDelimitResponse::InternalSwap(BurstDelimitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delimiter_.Swap(&other->delimiter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BurstDelimitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BurstPreambleResponse::_Internal {
 public:
};

BurstPreambleResponse::BurstPreambleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.BurstPreambleResponse)
}
BurstPreambleResponse::BurstPreambleResponse(const BurstPreambleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  preamble_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preamble().empty()) {
    preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preamble(), 
      GetArena());
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&length_)) + sizeof(repeat_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.BurstPreambleResponse)
}

void BurstPreambleResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preamble_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&length_)) + sizeof(repeat_));
}

BurstPreambleResponse::~BurstPreambleResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.BurstPreambleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurstPreambleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preamble_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BurstPreambleResponse::ArenaDtor(void* object) {
  BurstPreambleResponse* _this = reinterpret_cast< BurstPreambleResponse* >(object);
  (void)_this;
}
void BurstPreambleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurstPreambleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BurstPreambleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.BurstPreambleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  preamble_.ClearToEmpty();
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&length_)) + sizeof(repeat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurstPreambleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstPreambleResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string preamble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_preamble();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstPreambleResponse.preamble"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 repeat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurstPreambleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.BurstPreambleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstPreambleResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // string preamble = 3;
  if (this->preamble().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preamble().data(), static_cast<int>(this->_internal_preamble().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstPreambleResponse.preamble");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preamble(), target);
  }

  // int32 repeat = 4;
  if (this->repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.BurstPreambleResponse)
  return target;
}

size_t BurstPreambleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.BurstPreambleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string preamble = 3;
  if (this->preamble().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preamble());
  }

  // int32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // int32 repeat = 4;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurstPreambleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.BurstPreambleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BurstPreambleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurstPreambleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.BurstPreambleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.BurstPreambleResponse)
    MergeFrom(*source);
  }
}

void BurstPreambleResponse::MergeFrom(const BurstPreambleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.BurstPreambleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.preamble().size() > 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
}

void BurstPreambleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.BurstPreambleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurstPreambleResponse::CopyFrom(const BurstPreambleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.BurstPreambleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurstPreambleResponse::IsInitialized() const {
  return true;
}

void BurstPreambleResponse::InternalSwap(BurstPreambleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preamble_.Swap(&other->preamble_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BurstPreambleResponse, repeat_)
      + sizeof(BurstPreambleResponse::repeat_)
      - PROTOBUF_FIELD_OFFSET(BurstPreambleResponse, length_)>(
          reinterpret_cast<char*>(&length_),
          reinterpret_cast<char*>(&other->length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BurstPreambleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BurstVersionResponse::_Internal {
 public:
};

BurstVersionResponse::BurstVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.BurstVersionResponse)
}
BurstVersionResponse::BurstVersionResponse(const BurstVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  pontag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pontag().empty()) {
    pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pontag(), 
      GetArena());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.BurstVersionResponse)
}

void BurstVersionResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pontag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
index_ = 0;
}

BurstVersionResponse::~BurstVersionResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.BurstVersionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurstVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pontag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BurstVersionResponse::ArenaDtor(void* object) {
  BurstVersionResponse* _this = reinterpret_cast< BurstVersionResponse* >(object);
  (void)_this;
}
void BurstVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurstVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BurstVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.BurstVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  version_.ClearToEmpty();
  pontag_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurstVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstVersionResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstVersionResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pontag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pontag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstVersionResponse.pontag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurstVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.BurstVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstVersionResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstVersionResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // int32 index = 3;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // string pontag = 4;
  if (this->pontag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pontag().data(), static_cast<int>(this->_internal_pontag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstVersionResponse.pontag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pontag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.BurstVersionResponse)
  return target;
}

size_t BurstVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.BurstVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string pontag = 4;
  if (this->pontag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pontag());
  }

  // int32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurstVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.BurstVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BurstVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurstVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.BurstVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.BurstVersionResponse)
    MergeFrom(*source);
  }
}

void BurstVersionResponse::MergeFrom(const BurstVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.BurstVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.pontag().size() > 0) {
    _internal_set_pontag(from._internal_pontag());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void BurstVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.BurstVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurstVersionResponse::CopyFrom(const BurstVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.BurstVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurstVersionResponse::IsInitialized() const {
  return true;
}

void BurstVersionResponse::InternalSwap(BurstVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pontag_.Swap(&other->pontag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BurstVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BurstProfileResponse::_Internal {
 public:
};

BurstProfileResponse::BurstProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.BurstProfileResponse)
}
BurstProfileResponse::BurstProfileResponse(const BurstProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delimiter().empty()) {
    delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delimiter(), 
      GetArena());
  }
  preamble_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preamble().empty()) {
    preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preamble(), 
      GetArena());
  }
  pontag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pontag().empty()) {
    pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pontag(), 
      GetArena());
  }
  ::memcpy(&onu_id_, &from.onu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(repeat_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.BurstProfileResponse)
}

void BurstProfileResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preamble_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pontag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&onu_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeat_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(repeat_));
}

BurstProfileResponse::~BurstProfileResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.BurstProfileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BurstProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delimiter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preamble_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pontag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BurstProfileResponse::ArenaDtor(void* object) {
  BurstProfileResponse* _this = reinterpret_cast< BurstProfileResponse* >(object);
  (void)_this;
}
void BurstProfileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurstProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BurstProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.BurstProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  version_.ClearToEmpty();
  delimiter_.ClearToEmpty();
  preamble_.ClearToEmpty();
  pontag_.ClearToEmpty();
  ::memset(&onu_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repeat_) -
      reinterpret_cast<char*>(&onu_id_)) + sizeof(repeat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurstProfileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstProfileResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstProfileResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delimiter_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          delimiter_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delimiter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_delimiter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstProfileResponse.delimiter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 preamble_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          preamble_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string preamble = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_preamble();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstProfileResponse.preamble"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 repeat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          repeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pontag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_pontag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.BurstProfileResponse.pontag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurstProfileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.BurstProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstProfileResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstProfileResponse.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // int32 index = 4;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_index(), target);
  }

  // int32 delimiter_length = 5;
  if (this->delimiter_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_delimiter_length(), target);
  }

  // string delimiter = 6;
  if (this->delimiter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delimiter().data(), static_cast<int>(this->_internal_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstProfileResponse.delimiter");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_delimiter(), target);
  }

  // int32 preamble_length = 7;
  if (this->preamble_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_preamble_length(), target);
  }

  // string preamble = 8;
  if (this->preamble().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preamble().data(), static_cast<int>(this->_internal_preamble().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstProfileResponse.preamble");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_preamble(), target);
  }

  // int32 repeat = 9;
  if (this->repeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_repeat(), target);
  }

  // string pontag = 10;
  if (this->pontag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pontag().data(), static_cast<int>(this->_internal_pontag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.BurstProfileResponse.pontag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_pontag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.BurstProfileResponse)
  return target;
}

size_t BurstProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.BurstProfileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string delimiter = 6;
  if (this->delimiter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delimiter());
  }

  // string preamble = 8;
  if (this->preamble().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preamble());
  }

  // string pontag = 10;
  if (this->pontag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pontag());
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  // int32 index = 4;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 delimiter_length = 5;
  if (this->delimiter_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delimiter_length());
  }

  // int32 preamble_length = 7;
  if (this->preamble_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_preamble_length());
  }

  // int32 repeat = 9;
  if (this->repeat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BurstProfileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.BurstProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BurstProfileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BurstProfileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.BurstProfileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.BurstProfileResponse)
    MergeFrom(*source);
  }
}

void BurstProfileResponse::MergeFrom(const BurstProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.BurstProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.delimiter().size() > 0) {
    _internal_set_delimiter(from._internal_delimiter());
  }
  if (from.preamble().size() > 0) {
    _internal_set_preamble(from._internal_preamble());
  }
  if (from.pontag().size() > 0) {
    _internal_set_pontag(from._internal_pontag());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.delimiter_length() != 0) {
    _internal_set_delimiter_length(from._internal_delimiter_length());
  }
  if (from.preamble_length() != 0) {
    _internal_set_preamble_length(from._internal_preamble_length());
  }
  if (from.repeat() != 0) {
    _internal_set_repeat(from._internal_repeat());
  }
}

void BurstProfileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.BurstProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BurstProfileResponse::CopyFrom(const BurstProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.BurstProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurstProfileResponse::IsInitialized() const {
  return true;
}

void BurstProfileResponse::InternalSwap(BurstProfileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  delimiter_.Swap(&other->delimiter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preamble_.Swap(&other->preamble_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pontag_.Swap(&other->pontag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BurstProfileResponse, repeat_)
      + sizeof(BurstProfileResponse::repeat_)
      - PROTOBUF_FIELD_OFFSET(BurstProfileResponse, onu_id_)>(
          reinterpret_cast<char*>(&onu_id_),
          reinterpret_cast<char*>(&other->onu_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BurstProfileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegisterStatusResponse::_Internal {
 public:
};

RegisterStatusResponse::RegisterStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.RegisterStatusResponse)
}
RegisterStatusResponse::RegisterStatusResponse(const RegisterStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  onu_id_ = from.onu_id_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.RegisterStatusResponse)
}

void RegisterStatusResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onu_id_ = 0;
}

RegisterStatusResponse::~RegisterStatusResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.RegisterStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterStatusResponse::ArenaDtor(void* object) {
  RegisterStatusResponse* _this = reinterpret_cast< RegisterStatusResponse* >(object);
  (void)_this;
}
void RegisterStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisterStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.RegisterStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  status_.ClearToEmpty();
  onu_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.RegisterStatusResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.RegisterStatusResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.RegisterStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.RegisterStatusResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // string status = 3;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.RegisterStatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.RegisterStatusResponse)
  return target;
}

size_t RegisterStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.RegisterStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string status = 3;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.RegisterStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.RegisterStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.RegisterStatusResponse)
    MergeFrom(*source);
  }
}

void RegisterStatusResponse::MergeFrom(const RegisterStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.RegisterStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void RegisterStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.RegisterStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterStatusResponse::CopyFrom(const RegisterStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.RegisterStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterStatusResponse::IsInitialized() const {
  return true;
}

void RegisterStatusResponse::InternalSwap(RegisterStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(onu_id_, other->onu_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OnuInfoResponse::_Internal {
 public:
};

OnuInfoResponse::OnuInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.OnuInfoResponse)
}
OnuInfoResponse::OnuInfoResponse(const OnuInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rate().empty()) {
    rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rate(), 
      GetArena());
  }
  vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendor_id().empty()) {
    vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendor_id(), 
      GetArena());
  }
  vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vssn().empty()) {
    vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vssn(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&onu_id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(onu_id_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.OnuInfoResponse)
}

void OnuInfoResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vendor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vssn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&onu_id_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(onu_id_));
}

OnuInfoResponse::~OnuInfoResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.OnuInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OnuInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vssn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OnuInfoResponse::ArenaDtor(void* object) {
  OnuInfoResponse* _this = reinterpret_cast< OnuInfoResponse* >(object);
  (void)_this;
}
void OnuInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OnuInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OnuInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.OnuInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  rate_.ClearToEmpty();
  vendor_id_.ClearToEmpty();
  vssn_.ClearToEmpty();
  status_.ClearToEmpty();
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onu_id_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(onu_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OnuInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuInfoResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuInfoResponse.rate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vendor_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vendor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuInfoResponse.vendor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vssn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vssn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuInfoResponse.vssn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.OnuInfoResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnuInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.OnuInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuInfoResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // string rate = 3;
  if (this->rate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rate().data(), static_cast<int>(this->_internal_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuInfoResponse.rate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rate(), target);
  }

  // string vendor_id = 4;
  if (this->vendor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor_id().data(), static_cast<int>(this->_internal_vendor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuInfoResponse.vendor_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vendor_id(), target);
  }

  // string vssn = 5;
  if (this->vssn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vssn().data(), static_cast<int>(this->_internal_vssn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuInfoResponse.vssn");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vssn(), target);
  }

  // double distance = 6;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_distance(), target);
  }

  // string status = 7;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.OnuInfoResponse.status");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.OnuInfoResponse)
  return target;
}

size_t OnuInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.OnuInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string rate = 3;
  if (this->rate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rate());
  }

  // string vendor_id = 4;
  if (this->vendor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor_id());
  }

  // string vssn = 5;
  if (this->vssn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vssn());
  }

  // string status = 7;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // double distance = 6;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnuInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.OnuInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OnuInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnuInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.OnuInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.OnuInfoResponse)
    MergeFrom(*source);
  }
}

void OnuInfoResponse::MergeFrom(const OnuInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.OnuInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.rate().size() > 0) {
    _internal_set_rate(from._internal_rate());
  }
  if (from.vendor_id().size() > 0) {
    _internal_set_vendor_id(from._internal_vendor_id());
  }
  if (from.vssn().size() > 0) {
    _internal_set_vssn(from._internal_vssn());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
}

void OnuInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.OnuInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnuInfoResponse::CopyFrom(const OnuInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.OnuInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnuInfoResponse::IsInitialized() const {
  return true;
}

void OnuInfoResponse::InternalSwap(OnuInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rate_.Swap(&other->rate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendor_id_.Swap(&other->vendor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vssn_.Swap(&other->vssn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OnuInfoResponse, onu_id_)
      + sizeof(OnuInfoResponse::onu_id_)
      - PROTOBUF_FIELD_OFFSET(OnuInfoResponse, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OnuInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.StatusResponse)
}

void StatusResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.StatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.StatusResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.StatusResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.StatusResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.StatusResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.StatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void StatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TodResponse::_Internal {
 public:
};

TodResponse::TodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.TodResponse)
}
TodResponse::TodResponse(const TodResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.TodResponse)
}

void TodResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(time_));
}

TodResponse::~TodResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.TodResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TodResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TodResponse::ArenaDtor(void* object) {
  TodResponse* _this = reinterpret_cast< TodResponse* >(object);
  (void)_this;
}
void TodResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TodResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TodResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.TodResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TodResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.TodResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TodResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.TodResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.TodResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mode(), target);
  }

  // int32 time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.TodResponse)
  return target;
}

size_t TodResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.TodResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // int32 mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TodResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.TodResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TodResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TodResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.TodResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.TodResponse)
    MergeFrom(*source);
  }
}

void TodResponse::MergeFrom(const TodResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.TodResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void TodResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.TodResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TodResponse::CopyFrom(const TodResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.TodResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TodResponse::IsInitialized() const {
  return true;
}

void TodResponse::InternalSwap(TodResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TodResponse, time_)
      + sizeof(TodResponse::time_)
      - PROTOBUF_FIELD_OFFSET(TodResponse, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TodResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FecDecResponse::_Internal {
 public:
};

FecDecResponse::FecDecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.FecDecResponse)
}
FecDecResponse::FecDecResponse(const FecDecResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bossopenolt.FecDecResponse)
}

void FecDecResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FecDecResponse::~FecDecResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.FecDecResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FecDecResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FecDecResponse::ArenaDtor(void* object) {
  FecDecResponse* _this = reinterpret_cast< FecDecResponse* >(object);
  (void)_this;
}
void FecDecResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FecDecResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FecDecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.FecDecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FecDecResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.FecDecResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.FecDecResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FecDecResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.FecDecResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.FecDecResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.FecDecResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.FecDecResponse)
  return target;
}

size_t FecDecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.FecDecResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FecDecResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.FecDecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FecDecResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FecDecResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.FecDecResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.FecDecResponse)
    MergeFrom(*source);
  }
}

void FecDecResponse::MergeFrom(const FecDecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.FecDecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void FecDecResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.FecDecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FecDecResponse::CopyFrom(const FecDecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.FecDecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FecDecResponse::IsInitialized() const {
  return true;
}

void FecDecResponse::InternalSwap(FecDecResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FecDecResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorPermitResponse::_Internal {
 public:
};

ErrorPermitResponse::ErrorPermitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.ErrorPermitResponse)
}
ErrorPermitResponse::ErrorPermitResponse(const ErrorPermitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:bossopenolt.ErrorPermitResponse)
}

void ErrorPermitResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = 0;
}

ErrorPermitResponse::~ErrorPermitResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.ErrorPermitResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorPermitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorPermitResponse::ArenaDtor(void* object) {
  ErrorPermitResponse* _this = reinterpret_cast< ErrorPermitResponse* >(object);
  (void)_this;
}
void ErrorPermitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorPermitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorPermitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.ErrorPermitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorPermitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.ErrorPermitResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorPermitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.ErrorPermitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.ErrorPermitResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.ErrorPermitResponse)
  return target;
}

size_t ErrorPermitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.ErrorPermitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorPermitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.ErrorPermitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorPermitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorPermitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.ErrorPermitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.ErrorPermitResponse)
    MergeFrom(*source);
  }
}

void ErrorPermitResponse::MergeFrom(const ErrorPermitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.ErrorPermitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ErrorPermitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.ErrorPermitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorPermitResponse::CopyFrom(const ErrorPermitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.ErrorPermitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorPermitResponse::IsInitialized() const {
  return true;
}

void ErrorPermitResponse::InternalSwap(ErrorPermitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorPermitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PmControlResponse::_Internal {
 public:
};

PmControlResponse::PmControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.PmControlResponse)
}
PmControlResponse::PmControlResponse(const PmControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  onu_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onu_mode().empty()) {
    onu_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_onu_mode(), 
      GetArena());
  }
  ::memcpy(&transinit_, &from.transinit_,
    static_cast<size_t>(reinterpret_cast<char*>(&txinit_) -
    reinterpret_cast<char*>(&transinit_)) + sizeof(txinit_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.PmControlResponse)
}

void PmControlResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
onu_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transinit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&txinit_) -
    reinterpret_cast<char*>(&transinit_)) + sizeof(txinit_));
}

PmControlResponse::~PmControlResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.PmControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PmControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onu_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PmControlResponse::ArenaDtor(void* object) {
  PmControlResponse* _this = reinterpret_cast< PmControlResponse* >(object);
  (void)_this;
}
void PmControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PmControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PmControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.PmControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  action_.ClearToEmpty();
  onu_mode_.ClearToEmpty();
  ::memset(&transinit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txinit_) -
      reinterpret_cast<char*>(&transinit_)) + sizeof(txinit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PmControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmControlResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmControlResponse.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string onu_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_onu_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmControlResponse.onu_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transinit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transinit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 txinit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          txinit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.PmControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmControlResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // string action = 2;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmControlResponse.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // string onu_mode = 3;
  if (this->onu_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_onu_mode().data(), static_cast<int>(this->_internal_onu_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmControlResponse.onu_mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_onu_mode(), target);
  }

  // int32 transinit = 4;
  if (this->transinit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_transinit(), target);
  }

  // int32 txinit = 5;
  if (this->txinit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_txinit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.PmControlResponse)
  return target;
}

size_t PmControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.PmControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string action = 2;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string onu_mode = 3;
  if (this->onu_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_onu_mode());
  }

  // int32 transinit = 4;
  if (this->transinit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transinit());
  }

  // int32 txinit = 5;
  if (this->txinit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_txinit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.PmControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PmControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.PmControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.PmControlResponse)
    MergeFrom(*source);
  }
}

void PmControlResponse::MergeFrom(const PmControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.PmControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.onu_mode().size() > 0) {
    _internal_set_onu_mode(from._internal_onu_mode());
  }
  if (from.transinit() != 0) {
    _internal_set_transinit(from._internal_transinit());
  }
  if (from.txinit() != 0) {
    _internal_set_txinit(from._internal_txinit());
  }
}

void PmControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.PmControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmControlResponse::CopyFrom(const PmControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.PmControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmControlResponse::IsInitialized() const {
  return true;
}

void PmControlResponse::InternalSwap(PmControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  onu_mode_.Swap(&other->onu_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PmControlResponse, txinit_)
      + sizeof(PmControlResponse::txinit_)
      - PROTOBUF_FIELD_OFFSET(PmControlResponse, transinit_)>(
          reinterpret_cast<char*>(&transinit_),
          reinterpret_cast<char*>(&other->transinit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PmControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PmTableResponse::_Internal {
 public:
};

PmTableResponse::PmTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bossopenolt.PmTableResponse)
}
PmTableResponse::PmTableResponse(const PmTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArena());
  }
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mode(), 
      GetArena());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArena());
  }
  ::memcpy(&onu_id_, &from.onu_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hold_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(hold_));
  // @@protoc_insertion_point(copy_constructor:bossopenolt.PmTableResponse)
}

void PmTableResponse::SharedCtor() {
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&onu_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hold_) -
    reinterpret_cast<char*>(&onu_id_)) + sizeof(hold_));
}

PmTableResponse::~PmTableResponse() {
  // @@protoc_insertion_point(destructor:bossopenolt.PmTableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PmTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PmTableResponse::ArenaDtor(void* object) {
  PmTableResponse* _this = reinterpret_cast< PmTableResponse* >(object);
  (void)_this;
}
void PmTableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PmTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PmTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bossopenolt.PmTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_id_.ClearToEmpty();
  mode_.ClearToEmpty();
  action_.ClearToEmpty();
  status_.ClearToEmpty();
  ::memset(&onu_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hold_) -
      reinterpret_cast<char*>(&onu_id_)) + sizeof(hold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PmTableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmTableResponse.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 onu_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          onu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmTableResponse.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sleep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 aware = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          aware_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rxoff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rxoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmTableResponse.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bossopenolt.PmTableResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmTableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossopenolt.PmTableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmTableResponse.device_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_id(), target);
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_onu_id(), target);
  }

  // string mode = 3;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmTableResponse.mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mode(), target);
  }

  // int32 sleep = 4;
  if (this->sleep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sleep(), target);
  }

  // int32 aware = 5;
  if (this->aware() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_aware(), target);
  }

  // int32 rxoff = 6;
  if (this->rxoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_rxoff(), target);
  }

  // int32 hold = 7;
  if (this->hold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hold(), target);
  }

  // string action = 8;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmTableResponse.action");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_action(), target);
  }

  // string status = 9;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bossopenolt.PmTableResponse.status");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossopenolt.PmTableResponse)
  return target;
}

size_t PmTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bossopenolt.PmTableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_id = 1;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string mode = 3;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // string action = 8;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string status = 9;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int32 onu_id = 2;
  if (this->onu_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_onu_id());
  }

  // int32 sleep = 4;
  if (this->sleep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sleep());
  }

  // int32 aware = 5;
  if (this->aware() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aware());
  }

  // int32 rxoff = 6;
  if (this->rxoff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rxoff());
  }

  // int32 hold = 7;
  if (this->hold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmTableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bossopenolt.PmTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PmTableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmTableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bossopenolt.PmTableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bossopenolt.PmTableResponse)
    MergeFrom(*source);
  }
}

void PmTableResponse::MergeFrom(const PmTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bossopenolt.PmTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.mode().size() > 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.action().size() > 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.onu_id() != 0) {
    _internal_set_onu_id(from._internal_onu_id());
  }
  if (from.sleep() != 0) {
    _internal_set_sleep(from._internal_sleep());
  }
  if (from.aware() != 0) {
    _internal_set_aware(from._internal_aware());
  }
  if (from.rxoff() != 0) {
    _internal_set_rxoff(from._internal_rxoff());
  }
  if (from.hold() != 0) {
    _internal_set_hold(from._internal_hold());
  }
}

void PmTableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bossopenolt.PmTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmTableResponse::CopyFrom(const PmTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bossopenolt.PmTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmTableResponse::IsInitialized() const {
  return true;
}

void PmTableResponse::InternalSwap(PmTableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PmTableResponse, hold_)
      + sizeof(PmTableResponse::hold_)
      - PROTOBUF_FIELD_OFFSET(PmTableResponse, onu_id_)>(
          reinterpret_cast<char*>(&onu_id_),
          reinterpret_cast<char*>(&other->onu_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PmTableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bossopenolt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bossopenolt::boss_request* Arena::CreateMaybeMessage< ::bossopenolt::boss_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::boss_request >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::paramFields* Arena::CreateMaybeMessage< ::bossopenolt::paramFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::paramFields >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetPmControl* Arena::CreateMaybeMessage< ::bossopenolt::SetPmControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetPmControl >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetTod* Arena::CreateMaybeMessage< ::bossopenolt::SetTod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetTod >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetDsOmciData* Arena::CreateMaybeMessage< ::bossopenolt::SetDsOmciData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetDsOmciData >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetBurstVersion* Arena::CreateMaybeMessage< ::bossopenolt::SetBurstVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetBurstVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetBurstPreamble* Arena::CreateMaybeMessage< ::bossopenolt::SetBurstPreamble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetBurstPreamble >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetBurstDelimit* Arena::CreateMaybeMessage< ::bossopenolt::SetBurstDelimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetBurstDelimit >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetOnuVssn* Arena::CreateMaybeMessage< ::bossopenolt::SetOnuVssn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetOnuVssn >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetOnuAllocid* Arena::CreateMaybeMessage< ::bossopenolt::SetOnuAllocid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetOnuAllocid >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::ClearOnuSla* Arena::CreateMaybeMessage< ::bossopenolt::ClearOnuSla >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::ClearOnuSla >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::AddOnuSla* Arena::CreateMaybeMessage< ::bossopenolt::AddOnuSla >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::AddOnuSla >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetPmdTxdis* Arena::CreateMaybeMessage< ::bossopenolt::SetPmdTxdis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetPmdTxdis >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::GetPmdsKind* Arena::CreateMaybeMessage< ::bossopenolt::GetPmdsKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::GetPmdsKind >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetPort* Arena::CreateMaybeMessage< ::bossopenolt::SetPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetPort >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetPortKind* Arena::CreateMaybeMessage< ::bossopenolt::SetPortKind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetPortKind >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetMtuSize* Arena::CreateMaybeMessage< ::bossopenolt::SetMtuSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetMtuSize >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetVlan* Arena::CreateMaybeMessage< ::bossopenolt::SetVlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetVlan >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetSdnTable* Arena::CreateMaybeMessage< ::bossopenolt::SetSdnTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetSdnTable >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetDirectionMode* Arena::CreateMaybeMessage< ::bossopenolt::SetDirectionMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetDirectionMode >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::GetDirectionValue* Arena::CreateMaybeMessage< ::bossopenolt::GetDirectionValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::GetDirectionValue >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::GetSdnTable* Arena::CreateMaybeMessage< ::bossopenolt::GetSdnTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::GetSdnTable >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::IntegerValue* Arena::CreateMaybeMessage< ::bossopenolt::IntegerValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::IntegerValue >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::StringValue* Arena::CreateMaybeMessage< ::bossopenolt::StringValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::StringValue >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SetLength* Arena::CreateMaybeMessage< ::bossopenolt::SetLength >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SetLength >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::GetLength* Arena::CreateMaybeMessage< ::bossopenolt::GetLength >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::GetLength >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::OnuCtrl* Arena::CreateMaybeMessage< ::bossopenolt::OnuCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::OnuCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::OltConnResponse* Arena::CreateMaybeMessage< ::bossopenolt::OltConnResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::OltConnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::OltDevResponse* Arena::CreateMaybeMessage< ::bossopenolt::OltDevResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::OltDevResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::ExecResult* Arena::CreateMaybeMessage< ::bossopenolt::ExecResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::ExecResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::PmdTxdisResponse* Arena::CreateMaybeMessage< ::bossopenolt::PmdTxdisResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::PmdTxdisResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::PmdStatusResponse* Arena::CreateMaybeMessage< ::bossopenolt::PmdStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::PmdStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::GetPortResponse* Arena::CreateMaybeMessage< ::bossopenolt::GetPortResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::GetPortResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::MtuSizeResponse* Arena::CreateMaybeMessage< ::bossopenolt::MtuSizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::MtuSizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::GetVlanResponse* Arena::CreateMaybeMessage< ::bossopenolt::GetVlanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::GetVlanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::ModeResponse* Arena::CreateMaybeMessage< ::bossopenolt::ModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::ModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::AgingTimeResponse* Arena::CreateMaybeMessage< ::bossopenolt::AgingTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::AgingTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::DevMacInfoResponse* Arena::CreateMaybeMessage< ::bossopenolt::DevMacInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::DevMacInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SdnTableKeyResponse* Arena::CreateMaybeMessage< ::bossopenolt::SdnTableKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SdnTableKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SdnTableResponse* Arena::CreateMaybeMessage< ::bossopenolt::SdnTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SdnTableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::LengthResponse* Arena::CreateMaybeMessage< ::bossopenolt::LengthResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::LengthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::QuietZoneResponse* Arena::CreateMaybeMessage< ::bossopenolt::QuietZoneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::QuietZoneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::AddOnuResponse* Arena::CreateMaybeMessage< ::bossopenolt::AddOnuResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::AddOnuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::SlaResponse* Arena::CreateMaybeMessage< ::bossopenolt::SlaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::SlaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::OnuVssnResponse* Arena::CreateMaybeMessage< ::bossopenolt::OnuVssnResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::OnuVssnResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::OnuDistResponse* Arena::CreateMaybeMessage< ::bossopenolt::OnuDistResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::OnuDistResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::BurstDelimitResponse* Arena::CreateMaybeMessage< ::bossopenolt::BurstDelimitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::BurstDelimitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::BurstPreambleResponse* Arena::CreateMaybeMessage< ::bossopenolt::BurstPreambleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::BurstPreambleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::BurstVersionResponse* Arena::CreateMaybeMessage< ::bossopenolt::BurstVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::BurstVersionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::BurstProfileResponse* Arena::CreateMaybeMessage< ::bossopenolt::BurstProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::BurstProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::RegisterStatusResponse* Arena::CreateMaybeMessage< ::bossopenolt::RegisterStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::RegisterStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::OnuInfoResponse* Arena::CreateMaybeMessage< ::bossopenolt::OnuInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::OnuInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::StatusResponse* Arena::CreateMaybeMessage< ::bossopenolt::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::TodResponse* Arena::CreateMaybeMessage< ::bossopenolt::TodResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::TodResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::FecDecResponse* Arena::CreateMaybeMessage< ::bossopenolt::FecDecResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::FecDecResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::ErrorPermitResponse* Arena::CreateMaybeMessage< ::bossopenolt::ErrorPermitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::ErrorPermitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::PmControlResponse* Arena::CreateMaybeMessage< ::bossopenolt::PmControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::PmControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bossopenolt::PmTableResponse* Arena::CreateMaybeMessage< ::bossopenolt::PmTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bossopenolt::PmTableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
