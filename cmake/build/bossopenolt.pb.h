// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bossopenolt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bossopenolt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bossopenolt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bossopenolt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bossopenolt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[58]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bossopenolt_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_bossopenolt_2eproto_metadata_getter(int index);
namespace bossopenolt {
class AddOnuResponse;
struct AddOnuResponseDefaultTypeInternal;
extern AddOnuResponseDefaultTypeInternal _AddOnuResponse_default_instance_;
class AddOnuSla;
struct AddOnuSlaDefaultTypeInternal;
extern AddOnuSlaDefaultTypeInternal _AddOnuSla_default_instance_;
class AgingTimeResponse;
struct AgingTimeResponseDefaultTypeInternal;
extern AgingTimeResponseDefaultTypeInternal _AgingTimeResponse_default_instance_;
class BurstDelimitResponse;
struct BurstDelimitResponseDefaultTypeInternal;
extern BurstDelimitResponseDefaultTypeInternal _BurstDelimitResponse_default_instance_;
class BurstPreambleResponse;
struct BurstPreambleResponseDefaultTypeInternal;
extern BurstPreambleResponseDefaultTypeInternal _BurstPreambleResponse_default_instance_;
class BurstProfileResponse;
struct BurstProfileResponseDefaultTypeInternal;
extern BurstProfileResponseDefaultTypeInternal _BurstProfileResponse_default_instance_;
class BurstVersionResponse;
struct BurstVersionResponseDefaultTypeInternal;
extern BurstVersionResponseDefaultTypeInternal _BurstVersionResponse_default_instance_;
class ClearOnuSla;
struct ClearOnuSlaDefaultTypeInternal;
extern ClearOnuSlaDefaultTypeInternal _ClearOnuSla_default_instance_;
class DevMacInfoResponse;
struct DevMacInfoResponseDefaultTypeInternal;
extern DevMacInfoResponseDefaultTypeInternal _DevMacInfoResponse_default_instance_;
class ErrorPermitResponse;
struct ErrorPermitResponseDefaultTypeInternal;
extern ErrorPermitResponseDefaultTypeInternal _ErrorPermitResponse_default_instance_;
class ExecResult;
struct ExecResultDefaultTypeInternal;
extern ExecResultDefaultTypeInternal _ExecResult_default_instance_;
class FecDecResponse;
struct FecDecResponseDefaultTypeInternal;
extern FecDecResponseDefaultTypeInternal _FecDecResponse_default_instance_;
class GetDirectionValue;
struct GetDirectionValueDefaultTypeInternal;
extern GetDirectionValueDefaultTypeInternal _GetDirectionValue_default_instance_;
class GetLength;
struct GetLengthDefaultTypeInternal;
extern GetLengthDefaultTypeInternal _GetLength_default_instance_;
class GetPmdsKind;
struct GetPmdsKindDefaultTypeInternal;
extern GetPmdsKindDefaultTypeInternal _GetPmdsKind_default_instance_;
class GetPortResponse;
struct GetPortResponseDefaultTypeInternal;
extern GetPortResponseDefaultTypeInternal _GetPortResponse_default_instance_;
class GetSdnTable;
struct GetSdnTableDefaultTypeInternal;
extern GetSdnTableDefaultTypeInternal _GetSdnTable_default_instance_;
class GetVlanResponse;
struct GetVlanResponseDefaultTypeInternal;
extern GetVlanResponseDefaultTypeInternal _GetVlanResponse_default_instance_;
class IntegerValue;
struct IntegerValueDefaultTypeInternal;
extern IntegerValueDefaultTypeInternal _IntegerValue_default_instance_;
class LengthResponse;
struct LengthResponseDefaultTypeInternal;
extern LengthResponseDefaultTypeInternal _LengthResponse_default_instance_;
class ModeResponse;
struct ModeResponseDefaultTypeInternal;
extern ModeResponseDefaultTypeInternal _ModeResponse_default_instance_;
class MtuSizeResponse;
struct MtuSizeResponseDefaultTypeInternal;
extern MtuSizeResponseDefaultTypeInternal _MtuSizeResponse_default_instance_;
class OltConnResponse;
struct OltConnResponseDefaultTypeInternal;
extern OltConnResponseDefaultTypeInternal _OltConnResponse_default_instance_;
class OltDevResponse;
struct OltDevResponseDefaultTypeInternal;
extern OltDevResponseDefaultTypeInternal _OltDevResponse_default_instance_;
class OnuCtrl;
struct OnuCtrlDefaultTypeInternal;
extern OnuCtrlDefaultTypeInternal _OnuCtrl_default_instance_;
class OnuDistResponse;
struct OnuDistResponseDefaultTypeInternal;
extern OnuDistResponseDefaultTypeInternal _OnuDistResponse_default_instance_;
class OnuInfoResponse;
struct OnuInfoResponseDefaultTypeInternal;
extern OnuInfoResponseDefaultTypeInternal _OnuInfoResponse_default_instance_;
class OnuVssnResponse;
struct OnuVssnResponseDefaultTypeInternal;
extern OnuVssnResponseDefaultTypeInternal _OnuVssnResponse_default_instance_;
class PmControlResponse;
struct PmControlResponseDefaultTypeInternal;
extern PmControlResponseDefaultTypeInternal _PmControlResponse_default_instance_;
class PmTableResponse;
struct PmTableResponseDefaultTypeInternal;
extern PmTableResponseDefaultTypeInternal _PmTableResponse_default_instance_;
class PmdStatusResponse;
struct PmdStatusResponseDefaultTypeInternal;
extern PmdStatusResponseDefaultTypeInternal _PmdStatusResponse_default_instance_;
class PmdTxdisResponse;
struct PmdTxdisResponseDefaultTypeInternal;
extern PmdTxdisResponseDefaultTypeInternal _PmdTxdisResponse_default_instance_;
class QuietZoneResponse;
struct QuietZoneResponseDefaultTypeInternal;
extern QuietZoneResponseDefaultTypeInternal _QuietZoneResponse_default_instance_;
class RegisterStatusResponse;
struct RegisterStatusResponseDefaultTypeInternal;
extern RegisterStatusResponseDefaultTypeInternal _RegisterStatusResponse_default_instance_;
class SdnTableKeyResponse;
struct SdnTableKeyResponseDefaultTypeInternal;
extern SdnTableKeyResponseDefaultTypeInternal _SdnTableKeyResponse_default_instance_;
class SdnTableResponse;
struct SdnTableResponseDefaultTypeInternal;
extern SdnTableResponseDefaultTypeInternal _SdnTableResponse_default_instance_;
class SetBurstDelimit;
struct SetBurstDelimitDefaultTypeInternal;
extern SetBurstDelimitDefaultTypeInternal _SetBurstDelimit_default_instance_;
class SetBurstPreamble;
struct SetBurstPreambleDefaultTypeInternal;
extern SetBurstPreambleDefaultTypeInternal _SetBurstPreamble_default_instance_;
class SetBurstVersion;
struct SetBurstVersionDefaultTypeInternal;
extern SetBurstVersionDefaultTypeInternal _SetBurstVersion_default_instance_;
class SetDirectionMode;
struct SetDirectionModeDefaultTypeInternal;
extern SetDirectionModeDefaultTypeInternal _SetDirectionMode_default_instance_;
class SetDsOmciData;
struct SetDsOmciDataDefaultTypeInternal;
extern SetDsOmciDataDefaultTypeInternal _SetDsOmciData_default_instance_;
class SetLength;
struct SetLengthDefaultTypeInternal;
extern SetLengthDefaultTypeInternal _SetLength_default_instance_;
class SetMtuSize;
struct SetMtuSizeDefaultTypeInternal;
extern SetMtuSizeDefaultTypeInternal _SetMtuSize_default_instance_;
class SetOnuAllocid;
struct SetOnuAllocidDefaultTypeInternal;
extern SetOnuAllocidDefaultTypeInternal _SetOnuAllocid_default_instance_;
class SetOnuVssn;
struct SetOnuVssnDefaultTypeInternal;
extern SetOnuVssnDefaultTypeInternal _SetOnuVssn_default_instance_;
class SetPmControl;
struct SetPmControlDefaultTypeInternal;
extern SetPmControlDefaultTypeInternal _SetPmControl_default_instance_;
class SetPmdTxdis;
struct SetPmdTxdisDefaultTypeInternal;
extern SetPmdTxdisDefaultTypeInternal _SetPmdTxdis_default_instance_;
class SetPort;
struct SetPortDefaultTypeInternal;
extern SetPortDefaultTypeInternal _SetPort_default_instance_;
class SetPortKind;
struct SetPortKindDefaultTypeInternal;
extern SetPortKindDefaultTypeInternal _SetPortKind_default_instance_;
class SetSdnTable;
struct SetSdnTableDefaultTypeInternal;
extern SetSdnTableDefaultTypeInternal _SetSdnTable_default_instance_;
class SetTod;
struct SetTodDefaultTypeInternal;
extern SetTodDefaultTypeInternal _SetTod_default_instance_;
class SetVlan;
struct SetVlanDefaultTypeInternal;
extern SetVlanDefaultTypeInternal _SetVlan_default_instance_;
class SlaResponse;
struct SlaResponseDefaultTypeInternal;
extern SlaResponseDefaultTypeInternal _SlaResponse_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class StringValue;
struct StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class TodResponse;
struct TodResponseDefaultTypeInternal;
extern TodResponseDefaultTypeInternal _TodResponse_default_instance_;
class boss_request;
struct boss_requestDefaultTypeInternal;
extern boss_requestDefaultTypeInternal _boss_request_default_instance_;
class paramFields;
struct paramFieldsDefaultTypeInternal;
extern paramFieldsDefaultTypeInternal _paramFields_default_instance_;
}  // namespace bossopenolt
PROTOBUF_NAMESPACE_OPEN
template<> ::bossopenolt::AddOnuResponse* Arena::CreateMaybeMessage<::bossopenolt::AddOnuResponse>(Arena*);
template<> ::bossopenolt::AddOnuSla* Arena::CreateMaybeMessage<::bossopenolt::AddOnuSla>(Arena*);
template<> ::bossopenolt::AgingTimeResponse* Arena::CreateMaybeMessage<::bossopenolt::AgingTimeResponse>(Arena*);
template<> ::bossopenolt::BurstDelimitResponse* Arena::CreateMaybeMessage<::bossopenolt::BurstDelimitResponse>(Arena*);
template<> ::bossopenolt::BurstPreambleResponse* Arena::CreateMaybeMessage<::bossopenolt::BurstPreambleResponse>(Arena*);
template<> ::bossopenolt::BurstProfileResponse* Arena::CreateMaybeMessage<::bossopenolt::BurstProfileResponse>(Arena*);
template<> ::bossopenolt::BurstVersionResponse* Arena::CreateMaybeMessage<::bossopenolt::BurstVersionResponse>(Arena*);
template<> ::bossopenolt::ClearOnuSla* Arena::CreateMaybeMessage<::bossopenolt::ClearOnuSla>(Arena*);
template<> ::bossopenolt::DevMacInfoResponse* Arena::CreateMaybeMessage<::bossopenolt::DevMacInfoResponse>(Arena*);
template<> ::bossopenolt::ErrorPermitResponse* Arena::CreateMaybeMessage<::bossopenolt::ErrorPermitResponse>(Arena*);
template<> ::bossopenolt::ExecResult* Arena::CreateMaybeMessage<::bossopenolt::ExecResult>(Arena*);
template<> ::bossopenolt::FecDecResponse* Arena::CreateMaybeMessage<::bossopenolt::FecDecResponse>(Arena*);
template<> ::bossopenolt::GetDirectionValue* Arena::CreateMaybeMessage<::bossopenolt::GetDirectionValue>(Arena*);
template<> ::bossopenolt::GetLength* Arena::CreateMaybeMessage<::bossopenolt::GetLength>(Arena*);
template<> ::bossopenolt::GetPmdsKind* Arena::CreateMaybeMessage<::bossopenolt::GetPmdsKind>(Arena*);
template<> ::bossopenolt::GetPortResponse* Arena::CreateMaybeMessage<::bossopenolt::GetPortResponse>(Arena*);
template<> ::bossopenolt::GetSdnTable* Arena::CreateMaybeMessage<::bossopenolt::GetSdnTable>(Arena*);
template<> ::bossopenolt::GetVlanResponse* Arena::CreateMaybeMessage<::bossopenolt::GetVlanResponse>(Arena*);
template<> ::bossopenolt::IntegerValue* Arena::CreateMaybeMessage<::bossopenolt::IntegerValue>(Arena*);
template<> ::bossopenolt::LengthResponse* Arena::CreateMaybeMessage<::bossopenolt::LengthResponse>(Arena*);
template<> ::bossopenolt::ModeResponse* Arena::CreateMaybeMessage<::bossopenolt::ModeResponse>(Arena*);
template<> ::bossopenolt::MtuSizeResponse* Arena::CreateMaybeMessage<::bossopenolt::MtuSizeResponse>(Arena*);
template<> ::bossopenolt::OltConnResponse* Arena::CreateMaybeMessage<::bossopenolt::OltConnResponse>(Arena*);
template<> ::bossopenolt::OltDevResponse* Arena::CreateMaybeMessage<::bossopenolt::OltDevResponse>(Arena*);
template<> ::bossopenolt::OnuCtrl* Arena::CreateMaybeMessage<::bossopenolt::OnuCtrl>(Arena*);
template<> ::bossopenolt::OnuDistResponse* Arena::CreateMaybeMessage<::bossopenolt::OnuDistResponse>(Arena*);
template<> ::bossopenolt::OnuInfoResponse* Arena::CreateMaybeMessage<::bossopenolt::OnuInfoResponse>(Arena*);
template<> ::bossopenolt::OnuVssnResponse* Arena::CreateMaybeMessage<::bossopenolt::OnuVssnResponse>(Arena*);
template<> ::bossopenolt::PmControlResponse* Arena::CreateMaybeMessage<::bossopenolt::PmControlResponse>(Arena*);
template<> ::bossopenolt::PmTableResponse* Arena::CreateMaybeMessage<::bossopenolt::PmTableResponse>(Arena*);
template<> ::bossopenolt::PmdStatusResponse* Arena::CreateMaybeMessage<::bossopenolt::PmdStatusResponse>(Arena*);
template<> ::bossopenolt::PmdTxdisResponse* Arena::CreateMaybeMessage<::bossopenolt::PmdTxdisResponse>(Arena*);
template<> ::bossopenolt::QuietZoneResponse* Arena::CreateMaybeMessage<::bossopenolt::QuietZoneResponse>(Arena*);
template<> ::bossopenolt::RegisterStatusResponse* Arena::CreateMaybeMessage<::bossopenolt::RegisterStatusResponse>(Arena*);
template<> ::bossopenolt::SdnTableKeyResponse* Arena::CreateMaybeMessage<::bossopenolt::SdnTableKeyResponse>(Arena*);
template<> ::bossopenolt::SdnTableResponse* Arena::CreateMaybeMessage<::bossopenolt::SdnTableResponse>(Arena*);
template<> ::bossopenolt::SetBurstDelimit* Arena::CreateMaybeMessage<::bossopenolt::SetBurstDelimit>(Arena*);
template<> ::bossopenolt::SetBurstPreamble* Arena::CreateMaybeMessage<::bossopenolt::SetBurstPreamble>(Arena*);
template<> ::bossopenolt::SetBurstVersion* Arena::CreateMaybeMessage<::bossopenolt::SetBurstVersion>(Arena*);
template<> ::bossopenolt::SetDirectionMode* Arena::CreateMaybeMessage<::bossopenolt::SetDirectionMode>(Arena*);
template<> ::bossopenolt::SetDsOmciData* Arena::CreateMaybeMessage<::bossopenolt::SetDsOmciData>(Arena*);
template<> ::bossopenolt::SetLength* Arena::CreateMaybeMessage<::bossopenolt::SetLength>(Arena*);
template<> ::bossopenolt::SetMtuSize* Arena::CreateMaybeMessage<::bossopenolt::SetMtuSize>(Arena*);
template<> ::bossopenolt::SetOnuAllocid* Arena::CreateMaybeMessage<::bossopenolt::SetOnuAllocid>(Arena*);
template<> ::bossopenolt::SetOnuVssn* Arena::CreateMaybeMessage<::bossopenolt::SetOnuVssn>(Arena*);
template<> ::bossopenolt::SetPmControl* Arena::CreateMaybeMessage<::bossopenolt::SetPmControl>(Arena*);
template<> ::bossopenolt::SetPmdTxdis* Arena::CreateMaybeMessage<::bossopenolt::SetPmdTxdis>(Arena*);
template<> ::bossopenolt::SetPort* Arena::CreateMaybeMessage<::bossopenolt::SetPort>(Arena*);
template<> ::bossopenolt::SetPortKind* Arena::CreateMaybeMessage<::bossopenolt::SetPortKind>(Arena*);
template<> ::bossopenolt::SetSdnTable* Arena::CreateMaybeMessage<::bossopenolt::SetSdnTable>(Arena*);
template<> ::bossopenolt::SetTod* Arena::CreateMaybeMessage<::bossopenolt::SetTod>(Arena*);
template<> ::bossopenolt::SetVlan* Arena::CreateMaybeMessage<::bossopenolt::SetVlan>(Arena*);
template<> ::bossopenolt::SlaResponse* Arena::CreateMaybeMessage<::bossopenolt::SlaResponse>(Arena*);
template<> ::bossopenolt::StatusResponse* Arena::CreateMaybeMessage<::bossopenolt::StatusResponse>(Arena*);
template<> ::bossopenolt::StringValue* Arena::CreateMaybeMessage<::bossopenolt::StringValue>(Arena*);
template<> ::bossopenolt::TodResponse* Arena::CreateMaybeMessage<::bossopenolt::TodResponse>(Arena*);
template<> ::bossopenolt::boss_request* Arena::CreateMaybeMessage<::bossopenolt::boss_request>(Arena*);
template<> ::bossopenolt::paramFields* Arena::CreateMaybeMessage<::bossopenolt::paramFields>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bossopenolt {

// ===================================================================

class boss_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.boss_request) */ {
 public:
  inline boss_request() : boss_request(nullptr) {}
  virtual ~boss_request();
  explicit constexpr boss_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  boss_request(const boss_request& from);
  boss_request(boss_request&& from) noexcept
    : boss_request() {
    *this = ::std::move(from);
  }

  inline boss_request& operator=(const boss_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline boss_request& operator=(boss_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const boss_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const boss_request* internal_default_instance() {
    return reinterpret_cast<const boss_request*>(
               &_boss_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(boss_request& a, boss_request& b) {
    a.Swap(&b);
  }
  inline void Swap(boss_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(boss_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline boss_request* New() const final {
    return CreateMaybeMessage<boss_request>(nullptr);
  }

  boss_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<boss_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const boss_request& from);
  void MergeFrom(const boss_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(boss_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.boss_request";
  }
  protected:
  explicit boss_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .bossopenolt.paramFields param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::bossopenolt::paramFields& param() const;
  ::bossopenolt::paramFields* release_param();
  ::bossopenolt::paramFields* mutable_param();
  void set_allocated_param(::bossopenolt::paramFields* param);
  private:
  const ::bossopenolt::paramFields& _internal_param() const;
  ::bossopenolt::paramFields* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::bossopenolt::paramFields* param);
  ::bossopenolt::paramFields* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:bossopenolt.boss_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::bossopenolt::paramFields* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class paramFields PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.paramFields) */ {
 public:
  inline paramFields() : paramFields(nullptr) {}
  virtual ~paramFields();
  explicit constexpr paramFields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  paramFields(const paramFields& from);
  paramFields(paramFields&& from) noexcept
    : paramFields() {
    *this = ::std::move(from);
  }

  inline paramFields& operator=(const paramFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline paramFields& operator=(paramFields&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const paramFields& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kSetpmdtxdisParam = 2,
    kGetpmdskindParam = 3,
    kSetportAram = 4,
    kSetportkindParam = 5,
    kSetmtusizeParam = 6,
    kSetvlanParam = 7,
    kSetdirectiommodeParam = 8,
    kGetdirectionvalueParam = 9,
    kIntegervalueParam = 10,
    kSetsdntableParam = 11,
    kGetsdntableParam = 12,
    kSetlengthParam = 13,
    kGetlengthParam = 14,
    kOnuctrlParam = 15,
    kAddonuslaParam = 16,
    kClearonuslaParam = 17,
    kSetonuallocidParam = 18,
    kSetonuvssnParam = 19,
    kSetburstdelimitParam = 20,
    kSetburstpreambleParam = 21,
    kSetburstversionParam = 22,
    kSetdsomcidataParam = 23,
    kSettodParam = 24,
    kStringvalueParam = 25,
    kSetpmcontrolParam = 26,
    DATA_NOT_SET = 0,
  };

  static inline const paramFields* internal_default_instance() {
    return reinterpret_cast<const paramFields*>(
               &_paramFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(paramFields& a, paramFields& b) {
    a.Swap(&b);
  }
  inline void Swap(paramFields* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(paramFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline paramFields* New() const final {
    return CreateMaybeMessage<paramFields>(nullptr);
  }

  paramFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<paramFields>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const paramFields& from);
  void MergeFrom(const paramFields& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(paramFields* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.paramFields";
  }
  protected:
  explicit paramFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetpmdtxdisParamFieldNumber = 2,
    kGetpmdskindParamFieldNumber = 3,
    kSetportAramFieldNumber = 4,
    kSetportkindParamFieldNumber = 5,
    kSetmtusizeParamFieldNumber = 6,
    kSetvlanParamFieldNumber = 7,
    kSetdirectiommodeParamFieldNumber = 8,
    kGetdirectionvalueParamFieldNumber = 9,
    kIntegervalueParamFieldNumber = 10,
    kSetsdntableParamFieldNumber = 11,
    kGetsdntableParamFieldNumber = 12,
    kSetlengthParamFieldNumber = 13,
    kGetlengthParamFieldNumber = 14,
    kOnuctrlParamFieldNumber = 15,
    kAddonuslaParamFieldNumber = 16,
    kClearonuslaParamFieldNumber = 17,
    kSetonuallocidParamFieldNumber = 18,
    kSetonuvssnParamFieldNumber = 19,
    kSetburstdelimitParamFieldNumber = 20,
    kSetburstpreambleParamFieldNumber = 21,
    kSetburstversionParamFieldNumber = 22,
    kSetdsomcidataParamFieldNumber = 23,
    kSettodParamFieldNumber = 24,
    kStringvalueParamFieldNumber = 25,
    kSetpmcontrolParamFieldNumber = 26,
  };
  // .bossopenolt.SetPmdTxdis setpmdtxdis_param = 2;
  bool has_setpmdtxdis_param() const;
  private:
  bool _internal_has_setpmdtxdis_param() const;
  public:
  void clear_setpmdtxdis_param();
  const ::bossopenolt::SetPmdTxdis& setpmdtxdis_param() const;
  ::bossopenolt::SetPmdTxdis* release_setpmdtxdis_param();
  ::bossopenolt::SetPmdTxdis* mutable_setpmdtxdis_param();
  void set_allocated_setpmdtxdis_param(::bossopenolt::SetPmdTxdis* setpmdtxdis_param);
  private:
  const ::bossopenolt::SetPmdTxdis& _internal_setpmdtxdis_param() const;
  ::bossopenolt::SetPmdTxdis* _internal_mutable_setpmdtxdis_param();
  public:
  void unsafe_arena_set_allocated_setpmdtxdis_param(
      ::bossopenolt::SetPmdTxdis* setpmdtxdis_param);
  ::bossopenolt::SetPmdTxdis* unsafe_arena_release_setpmdtxdis_param();

  // .bossopenolt.GetPmdsKind getpmdskind_param = 3;
  bool has_getpmdskind_param() const;
  private:
  bool _internal_has_getpmdskind_param() const;
  public:
  void clear_getpmdskind_param();
  const ::bossopenolt::GetPmdsKind& getpmdskind_param() const;
  ::bossopenolt::GetPmdsKind* release_getpmdskind_param();
  ::bossopenolt::GetPmdsKind* mutable_getpmdskind_param();
  void set_allocated_getpmdskind_param(::bossopenolt::GetPmdsKind* getpmdskind_param);
  private:
  const ::bossopenolt::GetPmdsKind& _internal_getpmdskind_param() const;
  ::bossopenolt::GetPmdsKind* _internal_mutable_getpmdskind_param();
  public:
  void unsafe_arena_set_allocated_getpmdskind_param(
      ::bossopenolt::GetPmdsKind* getpmdskind_param);
  ::bossopenolt::GetPmdsKind* unsafe_arena_release_getpmdskind_param();

  // .bossopenolt.SetPort setport_aram = 4;
  bool has_setport_aram() const;
  private:
  bool _internal_has_setport_aram() const;
  public:
  void clear_setport_aram();
  const ::bossopenolt::SetPort& setport_aram() const;
  ::bossopenolt::SetPort* release_setport_aram();
  ::bossopenolt::SetPort* mutable_setport_aram();
  void set_allocated_setport_aram(::bossopenolt::SetPort* setport_aram);
  private:
  const ::bossopenolt::SetPort& _internal_setport_aram() const;
  ::bossopenolt::SetPort* _internal_mutable_setport_aram();
  public:
  void unsafe_arena_set_allocated_setport_aram(
      ::bossopenolt::SetPort* setport_aram);
  ::bossopenolt::SetPort* unsafe_arena_release_setport_aram();

  // .bossopenolt.SetPortKind setportkind_param = 5;
  bool has_setportkind_param() const;
  private:
  bool _internal_has_setportkind_param() const;
  public:
  void clear_setportkind_param();
  const ::bossopenolt::SetPortKind& setportkind_param() const;
  ::bossopenolt::SetPortKind* release_setportkind_param();
  ::bossopenolt::SetPortKind* mutable_setportkind_param();
  void set_allocated_setportkind_param(::bossopenolt::SetPortKind* setportkind_param);
  private:
  const ::bossopenolt::SetPortKind& _internal_setportkind_param() const;
  ::bossopenolt::SetPortKind* _internal_mutable_setportkind_param();
  public:
  void unsafe_arena_set_allocated_setportkind_param(
      ::bossopenolt::SetPortKind* setportkind_param);
  ::bossopenolt::SetPortKind* unsafe_arena_release_setportkind_param();

  // .bossopenolt.SetMtuSize setmtusize_param = 6;
  bool has_setmtusize_param() const;
  private:
  bool _internal_has_setmtusize_param() const;
  public:
  void clear_setmtusize_param();
  const ::bossopenolt::SetMtuSize& setmtusize_param() const;
  ::bossopenolt::SetMtuSize* release_setmtusize_param();
  ::bossopenolt::SetMtuSize* mutable_setmtusize_param();
  void set_allocated_setmtusize_param(::bossopenolt::SetMtuSize* setmtusize_param);
  private:
  const ::bossopenolt::SetMtuSize& _internal_setmtusize_param() const;
  ::bossopenolt::SetMtuSize* _internal_mutable_setmtusize_param();
  public:
  void unsafe_arena_set_allocated_setmtusize_param(
      ::bossopenolt::SetMtuSize* setmtusize_param);
  ::bossopenolt::SetMtuSize* unsafe_arena_release_setmtusize_param();

  // .bossopenolt.SetVlan setvlan_param = 7;
  bool has_setvlan_param() const;
  private:
  bool _internal_has_setvlan_param() const;
  public:
  void clear_setvlan_param();
  const ::bossopenolt::SetVlan& setvlan_param() const;
  ::bossopenolt::SetVlan* release_setvlan_param();
  ::bossopenolt::SetVlan* mutable_setvlan_param();
  void set_allocated_setvlan_param(::bossopenolt::SetVlan* setvlan_param);
  private:
  const ::bossopenolt::SetVlan& _internal_setvlan_param() const;
  ::bossopenolt::SetVlan* _internal_mutable_setvlan_param();
  public:
  void unsafe_arena_set_allocated_setvlan_param(
      ::bossopenolt::SetVlan* setvlan_param);
  ::bossopenolt::SetVlan* unsafe_arena_release_setvlan_param();

  // .bossopenolt.SetDirectionMode setdirectiommode_param = 8;
  bool has_setdirectiommode_param() const;
  private:
  bool _internal_has_setdirectiommode_param() const;
  public:
  void clear_setdirectiommode_param();
  const ::bossopenolt::SetDirectionMode& setdirectiommode_param() const;
  ::bossopenolt::SetDirectionMode* release_setdirectiommode_param();
  ::bossopenolt::SetDirectionMode* mutable_setdirectiommode_param();
  void set_allocated_setdirectiommode_param(::bossopenolt::SetDirectionMode* setdirectiommode_param);
  private:
  const ::bossopenolt::SetDirectionMode& _internal_setdirectiommode_param() const;
  ::bossopenolt::SetDirectionMode* _internal_mutable_setdirectiommode_param();
  public:
  void unsafe_arena_set_allocated_setdirectiommode_param(
      ::bossopenolt::SetDirectionMode* setdirectiommode_param);
  ::bossopenolt::SetDirectionMode* unsafe_arena_release_setdirectiommode_param();

  // .bossopenolt.GetDirectionValue getdirectionvalue_param = 9;
  bool has_getdirectionvalue_param() const;
  private:
  bool _internal_has_getdirectionvalue_param() const;
  public:
  void clear_getdirectionvalue_param();
  const ::bossopenolt::GetDirectionValue& getdirectionvalue_param() const;
  ::bossopenolt::GetDirectionValue* release_getdirectionvalue_param();
  ::bossopenolt::GetDirectionValue* mutable_getdirectionvalue_param();
  void set_allocated_getdirectionvalue_param(::bossopenolt::GetDirectionValue* getdirectionvalue_param);
  private:
  const ::bossopenolt::GetDirectionValue& _internal_getdirectionvalue_param() const;
  ::bossopenolt::GetDirectionValue* _internal_mutable_getdirectionvalue_param();
  public:
  void unsafe_arena_set_allocated_getdirectionvalue_param(
      ::bossopenolt::GetDirectionValue* getdirectionvalue_param);
  ::bossopenolt::GetDirectionValue* unsafe_arena_release_getdirectionvalue_param();

  // .bossopenolt.IntegerValue integervalue_param = 10;
  bool has_integervalue_param() const;
  private:
  bool _internal_has_integervalue_param() const;
  public:
  void clear_integervalue_param();
  const ::bossopenolt::IntegerValue& integervalue_param() const;
  ::bossopenolt::IntegerValue* release_integervalue_param();
  ::bossopenolt::IntegerValue* mutable_integervalue_param();
  void set_allocated_integervalue_param(::bossopenolt::IntegerValue* integervalue_param);
  private:
  const ::bossopenolt::IntegerValue& _internal_integervalue_param() const;
  ::bossopenolt::IntegerValue* _internal_mutable_integervalue_param();
  public:
  void unsafe_arena_set_allocated_integervalue_param(
      ::bossopenolt::IntegerValue* integervalue_param);
  ::bossopenolt::IntegerValue* unsafe_arena_release_integervalue_param();

  // .bossopenolt.SetSdnTable setsdntable_param = 11;
  bool has_setsdntable_param() const;
  private:
  bool _internal_has_setsdntable_param() const;
  public:
  void clear_setsdntable_param();
  const ::bossopenolt::SetSdnTable& setsdntable_param() const;
  ::bossopenolt::SetSdnTable* release_setsdntable_param();
  ::bossopenolt::SetSdnTable* mutable_setsdntable_param();
  void set_allocated_setsdntable_param(::bossopenolt::SetSdnTable* setsdntable_param);
  private:
  const ::bossopenolt::SetSdnTable& _internal_setsdntable_param() const;
  ::bossopenolt::SetSdnTable* _internal_mutable_setsdntable_param();
  public:
  void unsafe_arena_set_allocated_setsdntable_param(
      ::bossopenolt::SetSdnTable* setsdntable_param);
  ::bossopenolt::SetSdnTable* unsafe_arena_release_setsdntable_param();

  // .bossopenolt.GetSdnTable getsdntable_param = 12;
  bool has_getsdntable_param() const;
  private:
  bool _internal_has_getsdntable_param() const;
  public:
  void clear_getsdntable_param();
  const ::bossopenolt::GetSdnTable& getsdntable_param() const;
  ::bossopenolt::GetSdnTable* release_getsdntable_param();
  ::bossopenolt::GetSdnTable* mutable_getsdntable_param();
  void set_allocated_getsdntable_param(::bossopenolt::GetSdnTable* getsdntable_param);
  private:
  const ::bossopenolt::GetSdnTable& _internal_getsdntable_param() const;
  ::bossopenolt::GetSdnTable* _internal_mutable_getsdntable_param();
  public:
  void unsafe_arena_set_allocated_getsdntable_param(
      ::bossopenolt::GetSdnTable* getsdntable_param);
  ::bossopenolt::GetSdnTable* unsafe_arena_release_getsdntable_param();

  // .bossopenolt.SetLength setlength_param = 13;
  bool has_setlength_param() const;
  private:
  bool _internal_has_setlength_param() const;
  public:
  void clear_setlength_param();
  const ::bossopenolt::SetLength& setlength_param() const;
  ::bossopenolt::SetLength* release_setlength_param();
  ::bossopenolt::SetLength* mutable_setlength_param();
  void set_allocated_setlength_param(::bossopenolt::SetLength* setlength_param);
  private:
  const ::bossopenolt::SetLength& _internal_setlength_param() const;
  ::bossopenolt::SetLength* _internal_mutable_setlength_param();
  public:
  void unsafe_arena_set_allocated_setlength_param(
      ::bossopenolt::SetLength* setlength_param);
  ::bossopenolt::SetLength* unsafe_arena_release_setlength_param();

  // .bossopenolt.GetLength getlength_param = 14;
  bool has_getlength_param() const;
  private:
  bool _internal_has_getlength_param() const;
  public:
  void clear_getlength_param();
  const ::bossopenolt::GetLength& getlength_param() const;
  ::bossopenolt::GetLength* release_getlength_param();
  ::bossopenolt::GetLength* mutable_getlength_param();
  void set_allocated_getlength_param(::bossopenolt::GetLength* getlength_param);
  private:
  const ::bossopenolt::GetLength& _internal_getlength_param() const;
  ::bossopenolt::GetLength* _internal_mutable_getlength_param();
  public:
  void unsafe_arena_set_allocated_getlength_param(
      ::bossopenolt::GetLength* getlength_param);
  ::bossopenolt::GetLength* unsafe_arena_release_getlength_param();

  // .bossopenolt.OnuCtrl onuctrl_param = 15;
  bool has_onuctrl_param() const;
  private:
  bool _internal_has_onuctrl_param() const;
  public:
  void clear_onuctrl_param();
  const ::bossopenolt::OnuCtrl& onuctrl_param() const;
  ::bossopenolt::OnuCtrl* release_onuctrl_param();
  ::bossopenolt::OnuCtrl* mutable_onuctrl_param();
  void set_allocated_onuctrl_param(::bossopenolt::OnuCtrl* onuctrl_param);
  private:
  const ::bossopenolt::OnuCtrl& _internal_onuctrl_param() const;
  ::bossopenolt::OnuCtrl* _internal_mutable_onuctrl_param();
  public:
  void unsafe_arena_set_allocated_onuctrl_param(
      ::bossopenolt::OnuCtrl* onuctrl_param);
  ::bossopenolt::OnuCtrl* unsafe_arena_release_onuctrl_param();

  // .bossopenolt.AddOnuSla addonusla_param = 16;
  bool has_addonusla_param() const;
  private:
  bool _internal_has_addonusla_param() const;
  public:
  void clear_addonusla_param();
  const ::bossopenolt::AddOnuSla& addonusla_param() const;
  ::bossopenolt::AddOnuSla* release_addonusla_param();
  ::bossopenolt::AddOnuSla* mutable_addonusla_param();
  void set_allocated_addonusla_param(::bossopenolt::AddOnuSla* addonusla_param);
  private:
  const ::bossopenolt::AddOnuSla& _internal_addonusla_param() const;
  ::bossopenolt::AddOnuSla* _internal_mutable_addonusla_param();
  public:
  void unsafe_arena_set_allocated_addonusla_param(
      ::bossopenolt::AddOnuSla* addonusla_param);
  ::bossopenolt::AddOnuSla* unsafe_arena_release_addonusla_param();

  // .bossopenolt.ClearOnuSla clearonusla_param = 17;
  bool has_clearonusla_param() const;
  private:
  bool _internal_has_clearonusla_param() const;
  public:
  void clear_clearonusla_param();
  const ::bossopenolt::ClearOnuSla& clearonusla_param() const;
  ::bossopenolt::ClearOnuSla* release_clearonusla_param();
  ::bossopenolt::ClearOnuSla* mutable_clearonusla_param();
  void set_allocated_clearonusla_param(::bossopenolt::ClearOnuSla* clearonusla_param);
  private:
  const ::bossopenolt::ClearOnuSla& _internal_clearonusla_param() const;
  ::bossopenolt::ClearOnuSla* _internal_mutable_clearonusla_param();
  public:
  void unsafe_arena_set_allocated_clearonusla_param(
      ::bossopenolt::ClearOnuSla* clearonusla_param);
  ::bossopenolt::ClearOnuSla* unsafe_arena_release_clearonusla_param();

  // .bossopenolt.SetOnuAllocid setonuallocid_param = 18;
  bool has_setonuallocid_param() const;
  private:
  bool _internal_has_setonuallocid_param() const;
  public:
  void clear_setonuallocid_param();
  const ::bossopenolt::SetOnuAllocid& setonuallocid_param() const;
  ::bossopenolt::SetOnuAllocid* release_setonuallocid_param();
  ::bossopenolt::SetOnuAllocid* mutable_setonuallocid_param();
  void set_allocated_setonuallocid_param(::bossopenolt::SetOnuAllocid* setonuallocid_param);
  private:
  const ::bossopenolt::SetOnuAllocid& _internal_setonuallocid_param() const;
  ::bossopenolt::SetOnuAllocid* _internal_mutable_setonuallocid_param();
  public:
  void unsafe_arena_set_allocated_setonuallocid_param(
      ::bossopenolt::SetOnuAllocid* setonuallocid_param);
  ::bossopenolt::SetOnuAllocid* unsafe_arena_release_setonuallocid_param();

  // .bossopenolt.SetOnuVssn setonuvssn_param = 19;
  bool has_setonuvssn_param() const;
  private:
  bool _internal_has_setonuvssn_param() const;
  public:
  void clear_setonuvssn_param();
  const ::bossopenolt::SetOnuVssn& setonuvssn_param() const;
  ::bossopenolt::SetOnuVssn* release_setonuvssn_param();
  ::bossopenolt::SetOnuVssn* mutable_setonuvssn_param();
  void set_allocated_setonuvssn_param(::bossopenolt::SetOnuVssn* setonuvssn_param);
  private:
  const ::bossopenolt::SetOnuVssn& _internal_setonuvssn_param() const;
  ::bossopenolt::SetOnuVssn* _internal_mutable_setonuvssn_param();
  public:
  void unsafe_arena_set_allocated_setonuvssn_param(
      ::bossopenolt::SetOnuVssn* setonuvssn_param);
  ::bossopenolt::SetOnuVssn* unsafe_arena_release_setonuvssn_param();

  // .bossopenolt.SetBurstDelimit setburstdelimit_param = 20;
  bool has_setburstdelimit_param() const;
  private:
  bool _internal_has_setburstdelimit_param() const;
  public:
  void clear_setburstdelimit_param();
  const ::bossopenolt::SetBurstDelimit& setburstdelimit_param() const;
  ::bossopenolt::SetBurstDelimit* release_setburstdelimit_param();
  ::bossopenolt::SetBurstDelimit* mutable_setburstdelimit_param();
  void set_allocated_setburstdelimit_param(::bossopenolt::SetBurstDelimit* setburstdelimit_param);
  private:
  const ::bossopenolt::SetBurstDelimit& _internal_setburstdelimit_param() const;
  ::bossopenolt::SetBurstDelimit* _internal_mutable_setburstdelimit_param();
  public:
  void unsafe_arena_set_allocated_setburstdelimit_param(
      ::bossopenolt::SetBurstDelimit* setburstdelimit_param);
  ::bossopenolt::SetBurstDelimit* unsafe_arena_release_setburstdelimit_param();

  // .bossopenolt.SetBurstPreamble setburstpreamble_param = 21;
  bool has_setburstpreamble_param() const;
  private:
  bool _internal_has_setburstpreamble_param() const;
  public:
  void clear_setburstpreamble_param();
  const ::bossopenolt::SetBurstPreamble& setburstpreamble_param() const;
  ::bossopenolt::SetBurstPreamble* release_setburstpreamble_param();
  ::bossopenolt::SetBurstPreamble* mutable_setburstpreamble_param();
  void set_allocated_setburstpreamble_param(::bossopenolt::SetBurstPreamble* setburstpreamble_param);
  private:
  const ::bossopenolt::SetBurstPreamble& _internal_setburstpreamble_param() const;
  ::bossopenolt::SetBurstPreamble* _internal_mutable_setburstpreamble_param();
  public:
  void unsafe_arena_set_allocated_setburstpreamble_param(
      ::bossopenolt::SetBurstPreamble* setburstpreamble_param);
  ::bossopenolt::SetBurstPreamble* unsafe_arena_release_setburstpreamble_param();

  // .bossopenolt.SetBurstVersion setburstversion_param = 22;
  bool has_setburstversion_param() const;
  private:
  bool _internal_has_setburstversion_param() const;
  public:
  void clear_setburstversion_param();
  const ::bossopenolt::SetBurstVersion& setburstversion_param() const;
  ::bossopenolt::SetBurstVersion* release_setburstversion_param();
  ::bossopenolt::SetBurstVersion* mutable_setburstversion_param();
  void set_allocated_setburstversion_param(::bossopenolt::SetBurstVersion* setburstversion_param);
  private:
  const ::bossopenolt::SetBurstVersion& _internal_setburstversion_param() const;
  ::bossopenolt::SetBurstVersion* _internal_mutable_setburstversion_param();
  public:
  void unsafe_arena_set_allocated_setburstversion_param(
      ::bossopenolt::SetBurstVersion* setburstversion_param);
  ::bossopenolt::SetBurstVersion* unsafe_arena_release_setburstversion_param();

  // .bossopenolt.SetDsOmciData setdsomcidata_param = 23;
  bool has_setdsomcidata_param() const;
  private:
  bool _internal_has_setdsomcidata_param() const;
  public:
  void clear_setdsomcidata_param();
  const ::bossopenolt::SetDsOmciData& setdsomcidata_param() const;
  ::bossopenolt::SetDsOmciData* release_setdsomcidata_param();
  ::bossopenolt::SetDsOmciData* mutable_setdsomcidata_param();
  void set_allocated_setdsomcidata_param(::bossopenolt::SetDsOmciData* setdsomcidata_param);
  private:
  const ::bossopenolt::SetDsOmciData& _internal_setdsomcidata_param() const;
  ::bossopenolt::SetDsOmciData* _internal_mutable_setdsomcidata_param();
  public:
  void unsafe_arena_set_allocated_setdsomcidata_param(
      ::bossopenolt::SetDsOmciData* setdsomcidata_param);
  ::bossopenolt::SetDsOmciData* unsafe_arena_release_setdsomcidata_param();

  // .bossopenolt.SetTod settod_param = 24;
  bool has_settod_param() const;
  private:
  bool _internal_has_settod_param() const;
  public:
  void clear_settod_param();
  const ::bossopenolt::SetTod& settod_param() const;
  ::bossopenolt::SetTod* release_settod_param();
  ::bossopenolt::SetTod* mutable_settod_param();
  void set_allocated_settod_param(::bossopenolt::SetTod* settod_param);
  private:
  const ::bossopenolt::SetTod& _internal_settod_param() const;
  ::bossopenolt::SetTod* _internal_mutable_settod_param();
  public:
  void unsafe_arena_set_allocated_settod_param(
      ::bossopenolt::SetTod* settod_param);
  ::bossopenolt::SetTod* unsafe_arena_release_settod_param();

  // .bossopenolt.StringValue stringvalue_param = 25;
  bool has_stringvalue_param() const;
  private:
  bool _internal_has_stringvalue_param() const;
  public:
  void clear_stringvalue_param();
  const ::bossopenolt::StringValue& stringvalue_param() const;
  ::bossopenolt::StringValue* release_stringvalue_param();
  ::bossopenolt::StringValue* mutable_stringvalue_param();
  void set_allocated_stringvalue_param(::bossopenolt::StringValue* stringvalue_param);
  private:
  const ::bossopenolt::StringValue& _internal_stringvalue_param() const;
  ::bossopenolt::StringValue* _internal_mutable_stringvalue_param();
  public:
  void unsafe_arena_set_allocated_stringvalue_param(
      ::bossopenolt::StringValue* stringvalue_param);
  ::bossopenolt::StringValue* unsafe_arena_release_stringvalue_param();

  // .bossopenolt.SetPmControl setpmcontrol_param = 26;
  bool has_setpmcontrol_param() const;
  private:
  bool _internal_has_setpmcontrol_param() const;
  public:
  void clear_setpmcontrol_param();
  const ::bossopenolt::SetPmControl& setpmcontrol_param() const;
  ::bossopenolt::SetPmControl* release_setpmcontrol_param();
  ::bossopenolt::SetPmControl* mutable_setpmcontrol_param();
  void set_allocated_setpmcontrol_param(::bossopenolt::SetPmControl* setpmcontrol_param);
  private:
  const ::bossopenolt::SetPmControl& _internal_setpmcontrol_param() const;
  ::bossopenolt::SetPmControl* _internal_mutable_setpmcontrol_param();
  public:
  void unsafe_arena_set_allocated_setpmcontrol_param(
      ::bossopenolt::SetPmControl* setpmcontrol_param);
  ::bossopenolt::SetPmControl* unsafe_arena_release_setpmcontrol_param();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:bossopenolt.paramFields)
 private:
  class _Internal;
  void set_has_setpmdtxdis_param();
  void set_has_getpmdskind_param();
  void set_has_setport_aram();
  void set_has_setportkind_param();
  void set_has_setmtusize_param();
  void set_has_setvlan_param();
  void set_has_setdirectiommode_param();
  void set_has_getdirectionvalue_param();
  void set_has_integervalue_param();
  void set_has_setsdntable_param();
  void set_has_getsdntable_param();
  void set_has_setlength_param();
  void set_has_getlength_param();
  void set_has_onuctrl_param();
  void set_has_addonusla_param();
  void set_has_clearonusla_param();
  void set_has_setonuallocid_param();
  void set_has_setonuvssn_param();
  void set_has_setburstdelimit_param();
  void set_has_setburstpreamble_param();
  void set_has_setburstversion_param();
  void set_has_setdsomcidata_param();
  void set_has_settod_param();
  void set_has_stringvalue_param();
  void set_has_setpmcontrol_param();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::bossopenolt::SetPmdTxdis* setpmdtxdis_param_;
    ::bossopenolt::GetPmdsKind* getpmdskind_param_;
    ::bossopenolt::SetPort* setport_aram_;
    ::bossopenolt::SetPortKind* setportkind_param_;
    ::bossopenolt::SetMtuSize* setmtusize_param_;
    ::bossopenolt::SetVlan* setvlan_param_;
    ::bossopenolt::SetDirectionMode* setdirectiommode_param_;
    ::bossopenolt::GetDirectionValue* getdirectionvalue_param_;
    ::bossopenolt::IntegerValue* integervalue_param_;
    ::bossopenolt::SetSdnTable* setsdntable_param_;
    ::bossopenolt::GetSdnTable* getsdntable_param_;
    ::bossopenolt::SetLength* setlength_param_;
    ::bossopenolt::GetLength* getlength_param_;
    ::bossopenolt::OnuCtrl* onuctrl_param_;
    ::bossopenolt::AddOnuSla* addonusla_param_;
    ::bossopenolt::ClearOnuSla* clearonusla_param_;
    ::bossopenolt::SetOnuAllocid* setonuallocid_param_;
    ::bossopenolt::SetOnuVssn* setonuvssn_param_;
    ::bossopenolt::SetBurstDelimit* setburstdelimit_param_;
    ::bossopenolt::SetBurstPreamble* setburstpreamble_param_;
    ::bossopenolt::SetBurstVersion* setburstversion_param_;
    ::bossopenolt::SetDsOmciData* setdsomcidata_param_;
    ::bossopenolt::SetTod* settod_param_;
    ::bossopenolt::StringValue* stringvalue_param_;
    ::bossopenolt::SetPmControl* setpmcontrol_param_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetPmControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetPmControl) */ {
 public:
  inline SetPmControl() : SetPmControl(nullptr) {}
  virtual ~SetPmControl();
  explicit constexpr SetPmControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPmControl(const SetPmControl& from);
  SetPmControl(SetPmControl&& from) noexcept
    : SetPmControl() {
    *this = ::std::move(from);
  }

  inline SetPmControl& operator=(const SetPmControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPmControl& operator=(SetPmControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPmControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPmControl* internal_default_instance() {
    return reinterpret_cast<const SetPmControl*>(
               &_SetPmControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetPmControl& a, SetPmControl& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPmControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPmControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPmControl* New() const final {
    return CreateMaybeMessage<SetPmControl>(nullptr);
  }

  SetPmControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPmControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPmControl& from);
  void MergeFrom(const SetPmControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPmControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetPmControl";
  }
  protected:
  explicit SetPmControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnuIdFieldNumber = 1,
    kModeFieldNumber = 2,
    kPowerTimeFieldNumber = 3,
    kAwareTimeFieldNumber = 4,
  };
  // int32 onu_id = 1;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 power_time = 3;
  void clear_power_time();
  ::PROTOBUF_NAMESPACE_ID::int32 power_time() const;
  void set_power_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_power_time() const;
  void _internal_set_power_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 aware_time = 4;
  void clear_aware_time();
  ::PROTOBUF_NAMESPACE_ID::int32 aware_time() const;
  void set_aware_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aware_time() const;
  void _internal_set_aware_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetPmControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 power_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 aware_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetTod PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetTod) */ {
 public:
  inline SetTod() : SetTod(nullptr) {}
  virtual ~SetTod();
  explicit constexpr SetTod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTod(const SetTod& from);
  SetTod(SetTod&& from) noexcept
    : SetTod() {
    *this = ::std::move(from);
  }

  inline SetTod& operator=(const SetTod& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTod& operator=(SetTod&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTod& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTod* internal_default_instance() {
    return reinterpret_cast<const SetTod*>(
               &_SetTod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetTod& a, SetTod& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTod* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTod* New() const final {
    return CreateMaybeMessage<SetTod>(nullptr);
  }

  SetTod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTod& from);
  void MergeFrom(const SetTod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetTod";
  }
  protected:
  explicit SetTod(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetTod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetDsOmciData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetDsOmciData) */ {
 public:
  inline SetDsOmciData() : SetDsOmciData(nullptr) {}
  virtual ~SetDsOmciData();
  explicit constexpr SetDsOmciData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDsOmciData(const SetDsOmciData& from);
  SetDsOmciData(SetDsOmciData&& from) noexcept
    : SetDsOmciData() {
    *this = ::std::move(from);
  }

  inline SetDsOmciData& operator=(const SetDsOmciData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDsOmciData& operator=(SetDsOmciData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDsOmciData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDsOmciData* internal_default_instance() {
    return reinterpret_cast<const SetDsOmciData*>(
               &_SetDsOmciData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetDsOmciData& a, SetDsOmciData& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDsOmciData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDsOmciData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDsOmciData* New() const final {
    return CreateMaybeMessage<SetDsOmciData>(nullptr);
  }

  SetDsOmciData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDsOmciData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDsOmciData& from);
  void MergeFrom(const SetDsOmciData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDsOmciData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetDsOmciData";
  }
  protected:
  explicit SetDsOmciData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kControlFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 control = 1;
  void clear_control();
  ::PROTOBUF_NAMESPACE_ID::int32 control() const;
  void set_control(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_control() const;
  void _internal_set_control(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetDsOmciData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetBurstVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetBurstVersion) */ {
 public:
  inline SetBurstVersion() : SetBurstVersion(nullptr) {}
  virtual ~SetBurstVersion();
  explicit constexpr SetBurstVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBurstVersion(const SetBurstVersion& from);
  SetBurstVersion(SetBurstVersion&& from) noexcept
    : SetBurstVersion() {
    *this = ::std::move(from);
  }

  inline SetBurstVersion& operator=(const SetBurstVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBurstVersion& operator=(SetBurstVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBurstVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBurstVersion* internal_default_instance() {
    return reinterpret_cast<const SetBurstVersion*>(
               &_SetBurstVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetBurstVersion& a, SetBurstVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBurstVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBurstVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBurstVersion* New() const final {
    return CreateMaybeMessage<SetBurstVersion>(nullptr);
  }

  SetBurstVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBurstVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBurstVersion& from);
  void MergeFrom(const SetBurstVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBurstVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetBurstVersion";
  }
  protected:
  explicit SetBurstVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kPontagFieldNumber = 3,
    kIndexFieldNumber = 2,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string pontag = 3;
  void clear_pontag();
  const std::string& pontag() const;
  void set_pontag(const std::string& value);
  void set_pontag(std::string&& value);
  void set_pontag(const char* value);
  void set_pontag(const char* value, size_t size);
  std::string* mutable_pontag();
  std::string* release_pontag();
  void set_allocated_pontag(std::string* pontag);
  private:
  const std::string& _internal_pontag() const;
  void _internal_set_pontag(const std::string& value);
  std::string* _internal_mutable_pontag();
  public:

  // int32 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetBurstVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pontag_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetBurstPreamble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetBurstPreamble) */ {
 public:
  inline SetBurstPreamble() : SetBurstPreamble(nullptr) {}
  virtual ~SetBurstPreamble();
  explicit constexpr SetBurstPreamble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBurstPreamble(const SetBurstPreamble& from);
  SetBurstPreamble(SetBurstPreamble&& from) noexcept
    : SetBurstPreamble() {
    *this = ::std::move(from);
  }

  inline SetBurstPreamble& operator=(const SetBurstPreamble& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBurstPreamble& operator=(SetBurstPreamble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBurstPreamble& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBurstPreamble* internal_default_instance() {
    return reinterpret_cast<const SetBurstPreamble*>(
               &_SetBurstPreamble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetBurstPreamble& a, SetBurstPreamble& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBurstPreamble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBurstPreamble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBurstPreamble* New() const final {
    return CreateMaybeMessage<SetBurstPreamble>(nullptr);
  }

  SetBurstPreamble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBurstPreamble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBurstPreamble& from);
  void MergeFrom(const SetBurstPreamble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBurstPreamble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetBurstPreamble";
  }
  protected:
  explicit SetBurstPreamble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatFieldNumber = 1,
  };
  // string repeat = 1;
  void clear_repeat();
  const std::string& repeat() const;
  void set_repeat(const std::string& value);
  void set_repeat(std::string&& value);
  void set_repeat(const char* value);
  void set_repeat(const char* value, size_t size);
  std::string* mutable_repeat();
  std::string* release_repeat();
  void set_allocated_repeat(std::string* repeat);
  private:
  const std::string& _internal_repeat() const;
  void _internal_set_repeat(const std::string& value);
  std::string* _internal_mutable_repeat();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetBurstPreamble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetBurstDelimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetBurstDelimit) */ {
 public:
  inline SetBurstDelimit() : SetBurstDelimit(nullptr) {}
  virtual ~SetBurstDelimit();
  explicit constexpr SetBurstDelimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBurstDelimit(const SetBurstDelimit& from);
  SetBurstDelimit(SetBurstDelimit&& from) noexcept
    : SetBurstDelimit() {
    *this = ::std::move(from);
  }

  inline SetBurstDelimit& operator=(const SetBurstDelimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBurstDelimit& operator=(SetBurstDelimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetBurstDelimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBurstDelimit* internal_default_instance() {
    return reinterpret_cast<const SetBurstDelimit*>(
               &_SetBurstDelimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetBurstDelimit& a, SetBurstDelimit& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBurstDelimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBurstDelimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBurstDelimit* New() const final {
    return CreateMaybeMessage<SetBurstDelimit>(nullptr);
  }

  SetBurstDelimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBurstDelimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBurstDelimit& from);
  void MergeFrom(const SetBurstDelimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBurstDelimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetBurstDelimit";
  }
  protected:
  explicit SetBurstDelimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelimiterFieldNumber = 2,
    kLengthFieldNumber = 1,
  };
  // string delimiter = 2;
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const char* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // int32 length = 1;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetBurstDelimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetOnuVssn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetOnuVssn) */ {
 public:
  inline SetOnuVssn() : SetOnuVssn(nullptr) {}
  virtual ~SetOnuVssn();
  explicit constexpr SetOnuVssn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetOnuVssn(const SetOnuVssn& from);
  SetOnuVssn(SetOnuVssn&& from) noexcept
    : SetOnuVssn() {
    *this = ::std::move(from);
  }

  inline SetOnuVssn& operator=(const SetOnuVssn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOnuVssn& operator=(SetOnuVssn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetOnuVssn& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOnuVssn* internal_default_instance() {
    return reinterpret_cast<const SetOnuVssn*>(
               &_SetOnuVssn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetOnuVssn& a, SetOnuVssn& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOnuVssn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOnuVssn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetOnuVssn* New() const final {
    return CreateMaybeMessage<SetOnuVssn>(nullptr);
  }

  SetOnuVssn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetOnuVssn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetOnuVssn& from);
  void MergeFrom(const SetOnuVssn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOnuVssn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetOnuVssn";
  }
  protected:
  explicit SetOnuVssn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVssnFieldNumber = 2,
    kOnuIdFieldNumber = 1,
  };
  // string vssn = 2;
  void clear_vssn();
  const std::string& vssn() const;
  void set_vssn(const std::string& value);
  void set_vssn(std::string&& value);
  void set_vssn(const char* value);
  void set_vssn(const char* value, size_t size);
  std::string* mutable_vssn();
  std::string* release_vssn();
  void set_allocated_vssn(std::string* vssn);
  private:
  const std::string& _internal_vssn() const;
  void _internal_set_vssn(const std::string& value);
  std::string* _internal_mutable_vssn();
  public:

  // int32 onu_id = 1;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetOnuVssn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vssn_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetOnuAllocid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetOnuAllocid) */ {
 public:
  inline SetOnuAllocid() : SetOnuAllocid(nullptr) {}
  virtual ~SetOnuAllocid();
  explicit constexpr SetOnuAllocid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetOnuAllocid(const SetOnuAllocid& from);
  SetOnuAllocid(SetOnuAllocid&& from) noexcept
    : SetOnuAllocid() {
    *this = ::std::move(from);
  }

  inline SetOnuAllocid& operator=(const SetOnuAllocid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOnuAllocid& operator=(SetOnuAllocid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetOnuAllocid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOnuAllocid* internal_default_instance() {
    return reinterpret_cast<const SetOnuAllocid*>(
               &_SetOnuAllocid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetOnuAllocid& a, SetOnuAllocid& b) {
    a.Swap(&b);
  }
  inline void Swap(SetOnuAllocid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOnuAllocid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetOnuAllocid* New() const final {
    return CreateMaybeMessage<SetOnuAllocid>(nullptr);
  }

  SetOnuAllocid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetOnuAllocid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetOnuAllocid& from);
  void MergeFrom(const SetOnuAllocid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetOnuAllocid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetOnuAllocid";
  }
  protected:
  explicit SetOnuAllocid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllocIdFieldNumber = 2,
    kOnuIdFieldNumber = 1,
  };
  // string alloc_id = 2;
  void clear_alloc_id();
  const std::string& alloc_id() const;
  void set_alloc_id(const std::string& value);
  void set_alloc_id(std::string&& value);
  void set_alloc_id(const char* value);
  void set_alloc_id(const char* value, size_t size);
  std::string* mutable_alloc_id();
  std::string* release_alloc_id();
  void set_allocated_alloc_id(std::string* alloc_id);
  private:
  const std::string& _internal_alloc_id() const;
  void _internal_set_alloc_id(const std::string& value);
  std::string* _internal_mutable_alloc_id();
  public:

  // int32 onu_id = 1;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetOnuAllocid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alloc_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class ClearOnuSla PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.ClearOnuSla) */ {
 public:
  inline ClearOnuSla() : ClearOnuSla(nullptr) {}
  virtual ~ClearOnuSla();
  explicit constexpr ClearOnuSla(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearOnuSla(const ClearOnuSla& from);
  ClearOnuSla(ClearOnuSla&& from) noexcept
    : ClearOnuSla() {
    *this = ::std::move(from);
  }

  inline ClearOnuSla& operator=(const ClearOnuSla& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearOnuSla& operator=(ClearOnuSla&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearOnuSla& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearOnuSla* internal_default_instance() {
    return reinterpret_cast<const ClearOnuSla*>(
               &_ClearOnuSla_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClearOnuSla& a, ClearOnuSla& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearOnuSla* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearOnuSla* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearOnuSla* New() const final {
    return CreateMaybeMessage<ClearOnuSla>(nullptr);
  }

  ClearOnuSla* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearOnuSla>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearOnuSla& from);
  void MergeFrom(const ClearOnuSla& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearOnuSla* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.ClearOnuSla";
  }
  protected:
  explicit ClearOnuSla(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnuIdFieldNumber = 1,
    kTcontFieldNumber = 2,
  };
  // int32 onu_id = 1;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tcont = 2;
  void clear_tcont();
  ::PROTOBUF_NAMESPACE_ID::int32 tcont() const;
  void set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tcont() const;
  void _internal_set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.ClearOnuSla)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tcont_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class AddOnuSla PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.AddOnuSla) */ {
 public:
  inline AddOnuSla() : AddOnuSla(nullptr) {}
  virtual ~AddOnuSla();
  explicit constexpr AddOnuSla(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOnuSla(const AddOnuSla& from);
  AddOnuSla(AddOnuSla&& from) noexcept
    : AddOnuSla() {
    *this = ::std::move(from);
  }

  inline AddOnuSla& operator=(const AddOnuSla& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOnuSla& operator=(AddOnuSla&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOnuSla& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOnuSla* internal_default_instance() {
    return reinterpret_cast<const AddOnuSla*>(
               &_AddOnuSla_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddOnuSla& a, AddOnuSla& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOnuSla* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOnuSla* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOnuSla* New() const final {
    return CreateMaybeMessage<AddOnuSla>(nullptr);
  }

  AddOnuSla* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOnuSla>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOnuSla& from);
  void MergeFrom(const AddOnuSla& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOnuSla* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.AddOnuSla";
  }
  protected:
  explicit AddOnuSla(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnuIdFieldNumber = 1,
    kTcontFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSiFieldNumber = 4,
    kAbminFieldNumber = 5,
    kAbsurFieldNumber = 6,
  };
  // int32 onu_id = 1;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tcont = 2;
  void clear_tcont();
  ::PROTOBUF_NAMESPACE_ID::int32 tcont() const;
  void set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tcont() const;
  void _internal_set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 si = 4;
  void clear_si();
  ::PROTOBUF_NAMESPACE_ID::int32 si() const;
  void set_si(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_si() const;
  void _internal_set_si(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 abmin = 5;
  void clear_abmin();
  ::PROTOBUF_NAMESPACE_ID::int32 abmin() const;
  void set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_abmin() const;
  void _internal_set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 absur = 6;
  void clear_absur();
  ::PROTOBUF_NAMESPACE_ID::int32 absur() const;
  void set_absur(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_absur() const;
  void _internal_set_absur(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.AddOnuSla)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tcont_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 si_;
  ::PROTOBUF_NAMESPACE_ID::int32 abmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 absur_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetPmdTxdis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetPmdTxdis) */ {
 public:
  inline SetPmdTxdis() : SetPmdTxdis(nullptr) {}
  virtual ~SetPmdTxdis();
  explicit constexpr SetPmdTxdis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPmdTxdis(const SetPmdTxdis& from);
  SetPmdTxdis(SetPmdTxdis&& from) noexcept
    : SetPmdTxdis() {
    *this = ::std::move(from);
  }

  inline SetPmdTxdis& operator=(const SetPmdTxdis& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPmdTxdis& operator=(SetPmdTxdis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPmdTxdis& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPmdTxdis* internal_default_instance() {
    return reinterpret_cast<const SetPmdTxdis*>(
               &_SetPmdTxdis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetPmdTxdis& a, SetPmdTxdis& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPmdTxdis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPmdTxdis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPmdTxdis* New() const final {
    return CreateMaybeMessage<SetPmdTxdis>(nullptr);
  }

  SetPmdTxdis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPmdTxdis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPmdTxdis& from);
  void MergeFrom(const SetPmdTxdis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPmdTxdis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetPmdTxdis";
  }
  protected:
  explicit SetPmdTxdis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortTypeFieldNumber = 1,
    kModeFieldNumber = 2,
    kPortNoFieldNumber = 3,
  };
  // int32 port_type = 1;
  void clear_port_type();
  ::PROTOBUF_NAMESPACE_ID::int32 port_type() const;
  void set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_type() const;
  void _internal_set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port_no = 3;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetPmdTxdis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class GetPmdsKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.GetPmdsKind) */ {
 public:
  inline GetPmdsKind() : GetPmdsKind(nullptr) {}
  virtual ~GetPmdsKind();
  explicit constexpr GetPmdsKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPmdsKind(const GetPmdsKind& from);
  GetPmdsKind(GetPmdsKind&& from) noexcept
    : GetPmdsKind() {
    *this = ::std::move(from);
  }

  inline GetPmdsKind& operator=(const GetPmdsKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPmdsKind& operator=(GetPmdsKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPmdsKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPmdsKind* internal_default_instance() {
    return reinterpret_cast<const GetPmdsKind*>(
               &_GetPmdsKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetPmdsKind& a, GetPmdsKind& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPmdsKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPmdsKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPmdsKind* New() const final {
    return CreateMaybeMessage<GetPmdsKind>(nullptr);
  }

  GetPmdsKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPmdsKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPmdsKind& from);
  void MergeFrom(const GetPmdsKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPmdsKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.GetPmdsKind";
  }
  protected:
  explicit GetPmdsKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortTypeFieldNumber = 1,
    kPortNoFieldNumber = 2,
  };
  // int32 port_type = 1;
  void clear_port_type();
  ::PROTOBUF_NAMESPACE_ID::int32 port_type() const;
  void set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_type() const;
  void _internal_set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port_no = 2;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.GetPmdsKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetPort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetPort) */ {
 public:
  inline SetPort() : SetPort(nullptr) {}
  virtual ~SetPort();
  explicit constexpr SetPort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPort(const SetPort& from);
  SetPort(SetPort&& from) noexcept
    : SetPort() {
    *this = ::std::move(from);
  }

  inline SetPort& operator=(const SetPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPort& operator=(SetPort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPort* internal_default_instance() {
    return reinterpret_cast<const SetPort*>(
               &_SetPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetPort& a, SetPort& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPort* New() const final {
    return CreateMaybeMessage<SetPort>(nullptr);
  }

  SetPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPort& from);
  void MergeFrom(const SetPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetPort";
  }
  protected:
  explicit SetPort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kPortNoFieldNumber = 2,
  };
  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port_no = 2;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetPortKind PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetPortKind) */ {
 public:
  inline SetPortKind() : SetPortKind(nullptr) {}
  virtual ~SetPortKind();
  explicit constexpr SetPortKind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPortKind(const SetPortKind& from);
  SetPortKind(SetPortKind&& from) noexcept
    : SetPortKind() {
    *this = ::std::move(from);
  }

  inline SetPortKind& operator=(const SetPortKind& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPortKind& operator=(SetPortKind&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPortKind& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPortKind* internal_default_instance() {
    return reinterpret_cast<const SetPortKind*>(
               &_SetPortKind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetPortKind& a, SetPortKind& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPortKind* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPortKind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPortKind* New() const final {
    return CreateMaybeMessage<SetPortKind>(nullptr);
  }

  SetPortKind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPortKind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPortKind& from);
  void MergeFrom(const SetPortKind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPortKind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetPortKind";
  }
  protected:
  explicit SetPortKind(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortNoFieldNumber = 1,
  };
  // int32 port_no = 1;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetPortKind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetMtuSize PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetMtuSize) */ {
 public:
  inline SetMtuSize() : SetMtuSize(nullptr) {}
  virtual ~SetMtuSize();
  explicit constexpr SetMtuSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMtuSize(const SetMtuSize& from);
  SetMtuSize(SetMtuSize&& from) noexcept
    : SetMtuSize() {
    *this = ::std::move(from);
  }

  inline SetMtuSize& operator=(const SetMtuSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMtuSize& operator=(SetMtuSize&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMtuSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMtuSize* internal_default_instance() {
    return reinterpret_cast<const SetMtuSize*>(
               &_SetMtuSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetMtuSize& a, SetMtuSize& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMtuSize* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMtuSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMtuSize* New() const final {
    return CreateMaybeMessage<SetMtuSize>(nullptr);
  }

  SetMtuSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMtuSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMtuSize& from);
  void MergeFrom(const SetMtuSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMtuSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetMtuSize";
  }
  protected:
  explicit SetMtuSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtuSizeFieldNumber = 2,
  };
  // int32 mtu_size = 2;
  void clear_mtu_size();
  ::PROTOBUF_NAMESPACE_ID::int32 mtu_size() const;
  void set_mtu_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtu_size() const;
  void _internal_set_mtu_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetMtuSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtu_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetVlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetVlan) */ {
 public:
  inline SetVlan() : SetVlan(nullptr) {}
  virtual ~SetVlan();
  explicit constexpr SetVlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVlan(const SetVlan& from);
  SetVlan(SetVlan&& from) noexcept
    : SetVlan() {
    *this = ::std::move(from);
  }

  inline SetVlan& operator=(const SetVlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVlan& operator=(SetVlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVlan* internal_default_instance() {
    return reinterpret_cast<const SetVlan*>(
               &_SetVlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetVlan& a, SetVlan& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVlan* New() const final {
    return CreateMaybeMessage<SetVlan>(nullptr);
  }

  SetVlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVlan& from);
  void MergeFrom(const SetVlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetVlan";
  }
  protected:
  explicit SetVlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kVidFieldNumber = 3,
    kPbitFieldNumber = 4,
  };
  // int32 action = 2;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vid = 3;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pbit = 4;
  void clear_pbit();
  ::PROTOBUF_NAMESPACE_ID::int32 pbit() const;
  void set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pbit() const;
  void _internal_set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetVlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pbit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetSdnTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetSdnTable) */ {
 public:
  inline SetSdnTable() : SetSdnTable(nullptr) {}
  virtual ~SetSdnTable();
  explicit constexpr SetSdnTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSdnTable(const SetSdnTable& from);
  SetSdnTable(SetSdnTable&& from) noexcept
    : SetSdnTable() {
    *this = ::std::move(from);
  }

  inline SetSdnTable& operator=(const SetSdnTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSdnTable& operator=(SetSdnTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSdnTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSdnTable* internal_default_instance() {
    return reinterpret_cast<const SetSdnTable*>(
               &_SetSdnTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetSdnTable& a, SetSdnTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSdnTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSdnTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetSdnTable* New() const final {
    return CreateMaybeMessage<SetSdnTable>(nullptr);
  }

  SetSdnTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSdnTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSdnTable& from);
  void MergeFrom(const SetSdnTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSdnTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetSdnTable";
  }
  protected:
  explicit SetSdnTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kVidFieldNumber = 2,
    kPbitFieldNumber = 3,
  };
  // string port_id = 1;
  void clear_port_id();
  const std::string& port_id() const;
  void set_port_id(const std::string& value);
  void set_port_id(std::string&& value);
  void set_port_id(const char* value);
  void set_port_id(const char* value, size_t size);
  std::string* mutable_port_id();
  std::string* release_port_id();
  void set_allocated_port_id(std::string* port_id);
  private:
  const std::string& _internal_port_id() const;
  void _internal_set_port_id(const std::string& value);
  std::string* _internal_mutable_port_id();
  public:

  // int32 vid = 2;
  void clear_vid();
  ::PROTOBUF_NAMESPACE_ID::int32 vid() const;
  void set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vid() const;
  void _internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pbit = 3;
  void clear_pbit();
  ::PROTOBUF_NAMESPACE_ID::int32 pbit() const;
  void set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pbit() const;
  void _internal_set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetSdnTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 vid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pbit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetDirectionMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetDirectionMode) */ {
 public:
  inline SetDirectionMode() : SetDirectionMode(nullptr) {}
  virtual ~SetDirectionMode();
  explicit constexpr SetDirectionMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDirectionMode(const SetDirectionMode& from);
  SetDirectionMode(SetDirectionMode&& from) noexcept
    : SetDirectionMode() {
    *this = ::std::move(from);
  }

  inline SetDirectionMode& operator=(const SetDirectionMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDirectionMode& operator=(SetDirectionMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDirectionMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDirectionMode* internal_default_instance() {
    return reinterpret_cast<const SetDirectionMode*>(
               &_SetDirectionMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetDirectionMode& a, SetDirectionMode& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDirectionMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDirectionMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetDirectionMode* New() const final {
    return CreateMaybeMessage<SetDirectionMode>(nullptr);
  }

  SetDirectionMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDirectionMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDirectionMode& from);
  void MergeFrom(const SetDirectionMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDirectionMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetDirectionMode";
  }
  protected:
  explicit SetDirectionMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // int32 direction = 1;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetDirectionMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class GetDirectionValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.GetDirectionValue) */ {
 public:
  inline GetDirectionValue() : GetDirectionValue(nullptr) {}
  virtual ~GetDirectionValue();
  explicit constexpr GetDirectionValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDirectionValue(const GetDirectionValue& from);
  GetDirectionValue(GetDirectionValue&& from) noexcept
    : GetDirectionValue() {
    *this = ::std::move(from);
  }

  inline GetDirectionValue& operator=(const GetDirectionValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDirectionValue& operator=(GetDirectionValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDirectionValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDirectionValue* internal_default_instance() {
    return reinterpret_cast<const GetDirectionValue*>(
               &_GetDirectionValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetDirectionValue& a, GetDirectionValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDirectionValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDirectionValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDirectionValue* New() const final {
    return CreateMaybeMessage<GetDirectionValue>(nullptr);
  }

  GetDirectionValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDirectionValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDirectionValue& from);
  void MergeFrom(const GetDirectionValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDirectionValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.GetDirectionValue";
  }
  protected:
  explicit GetDirectionValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
  };
  // int32 direction = 1;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.GetDirectionValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class GetSdnTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.GetSdnTable) */ {
 public:
  inline GetSdnTable() : GetSdnTable(nullptr) {}
  virtual ~GetSdnTable();
  explicit constexpr GetSdnTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSdnTable(const GetSdnTable& from);
  GetSdnTable(GetSdnTable&& from) noexcept
    : GetSdnTable() {
    *this = ::std::move(from);
  }

  inline GetSdnTable& operator=(const GetSdnTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSdnTable& operator=(GetSdnTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSdnTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSdnTable* internal_default_instance() {
    return reinterpret_cast<const GetSdnTable*>(
               &_GetSdnTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetSdnTable& a, GetSdnTable& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSdnTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSdnTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSdnTable* New() const final {
    return CreateMaybeMessage<GetSdnTable>(nullptr);
  }

  GetSdnTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSdnTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSdnTable& from);
  void MergeFrom(const GetSdnTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSdnTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.GetSdnTable";
  }
  protected:
  explicit GetSdnTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.GetSdnTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class IntegerValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.IntegerValue) */ {
 public:
  inline IntegerValue() : IntegerValue(nullptr) {}
  virtual ~IntegerValue();
  explicit constexpr IntegerValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerValue(const IntegerValue& from);
  IntegerValue(IntegerValue&& from) noexcept
    : IntegerValue() {
    *this = ::std::move(from);
  }

  inline IntegerValue& operator=(const IntegerValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerValue& operator=(IntegerValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerValue* internal_default_instance() {
    return reinterpret_cast<const IntegerValue*>(
               &_IntegerValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(IntegerValue& a, IntegerValue& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerValue* New() const final {
    return CreateMaybeMessage<IntegerValue>(nullptr);
  }

  IntegerValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerValue& from);
  void MergeFrom(const IntegerValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.IntegerValue";
  }
  protected:
  explicit IntegerValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.IntegerValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class StringValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.StringValue) */ {
 public:
  inline StringValue() : StringValue(nullptr) {}
  virtual ~StringValue();
  explicit constexpr StringValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringValue(const StringValue& from);
  StringValue(StringValue&& from) noexcept
    : StringValue() {
    *this = ::std::move(from);
  }

  inline StringValue& operator=(const StringValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringValue& operator=(StringValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringValue* internal_default_instance() {
    return reinterpret_cast<const StringValue*>(
               &_StringValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StringValue& a, StringValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StringValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringValue* New() const final {
    return CreateMaybeMessage<StringValue>(nullptr);
  }

  StringValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringValue& from);
  void MergeFrom(const StringValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.StringValue";
  }
  protected:
  explicit StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.StringValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SetLength PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SetLength) */ {
 public:
  inline SetLength() : SetLength(nullptr) {}
  virtual ~SetLength();
  explicit constexpr SetLength(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLength(const SetLength& from);
  SetLength(SetLength&& from) noexcept
    : SetLength() {
    *this = ::std::move(from);
  }

  inline SetLength& operator=(const SetLength& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLength& operator=(SetLength&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLength& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLength* internal_default_instance() {
    return reinterpret_cast<const SetLength*>(
               &_SetLength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetLength& a, SetLength& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLength* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLength* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLength* New() const final {
    return CreateMaybeMessage<SetLength>(nullptr);
  }

  SetLength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLength>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLength& from);
  void MergeFrom(const SetLength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SetLength";
  }
  protected:
  explicit SetLength(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 operation = 1;
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::int32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SetLength)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class GetLength PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.GetLength) */ {
 public:
  inline GetLength() : GetLength(nullptr) {}
  virtual ~GetLength();
  explicit constexpr GetLength(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLength(const GetLength& from);
  GetLength(GetLength&& from) noexcept
    : GetLength() {
    *this = ::std::move(from);
  }

  inline GetLength& operator=(const GetLength& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLength& operator=(GetLength&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLength& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLength* internal_default_instance() {
    return reinterpret_cast<const GetLength*>(
               &_GetLength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetLength& a, GetLength& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLength* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLength* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLength* New() const final {
    return CreateMaybeMessage<GetLength>(nullptr);
  }

  GetLength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLength>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLength& from);
  void MergeFrom(const GetLength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.GetLength";
  }
  protected:
  explicit GetLength(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // int32 operation = 1;
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::int32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.GetLength)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class OnuCtrl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.OnuCtrl) */ {
 public:
  inline OnuCtrl() : OnuCtrl(nullptr) {}
  virtual ~OnuCtrl();
  explicit constexpr OnuCtrl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnuCtrl(const OnuCtrl& from);
  OnuCtrl(OnuCtrl&& from) noexcept
    : OnuCtrl() {
    *this = ::std::move(from);
  }

  inline OnuCtrl& operator=(const OnuCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnuCtrl& operator=(OnuCtrl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnuCtrl& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnuCtrl* internal_default_instance() {
    return reinterpret_cast<const OnuCtrl*>(
               &_OnuCtrl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(OnuCtrl& a, OnuCtrl& b) {
    a.Swap(&b);
  }
  inline void Swap(OnuCtrl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnuCtrl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnuCtrl* New() const final {
    return CreateMaybeMessage<OnuCtrl>(nullptr);
  }

  OnuCtrl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnuCtrl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnuCtrl& from);
  void MergeFrom(const OnuCtrl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnuCtrl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.OnuCtrl";
  }
  protected:
  explicit OnuCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnuIdFieldNumber = 1,
  };
  // int32 onu_id = 1;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.OnuCtrl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class OltConnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.OltConnResponse) */ {
 public:
  inline OltConnResponse() : OltConnResponse(nullptr) {}
  virtual ~OltConnResponse();
  explicit constexpr OltConnResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OltConnResponse(const OltConnResponse& from);
  OltConnResponse(OltConnResponse&& from) noexcept
    : OltConnResponse() {
    *this = ::std::move(from);
  }

  inline OltConnResponse& operator=(const OltConnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OltConnResponse& operator=(OltConnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OltConnResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OltConnResponse* internal_default_instance() {
    return reinterpret_cast<const OltConnResponse*>(
               &_OltConnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(OltConnResponse& a, OltConnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OltConnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OltConnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OltConnResponse* New() const final {
    return CreateMaybeMessage<OltConnResponse>(nullptr);
  }

  OltConnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OltConnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OltConnResponse& from);
  void MergeFrom(const OltConnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OltConnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.OltConnResponse";
  }
  protected:
  explicit OltConnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kMacFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string mac = 3;
  void clear_mac();
  const std::string& mac() const;
  void set_mac(const std::string& value);
  void set_mac(std::string&& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  std::string* mutable_mac();
  std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.OltConnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class OltDevResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.OltDevResponse) */ {
 public:
  inline OltDevResponse() : OltDevResponse(nullptr) {}
  virtual ~OltDevResponse();
  explicit constexpr OltDevResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OltDevResponse(const OltDevResponse& from);
  OltDevResponse(OltDevResponse&& from) noexcept
    : OltDevResponse() {
    *this = ::std::move(from);
  }

  inline OltDevResponse& operator=(const OltDevResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OltDevResponse& operator=(OltDevResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OltDevResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OltDevResponse* internal_default_instance() {
    return reinterpret_cast<const OltDevResponse*>(
               &_OltDevResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OltDevResponse& a, OltDevResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OltDevResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OltDevResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OltDevResponse* New() const final {
    return CreateMaybeMessage<OltDevResponse>(nullptr);
  }

  OltDevResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OltDevResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OltDevResponse& from);
  void MergeFrom(const OltDevResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OltDevResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.OltDevResponse";
  }
  protected:
  explicit OltDevResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kFpgaTypeFieldNumber = 2,
    kFpgaVerFieldNumber = 3,
    kFpgaDateFieldNumber = 4,
    kSwVerFieldNumber = 5,
    kSwDateFieldNumber = 6,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string fpga_type = 2;
  void clear_fpga_type();
  const std::string& fpga_type() const;
  void set_fpga_type(const std::string& value);
  void set_fpga_type(std::string&& value);
  void set_fpga_type(const char* value);
  void set_fpga_type(const char* value, size_t size);
  std::string* mutable_fpga_type();
  std::string* release_fpga_type();
  void set_allocated_fpga_type(std::string* fpga_type);
  private:
  const std::string& _internal_fpga_type() const;
  void _internal_set_fpga_type(const std::string& value);
  std::string* _internal_mutable_fpga_type();
  public:

  // string fpga_ver = 3;
  void clear_fpga_ver();
  const std::string& fpga_ver() const;
  void set_fpga_ver(const std::string& value);
  void set_fpga_ver(std::string&& value);
  void set_fpga_ver(const char* value);
  void set_fpga_ver(const char* value, size_t size);
  std::string* mutable_fpga_ver();
  std::string* release_fpga_ver();
  void set_allocated_fpga_ver(std::string* fpga_ver);
  private:
  const std::string& _internal_fpga_ver() const;
  void _internal_set_fpga_ver(const std::string& value);
  std::string* _internal_mutable_fpga_ver();
  public:

  // string fpga_Date = 4;
  void clear_fpga_date();
  const std::string& fpga_date() const;
  void set_fpga_date(const std::string& value);
  void set_fpga_date(std::string&& value);
  void set_fpga_date(const char* value);
  void set_fpga_date(const char* value, size_t size);
  std::string* mutable_fpga_date();
  std::string* release_fpga_date();
  void set_allocated_fpga_date(std::string* fpga_date);
  private:
  const std::string& _internal_fpga_date() const;
  void _internal_set_fpga_date(const std::string& value);
  std::string* _internal_mutable_fpga_date();
  public:

  // string sw_ver = 5;
  void clear_sw_ver();
  const std::string& sw_ver() const;
  void set_sw_ver(const std::string& value);
  void set_sw_ver(std::string&& value);
  void set_sw_ver(const char* value);
  void set_sw_ver(const char* value, size_t size);
  std::string* mutable_sw_ver();
  std::string* release_sw_ver();
  void set_allocated_sw_ver(std::string* sw_ver);
  private:
  const std::string& _internal_sw_ver() const;
  void _internal_set_sw_ver(const std::string& value);
  std::string* _internal_mutable_sw_ver();
  public:

  // string sw_date = 6;
  void clear_sw_date();
  const std::string& sw_date() const;
  void set_sw_date(const std::string& value);
  void set_sw_date(std::string&& value);
  void set_sw_date(const char* value);
  void set_sw_date(const char* value, size_t size);
  std::string* mutable_sw_date();
  std::string* release_sw_date();
  void set_allocated_sw_date(std::string* sw_date);
  private:
  const std::string& _internal_sw_date() const;
  void _internal_set_sw_date(const std::string& value);
  std::string* _internal_mutable_sw_date();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.OltDevResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fpga_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fpga_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fpga_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class ExecResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.ExecResult) */ {
 public:
  inline ExecResult() : ExecResult(nullptr) {}
  virtual ~ExecResult();
  explicit constexpr ExecResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecResult(const ExecResult& from);
  ExecResult(ExecResult&& from) noexcept
    : ExecResult() {
    *this = ::std::move(from);
  }

  inline ExecResult& operator=(const ExecResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecResult& operator=(ExecResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecResult* internal_default_instance() {
    return reinterpret_cast<const ExecResult*>(
               &_ExecResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ExecResult& a, ExecResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecResult* New() const final {
    return CreateMaybeMessage<ExecResult>(nullptr);
  }

  ExecResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecResult& from);
  void MergeFrom(const ExecResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.ExecResult";
  }
  protected:
  explicit ExecResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.ExecResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class PmdTxdisResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.PmdTxdisResponse) */ {
 public:
  inline PmdTxdisResponse() : PmdTxdisResponse(nullptr) {}
  virtual ~PmdTxdisResponse();
  explicit constexpr PmdTxdisResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PmdTxdisResponse(const PmdTxdisResponse& from);
  PmdTxdisResponse(PmdTxdisResponse&& from) noexcept
    : PmdTxdisResponse() {
    *this = ::std::move(from);
  }

  inline PmdTxdisResponse& operator=(const PmdTxdisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmdTxdisResponse& operator=(PmdTxdisResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmdTxdisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PmdTxdisResponse* internal_default_instance() {
    return reinterpret_cast<const PmdTxdisResponse*>(
               &_PmdTxdisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PmdTxdisResponse& a, PmdTxdisResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PmdTxdisResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PmdTxdisResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmdTxdisResponse* New() const final {
    return CreateMaybeMessage<PmdTxdisResponse>(nullptr);
  }

  PmdTxdisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmdTxdisResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmdTxdisResponse& from);
  void MergeFrom(const PmdTxdisResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmdTxdisResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.PmdTxdisResponse";
  }
  protected:
  explicit PmdTxdisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kPortNoFieldNumber = 1,
  };
  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 port_no = 1;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.PmdTxdisResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class PmdStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.PmdStatusResponse) */ {
 public:
  inline PmdStatusResponse() : PmdStatusResponse(nullptr) {}
  virtual ~PmdStatusResponse();
  explicit constexpr PmdStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PmdStatusResponse(const PmdStatusResponse& from);
  PmdStatusResponse(PmdStatusResponse&& from) noexcept
    : PmdStatusResponse() {
    *this = ::std::move(from);
  }

  inline PmdStatusResponse& operator=(const PmdStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmdStatusResponse& operator=(PmdStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmdStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PmdStatusResponse* internal_default_instance() {
    return reinterpret_cast<const PmdStatusResponse*>(
               &_PmdStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PmdStatusResponse& a, PmdStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PmdStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PmdStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmdStatusResponse* New() const final {
    return CreateMaybeMessage<PmdStatusResponse>(nullptr);
  }

  PmdStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmdStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmdStatusResponse& from);
  void MergeFrom(const PmdStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmdStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.PmdStatusResponse";
  }
  protected:
  explicit PmdStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLossFieldNumber = 2,
    kModuleFieldNumber = 3,
    kFaultFieldNumber = 4,
    kLinkFieldNumber = 5,
    kPortNoFieldNumber = 1,
  };
  // string loss = 2;
  void clear_loss();
  const std::string& loss() const;
  void set_loss(const std::string& value);
  void set_loss(std::string&& value);
  void set_loss(const char* value);
  void set_loss(const char* value, size_t size);
  std::string* mutable_loss();
  std::string* release_loss();
  void set_allocated_loss(std::string* loss);
  private:
  const std::string& _internal_loss() const;
  void _internal_set_loss(const std::string& value);
  std::string* _internal_mutable_loss();
  public:

  // string module = 3;
  void clear_module();
  const std::string& module() const;
  void set_module(const std::string& value);
  void set_module(std::string&& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  std::string* mutable_module();
  std::string* release_module();
  void set_allocated_module(std::string* module);
  private:
  const std::string& _internal_module() const;
  void _internal_set_module(const std::string& value);
  std::string* _internal_mutable_module();
  public:

  // string fault = 4;
  void clear_fault();
  const std::string& fault() const;
  void set_fault(const std::string& value);
  void set_fault(std::string&& value);
  void set_fault(const char* value);
  void set_fault(const char* value, size_t size);
  std::string* mutable_fault();
  std::string* release_fault();
  void set_allocated_fault(std::string* fault);
  private:
  const std::string& _internal_fault() const;
  void _internal_set_fault(const std::string& value);
  std::string* _internal_mutable_fault();
  public:

  // string link = 5;
  void clear_link();
  const std::string& link() const;
  void set_link(const std::string& value);
  void set_link(std::string&& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  std::string* mutable_link();
  std::string* release_link();
  void set_allocated_link(std::string* link);
  private:
  const std::string& _internal_link() const;
  void _internal_set_link(const std::string& value);
  std::string* _internal_mutable_link();
  public:

  // int32 port_no = 1;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.PmdStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loss_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fault_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr link_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class GetPortResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.GetPortResponse) */ {
 public:
  inline GetPortResponse() : GetPortResponse(nullptr) {}
  virtual ~GetPortResponse();
  explicit constexpr GetPortResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPortResponse(const GetPortResponse& from);
  GetPortResponse(GetPortResponse&& from) noexcept
    : GetPortResponse() {
    *this = ::std::move(from);
  }

  inline GetPortResponse& operator=(const GetPortResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPortResponse& operator=(GetPortResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPortResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPortResponse* internal_default_instance() {
    return reinterpret_cast<const GetPortResponse*>(
               &_GetPortResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetPortResponse& a, GetPortResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPortResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPortResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPortResponse* New() const final {
    return CreateMaybeMessage<GetPortResponse>(nullptr);
  }

  GetPortResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPortResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPortResponse& from);
  void MergeFrom(const GetPortResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPortResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.GetPortResponse";
  }
  protected:
  explicit GetPortResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kPortNoFieldNumber = 1,
  };
  // string state = 2;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // int32 port_no = 1;
  void clear_port_no();
  ::PROTOBUF_NAMESPACE_ID::int32 port_no() const;
  void set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port_no() const;
  void _internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.GetPortResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class MtuSizeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.MtuSizeResponse) */ {
 public:
  inline MtuSizeResponse() : MtuSizeResponse(nullptr) {}
  virtual ~MtuSizeResponse();
  explicit constexpr MtuSizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MtuSizeResponse(const MtuSizeResponse& from);
  MtuSizeResponse(MtuSizeResponse&& from) noexcept
    : MtuSizeResponse() {
    *this = ::std::move(from);
  }

  inline MtuSizeResponse& operator=(const MtuSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MtuSizeResponse& operator=(MtuSizeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MtuSizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MtuSizeResponse* internal_default_instance() {
    return reinterpret_cast<const MtuSizeResponse*>(
               &_MtuSizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MtuSizeResponse& a, MtuSizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MtuSizeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MtuSizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MtuSizeResponse* New() const final {
    return CreateMaybeMessage<MtuSizeResponse>(nullptr);
  }

  MtuSizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MtuSizeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MtuSizeResponse& from);
  void MergeFrom(const MtuSizeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MtuSizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.MtuSizeResponse";
  }
  protected:
  explicit MtuSizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMtuFieldNumber = 1,
  };
  // int32 mtu = 1;
  void clear_mtu();
  ::PROTOBUF_NAMESPACE_ID::int32 mtu() const;
  void set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtu() const;
  void _internal_set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.MtuSizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class GetVlanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.GetVlanResponse) */ {
 public:
  inline GetVlanResponse() : GetVlanResponse(nullptr) {}
  virtual ~GetVlanResponse();
  explicit constexpr GetVlanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVlanResponse(const GetVlanResponse& from);
  GetVlanResponse(GetVlanResponse&& from) noexcept
    : GetVlanResponse() {
    *this = ::std::move(from);
  }

  inline GetVlanResponse& operator=(const GetVlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVlanResponse& operator=(GetVlanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVlanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVlanResponse* internal_default_instance() {
    return reinterpret_cast<const GetVlanResponse*>(
               &_GetVlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetVlanResponse& a, GetVlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVlanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVlanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVlanResponse* New() const final {
    return CreateMaybeMessage<GetVlanResponse>(nullptr);
  }

  GetVlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVlanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVlanResponse& from);
  void MergeFrom(const GetVlanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVlanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.GetVlanResponse";
  }
  protected:
  explicit GetVlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kFieldsFieldNumber = 3,
    kVlanModeFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string fields = 3;
  void clear_fields();
  const std::string& fields() const;
  void set_fields(const std::string& value);
  void set_fields(std::string&& value);
  void set_fields(const char* value);
  void set_fields(const char* value, size_t size);
  std::string* mutable_fields();
  std::string* release_fields();
  void set_allocated_fields(std::string* fields);
  private:
  const std::string& _internal_fields() const;
  void _internal_set_fields(const std::string& value);
  std::string* _internal_mutable_fields();
  public:

  // int32 vlan_mode = 2;
  void clear_vlan_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 vlan_mode() const;
  void set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vlan_mode() const;
  void _internal_set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.GetVlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fields_;
  ::PROTOBUF_NAMESPACE_ID::int32 vlan_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class ModeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.ModeResponse) */ {
 public:
  inline ModeResponse() : ModeResponse(nullptr) {}
  virtual ~ModeResponse();
  explicit constexpr ModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeResponse(const ModeResponse& from);
  ModeResponse(ModeResponse&& from) noexcept
    : ModeResponse() {
    *this = ::std::move(from);
  }

  inline ModeResponse& operator=(const ModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeResponse& operator=(ModeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeResponse* internal_default_instance() {
    return reinterpret_cast<const ModeResponse*>(
               &_ModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ModeResponse& a, ModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModeResponse* New() const final {
    return CreateMaybeMessage<ModeResponse>(nullptr);
  }

  ModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModeResponse& from);
  void MergeFrom(const ModeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.ModeResponse";
  }
  protected:
  explicit ModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.ModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class AgingTimeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.AgingTimeResponse) */ {
 public:
  inline AgingTimeResponse() : AgingTimeResponse(nullptr) {}
  virtual ~AgingTimeResponse();
  explicit constexpr AgingTimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgingTimeResponse(const AgingTimeResponse& from);
  AgingTimeResponse(AgingTimeResponse&& from) noexcept
    : AgingTimeResponse() {
    *this = ::std::move(from);
  }

  inline AgingTimeResponse& operator=(const AgingTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgingTimeResponse& operator=(AgingTimeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgingTimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgingTimeResponse* internal_default_instance() {
    return reinterpret_cast<const AgingTimeResponse*>(
               &_AgingTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(AgingTimeResponse& a, AgingTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AgingTimeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgingTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgingTimeResponse* New() const final {
    return CreateMaybeMessage<AgingTimeResponse>(nullptr);
  }

  AgingTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgingTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgingTimeResponse& from);
  void MergeFrom(const AgingTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgingTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.AgingTimeResponse";
  }
  protected:
  explicit AgingTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kAgingTimeFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // int32 aging_time = 2;
  void clear_aging_time();
  ::PROTOBUF_NAMESPACE_ID::int32 aging_time() const;
  void set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aging_time() const;
  void _internal_set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.AgingTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 aging_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class DevMacInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.DevMacInfoResponse) */ {
 public:
  inline DevMacInfoResponse() : DevMacInfoResponse(nullptr) {}
  virtual ~DevMacInfoResponse();
  explicit constexpr DevMacInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DevMacInfoResponse(const DevMacInfoResponse& from);
  DevMacInfoResponse(DevMacInfoResponse&& from) noexcept
    : DevMacInfoResponse() {
    *this = ::std::move(from);
  }

  inline DevMacInfoResponse& operator=(const DevMacInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevMacInfoResponse& operator=(DevMacInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevMacInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DevMacInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DevMacInfoResponse*>(
               &_DevMacInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DevMacInfoResponse& a, DevMacInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DevMacInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevMacInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevMacInfoResponse* New() const final {
    return CreateMaybeMessage<DevMacInfoResponse>(nullptr);
  }

  DevMacInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevMacInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevMacInfoResponse& from);
  void MergeFrom(const DevMacInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevMacInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.DevMacInfoResponse";
  }
  protected:
  explicit DevMacInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kAgingModeFieldNumber = 5,
    kMtuFieldNumber = 2,
    kVlanModeFieldNumber = 3,
    kLookupModeFieldNumber = 4,
    kAgingTimeFieldNumber = 6,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string aging_mode = 5;
  void clear_aging_mode();
  const std::string& aging_mode() const;
  void set_aging_mode(const std::string& value);
  void set_aging_mode(std::string&& value);
  void set_aging_mode(const char* value);
  void set_aging_mode(const char* value, size_t size);
  std::string* mutable_aging_mode();
  std::string* release_aging_mode();
  void set_allocated_aging_mode(std::string* aging_mode);
  private:
  const std::string& _internal_aging_mode() const;
  void _internal_set_aging_mode(const std::string& value);
  std::string* _internal_mutable_aging_mode();
  public:

  // int32 mtu = 2;
  void clear_mtu();
  ::PROTOBUF_NAMESPACE_ID::int32 mtu() const;
  void set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtu() const;
  void _internal_set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vlan_mode = 3;
  void clear_vlan_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 vlan_mode() const;
  void set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vlan_mode() const;
  void _internal_set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lookup_mode = 4;
  void clear_lookup_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 lookup_mode() const;
  void set_lookup_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lookup_mode() const;
  void _internal_set_lookup_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 aging_time = 6;
  void clear_aging_time();
  ::PROTOBUF_NAMESPACE_ID::int32 aging_time() const;
  void set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aging_time() const;
  void _internal_set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.DevMacInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aging_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtu_;
  ::PROTOBUF_NAMESPACE_ID::int32 vlan_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 lookup_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 aging_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SdnTableKeyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SdnTableKeyResponse) */ {
 public:
  inline SdnTableKeyResponse() : SdnTableKeyResponse(nullptr) {}
  virtual ~SdnTableKeyResponse();
  explicit constexpr SdnTableKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdnTableKeyResponse(const SdnTableKeyResponse& from);
  SdnTableKeyResponse(SdnTableKeyResponse&& from) noexcept
    : SdnTableKeyResponse() {
    *this = ::std::move(from);
  }

  inline SdnTableKeyResponse& operator=(const SdnTableKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdnTableKeyResponse& operator=(SdnTableKeyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdnTableKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdnTableKeyResponse* internal_default_instance() {
    return reinterpret_cast<const SdnTableKeyResponse*>(
               &_SdnTableKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SdnTableKeyResponse& a, SdnTableKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SdnTableKeyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdnTableKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdnTableKeyResponse* New() const final {
    return CreateMaybeMessage<SdnTableKeyResponse>(nullptr);
  }

  SdnTableKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdnTableKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdnTableKeyResponse& from);
  void MergeFrom(const SdnTableKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdnTableKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SdnTableKeyResponse";
  }
  protected:
  explicit SdnTableKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashKeyFieldNumber = 1,
  };
  // string hash_key = 1;
  void clear_hash_key();
  const std::string& hash_key() const;
  void set_hash_key(const std::string& value);
  void set_hash_key(std::string&& value);
  void set_hash_key(const char* value);
  void set_hash_key(const char* value, size_t size);
  std::string* mutable_hash_key();
  std::string* release_hash_key();
  void set_allocated_hash_key(std::string* hash_key);
  private:
  const std::string& _internal_hash_key() const;
  void _internal_set_hash_key(const std::string& value);
  std::string* _internal_mutable_hash_key();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SdnTableKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SdnTableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SdnTableResponse) */ {
 public:
  inline SdnTableResponse() : SdnTableResponse(nullptr) {}
  virtual ~SdnTableResponse();
  explicit constexpr SdnTableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SdnTableResponse(const SdnTableResponse& from);
  SdnTableResponse(SdnTableResponse&& from) noexcept
    : SdnTableResponse() {
    *this = ::std::move(from);
  }

  inline SdnTableResponse& operator=(const SdnTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SdnTableResponse& operator=(SdnTableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SdnTableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SdnTableResponse* internal_default_instance() {
    return reinterpret_cast<const SdnTableResponse*>(
               &_SdnTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SdnTableResponse& a, SdnTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SdnTableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SdnTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SdnTableResponse* New() const final {
    return CreateMaybeMessage<SdnTableResponse>(nullptr);
  }

  SdnTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SdnTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SdnTableResponse& from);
  void MergeFrom(const SdnTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SdnTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SdnTableResponse";
  }
  protected:
  explicit SdnTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kPortIdFieldNumber = 3,
    kMacAddrFieldNumber = 4,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string port_id = 3;
  void clear_port_id();
  const std::string& port_id() const;
  void set_port_id(const std::string& value);
  void set_port_id(std::string&& value);
  void set_port_id(const char* value);
  void set_port_id(const char* value, size_t size);
  std::string* mutable_port_id();
  std::string* release_port_id();
  void set_allocated_port_id(std::string* port_id);
  private:
  const std::string& _internal_port_id() const;
  void _internal_set_port_id(const std::string& value);
  std::string* _internal_mutable_port_id();
  public:

  // string mac_addr = 4;
  void clear_mac_addr();
  const std::string& mac_addr() const;
  void set_mac_addr(const std::string& value);
  void set_mac_addr(std::string&& value);
  void set_mac_addr(const char* value);
  void set_mac_addr(const char* value, size_t size);
  std::string* mutable_mac_addr();
  std::string* release_mac_addr();
  void set_allocated_mac_addr(std::string* mac_addr);
  private:
  const std::string& _internal_mac_addr() const;
  void _internal_set_mac_addr(const std::string& value);
  std::string* _internal_mutable_mac_addr();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SdnTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class LengthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.LengthResponse) */ {
 public:
  inline LengthResponse() : LengthResponse(nullptr) {}
  virtual ~LengthResponse();
  explicit constexpr LengthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LengthResponse(const LengthResponse& from);
  LengthResponse(LengthResponse&& from) noexcept
    : LengthResponse() {
    *this = ::std::move(from);
  }

  inline LengthResponse& operator=(const LengthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LengthResponse& operator=(LengthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LengthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LengthResponse* internal_default_instance() {
    return reinterpret_cast<const LengthResponse*>(
               &_LengthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(LengthResponse& a, LengthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LengthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LengthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LengthResponse* New() const final {
    return CreateMaybeMessage<LengthResponse>(nullptr);
  }

  LengthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LengthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LengthResponse& from);
  void MergeFrom(const LengthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LengthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.LengthResponse";
  }
  protected:
  explicit LengthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.LengthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class QuietZoneResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.QuietZoneResponse) */ {
 public:
  inline QuietZoneResponse() : QuietZoneResponse(nullptr) {}
  virtual ~QuietZoneResponse();
  explicit constexpr QuietZoneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuietZoneResponse(const QuietZoneResponse& from);
  QuietZoneResponse(QuietZoneResponse&& from) noexcept
    : QuietZoneResponse() {
    *this = ::std::move(from);
  }

  inline QuietZoneResponse& operator=(const QuietZoneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuietZoneResponse& operator=(QuietZoneResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuietZoneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuietZoneResponse* internal_default_instance() {
    return reinterpret_cast<const QuietZoneResponse*>(
               &_QuietZoneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(QuietZoneResponse& a, QuietZoneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuietZoneResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuietZoneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuietZoneResponse* New() const final {
    return CreateMaybeMessage<QuietZoneResponse>(nullptr);
  }

  QuietZoneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuietZoneResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuietZoneResponse& from);
  void MergeFrom(const QuietZoneResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuietZoneResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.QuietZoneResponse";
  }
  protected:
  explicit QuietZoneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.QuietZoneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class AddOnuResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.AddOnuResponse) */ {
 public:
  inline AddOnuResponse() : AddOnuResponse(nullptr) {}
  virtual ~AddOnuResponse();
  explicit constexpr AddOnuResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOnuResponse(const AddOnuResponse& from);
  AddOnuResponse(AddOnuResponse&& from) noexcept
    : AddOnuResponse() {
    *this = ::std::move(from);
  }

  inline AddOnuResponse& operator=(const AddOnuResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOnuResponse& operator=(AddOnuResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddOnuResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOnuResponse* internal_default_instance() {
    return reinterpret_cast<const AddOnuResponse*>(
               &_AddOnuResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AddOnuResponse& a, AddOnuResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOnuResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOnuResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddOnuResponse* New() const final {
    return CreateMaybeMessage<AddOnuResponse>(nullptr);
  }

  AddOnuResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddOnuResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddOnuResponse& from);
  void MergeFrom(const AddOnuResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOnuResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.AddOnuResponse";
  }
  protected:
  explicit AddOnuResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kResultFieldNumber = 3,
    kRateFieldNumber = 4,
    kVendorIdFieldNumber = 5,
    kVssnFieldNumber = 6,
    kOnuIdFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string result = 3;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string rate = 4;
  void clear_rate();
  const std::string& rate() const;
  void set_rate(const std::string& value);
  void set_rate(std::string&& value);
  void set_rate(const char* value);
  void set_rate(const char* value, size_t size);
  std::string* mutable_rate();
  std::string* release_rate();
  void set_allocated_rate(std::string* rate);
  private:
  const std::string& _internal_rate() const;
  void _internal_set_rate(const std::string& value);
  std::string* _internal_mutable_rate();
  public:

  // string vendor_id = 5;
  void clear_vendor_id();
  const std::string& vendor_id() const;
  void set_vendor_id(const std::string& value);
  void set_vendor_id(std::string&& value);
  void set_vendor_id(const char* value);
  void set_vendor_id(const char* value, size_t size);
  std::string* mutable_vendor_id();
  std::string* release_vendor_id();
  void set_allocated_vendor_id(std::string* vendor_id);
  private:
  const std::string& _internal_vendor_id() const;
  void _internal_set_vendor_id(const std::string& value);
  std::string* _internal_mutable_vendor_id();
  public:

  // string vssn = 6;
  void clear_vssn();
  const std::string& vssn() const;
  void set_vssn(const std::string& value);
  void set_vssn(std::string&& value);
  void set_vssn(const char* value);
  void set_vssn(const char* value, size_t size);
  std::string* mutable_vssn();
  std::string* release_vssn();
  void set_allocated_vssn(std::string* vssn);
  private:
  const std::string& _internal_vssn() const;
  void _internal_set_vssn(const std::string& value);
  std::string* _internal_mutable_vssn();
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.AddOnuResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vssn_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class SlaResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.SlaResponse) */ {
 public:
  inline SlaResponse() : SlaResponse(nullptr) {}
  virtual ~SlaResponse();
  explicit constexpr SlaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlaResponse(const SlaResponse& from);
  SlaResponse(SlaResponse&& from) noexcept
    : SlaResponse() {
    *this = ::std::move(from);
  }

  inline SlaResponse& operator=(const SlaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlaResponse& operator=(SlaResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SlaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlaResponse* internal_default_instance() {
    return reinterpret_cast<const SlaResponse*>(
               &_SlaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SlaResponse& a, SlaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SlaResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlaResponse* New() const final {
    return CreateMaybeMessage<SlaResponse>(nullptr);
  }

  SlaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SlaResponse& from);
  void MergeFrom(const SlaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.SlaResponse";
  }
  protected:
  explicit SlaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kTypeFieldNumber = 4,
    kFecFieldNumber = 8,
    kOnuIdFieldNumber = 2,
    kTcontFieldNumber = 3,
    kSiFieldNumber = 5,
    kAbminFieldNumber = 6,
    kDistanceFieldNumber = 9,
    kAbsurFieldNumber = 7,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string fec = 8;
  void clear_fec();
  const std::string& fec() const;
  void set_fec(const std::string& value);
  void set_fec(std::string&& value);
  void set_fec(const char* value);
  void set_fec(const char* value, size_t size);
  std::string* mutable_fec();
  std::string* release_fec();
  void set_allocated_fec(std::string* fec);
  private:
  const std::string& _internal_fec() const;
  void _internal_set_fec(const std::string& value);
  std::string* _internal_mutable_fec();
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tcont = 3;
  void clear_tcont();
  ::PROTOBUF_NAMESPACE_ID::int32 tcont() const;
  void set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tcont() const;
  void _internal_set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 si = 5;
  void clear_si();
  ::PROTOBUF_NAMESPACE_ID::int32 si() const;
  void set_si(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_si() const;
  void _internal_set_si(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 abmin = 6;
  void clear_abmin();
  ::PROTOBUF_NAMESPACE_ID::int32 abmin() const;
  void set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_abmin() const;
  void _internal_set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double distance = 9;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // int32 absur = 7;
  void clear_absur();
  ::PROTOBUF_NAMESPACE_ID::int32 absur() const;
  void set_absur(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_absur() const;
  void _internal_set_absur(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.SlaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fec_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tcont_;
  ::PROTOBUF_NAMESPACE_ID::int32 si_;
  ::PROTOBUF_NAMESPACE_ID::int32 abmin_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 absur_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class OnuVssnResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.OnuVssnResponse) */ {
 public:
  inline OnuVssnResponse() : OnuVssnResponse(nullptr) {}
  virtual ~OnuVssnResponse();
  explicit constexpr OnuVssnResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnuVssnResponse(const OnuVssnResponse& from);
  OnuVssnResponse(OnuVssnResponse&& from) noexcept
    : OnuVssnResponse() {
    *this = ::std::move(from);
  }

  inline OnuVssnResponse& operator=(const OnuVssnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnuVssnResponse& operator=(OnuVssnResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnuVssnResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnuVssnResponse* internal_default_instance() {
    return reinterpret_cast<const OnuVssnResponse*>(
               &_OnuVssnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(OnuVssnResponse& a, OnuVssnResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnuVssnResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnuVssnResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnuVssnResponse* New() const final {
    return CreateMaybeMessage<OnuVssnResponse>(nullptr);
  }

  OnuVssnResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnuVssnResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnuVssnResponse& from);
  void MergeFrom(const OnuVssnResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnuVssnResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.OnuVssnResponse";
  }
  protected:
  explicit OnuVssnResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kVssnFieldNumber = 3,
    kOnuIdFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string vssn = 3;
  void clear_vssn();
  const std::string& vssn() const;
  void set_vssn(const std::string& value);
  void set_vssn(std::string&& value);
  void set_vssn(const char* value);
  void set_vssn(const char* value, size_t size);
  std::string* mutable_vssn();
  std::string* release_vssn();
  void set_allocated_vssn(std::string* vssn);
  private:
  const std::string& _internal_vssn() const;
  void _internal_set_vssn(const std::string& value);
  std::string* _internal_mutable_vssn();
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.OnuVssnResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vssn_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class OnuDistResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.OnuDistResponse) */ {
 public:
  inline OnuDistResponse() : OnuDistResponse(nullptr) {}
  virtual ~OnuDistResponse();
  explicit constexpr OnuDistResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnuDistResponse(const OnuDistResponse& from);
  OnuDistResponse(OnuDistResponse&& from) noexcept
    : OnuDistResponse() {
    *this = ::std::move(from);
  }

  inline OnuDistResponse& operator=(const OnuDistResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnuDistResponse& operator=(OnuDistResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnuDistResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnuDistResponse* internal_default_instance() {
    return reinterpret_cast<const OnuDistResponse*>(
               &_OnuDistResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(OnuDistResponse& a, OnuDistResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnuDistResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnuDistResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnuDistResponse* New() const final {
    return CreateMaybeMessage<OnuDistResponse>(nullptr);
  }

  OnuDistResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnuDistResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnuDistResponse& from);
  void MergeFrom(const OnuDistResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnuDistResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.OnuDistResponse";
  }
  protected:
  explicit OnuDistResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kDistanceFieldNumber = 3,
    kOnuIdFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.OnuDistResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class BurstDelimitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.BurstDelimitResponse) */ {
 public:
  inline BurstDelimitResponse() : BurstDelimitResponse(nullptr) {}
  virtual ~BurstDelimitResponse();
  explicit constexpr BurstDelimitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BurstDelimitResponse(const BurstDelimitResponse& from);
  BurstDelimitResponse(BurstDelimitResponse&& from) noexcept
    : BurstDelimitResponse() {
    *this = ::std::move(from);
  }

  inline BurstDelimitResponse& operator=(const BurstDelimitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurstDelimitResponse& operator=(BurstDelimitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BurstDelimitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BurstDelimitResponse* internal_default_instance() {
    return reinterpret_cast<const BurstDelimitResponse*>(
               &_BurstDelimitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(BurstDelimitResponse& a, BurstDelimitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BurstDelimitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurstDelimitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BurstDelimitResponse* New() const final {
    return CreateMaybeMessage<BurstDelimitResponse>(nullptr);
  }

  BurstDelimitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BurstDelimitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BurstDelimitResponse& from);
  void MergeFrom(const BurstDelimitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BurstDelimitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.BurstDelimitResponse";
  }
  protected:
  explicit BurstDelimitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kDelimiterFieldNumber = 3,
    kLengthFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string delimiter = 3;
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const char* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // int32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.BurstDelimitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class BurstPreambleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.BurstPreambleResponse) */ {
 public:
  inline BurstPreambleResponse() : BurstPreambleResponse(nullptr) {}
  virtual ~BurstPreambleResponse();
  explicit constexpr BurstPreambleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BurstPreambleResponse(const BurstPreambleResponse& from);
  BurstPreambleResponse(BurstPreambleResponse&& from) noexcept
    : BurstPreambleResponse() {
    *this = ::std::move(from);
  }

  inline BurstPreambleResponse& operator=(const BurstPreambleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurstPreambleResponse& operator=(BurstPreambleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BurstPreambleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BurstPreambleResponse* internal_default_instance() {
    return reinterpret_cast<const BurstPreambleResponse*>(
               &_BurstPreambleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(BurstPreambleResponse& a, BurstPreambleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BurstPreambleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurstPreambleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BurstPreambleResponse* New() const final {
    return CreateMaybeMessage<BurstPreambleResponse>(nullptr);
  }

  BurstPreambleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BurstPreambleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BurstPreambleResponse& from);
  void MergeFrom(const BurstPreambleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BurstPreambleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.BurstPreambleResponse";
  }
  protected:
  explicit BurstPreambleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kPreambleFieldNumber = 3,
    kLengthFieldNumber = 2,
    kRepeatFieldNumber = 4,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string preamble = 3;
  void clear_preamble();
  const std::string& preamble() const;
  void set_preamble(const std::string& value);
  void set_preamble(std::string&& value);
  void set_preamble(const char* value);
  void set_preamble(const char* value, size_t size);
  std::string* mutable_preamble();
  std::string* release_preamble();
  void set_allocated_preamble(std::string* preamble);
  private:
  const std::string& _internal_preamble() const;
  void _internal_set_preamble(const std::string& value);
  std::string* _internal_mutable_preamble();
  public:

  // int32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 repeat = 4;
  void clear_repeat();
  ::PROTOBUF_NAMESPACE_ID::int32 repeat() const;
  void set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeat() const;
  void _internal_set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.BurstPreambleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preamble_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class BurstVersionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.BurstVersionResponse) */ {
 public:
  inline BurstVersionResponse() : BurstVersionResponse(nullptr) {}
  virtual ~BurstVersionResponse();
  explicit constexpr BurstVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BurstVersionResponse(const BurstVersionResponse& from);
  BurstVersionResponse(BurstVersionResponse&& from) noexcept
    : BurstVersionResponse() {
    *this = ::std::move(from);
  }

  inline BurstVersionResponse& operator=(const BurstVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurstVersionResponse& operator=(BurstVersionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BurstVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BurstVersionResponse* internal_default_instance() {
    return reinterpret_cast<const BurstVersionResponse*>(
               &_BurstVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(BurstVersionResponse& a, BurstVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BurstVersionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurstVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BurstVersionResponse* New() const final {
    return CreateMaybeMessage<BurstVersionResponse>(nullptr);
  }

  BurstVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BurstVersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BurstVersionResponse& from);
  void MergeFrom(const BurstVersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BurstVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.BurstVersionResponse";
  }
  protected:
  explicit BurstVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPontagFieldNumber = 4,
    kIndexFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string pontag = 4;
  void clear_pontag();
  const std::string& pontag() const;
  void set_pontag(const std::string& value);
  void set_pontag(std::string&& value);
  void set_pontag(const char* value);
  void set_pontag(const char* value, size_t size);
  std::string* mutable_pontag();
  std::string* release_pontag();
  void set_allocated_pontag(std::string* pontag);
  private:
  const std::string& _internal_pontag() const;
  void _internal_set_pontag(const std::string& value);
  std::string* _internal_mutable_pontag();
  public:

  // int32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.BurstVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pontag_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class BurstProfileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.BurstProfileResponse) */ {
 public:
  inline BurstProfileResponse() : BurstProfileResponse(nullptr) {}
  virtual ~BurstProfileResponse();
  explicit constexpr BurstProfileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BurstProfileResponse(const BurstProfileResponse& from);
  BurstProfileResponse(BurstProfileResponse&& from) noexcept
    : BurstProfileResponse() {
    *this = ::std::move(from);
  }

  inline BurstProfileResponse& operator=(const BurstProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BurstProfileResponse& operator=(BurstProfileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BurstProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BurstProfileResponse* internal_default_instance() {
    return reinterpret_cast<const BurstProfileResponse*>(
               &_BurstProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(BurstProfileResponse& a, BurstProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BurstProfileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BurstProfileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BurstProfileResponse* New() const final {
    return CreateMaybeMessage<BurstProfileResponse>(nullptr);
  }

  BurstProfileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BurstProfileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BurstProfileResponse& from);
  void MergeFrom(const BurstProfileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BurstProfileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.BurstProfileResponse";
  }
  protected:
  explicit BurstProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kVersionFieldNumber = 3,
    kDelimiterFieldNumber = 6,
    kPreambleFieldNumber = 8,
    kPontagFieldNumber = 10,
    kOnuIdFieldNumber = 2,
    kIndexFieldNumber = 4,
    kDelimiterLengthFieldNumber = 5,
    kPreambleLengthFieldNumber = 7,
    kRepeatFieldNumber = 9,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string delimiter = 6;
  void clear_delimiter();
  const std::string& delimiter() const;
  void set_delimiter(const std::string& value);
  void set_delimiter(std::string&& value);
  void set_delimiter(const char* value);
  void set_delimiter(const char* value, size_t size);
  std::string* mutable_delimiter();
  std::string* release_delimiter();
  void set_allocated_delimiter(std::string* delimiter);
  private:
  const std::string& _internal_delimiter() const;
  void _internal_set_delimiter(const std::string& value);
  std::string* _internal_mutable_delimiter();
  public:

  // string preamble = 8;
  void clear_preamble();
  const std::string& preamble() const;
  void set_preamble(const std::string& value);
  void set_preamble(std::string&& value);
  void set_preamble(const char* value);
  void set_preamble(const char* value, size_t size);
  std::string* mutable_preamble();
  std::string* release_preamble();
  void set_allocated_preamble(std::string* preamble);
  private:
  const std::string& _internal_preamble() const;
  void _internal_set_preamble(const std::string& value);
  std::string* _internal_mutable_preamble();
  public:

  // string pontag = 10;
  void clear_pontag();
  const std::string& pontag() const;
  void set_pontag(const std::string& value);
  void set_pontag(std::string&& value);
  void set_pontag(const char* value);
  void set_pontag(const char* value, size_t size);
  std::string* mutable_pontag();
  std::string* release_pontag();
  void set_allocated_pontag(std::string* pontag);
  private:
  const std::string& _internal_pontag() const;
  void _internal_set_pontag(const std::string& value);
  std::string* _internal_mutable_pontag();
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delimiter_length = 5;
  void clear_delimiter_length();
  ::PROTOBUF_NAMESPACE_ID::int32 delimiter_length() const;
  void set_delimiter_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delimiter_length() const;
  void _internal_set_delimiter_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 preamble_length = 7;
  void clear_preamble_length();
  ::PROTOBUF_NAMESPACE_ID::int32 preamble_length() const;
  void set_preamble_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_preamble_length() const;
  void _internal_set_preamble_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 repeat = 9;
  void clear_repeat();
  ::PROTOBUF_NAMESPACE_ID::int32 repeat() const;
  void set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeat() const;
  void _internal_set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.BurstProfileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delimiter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preamble_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pontag_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 delimiter_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 preamble_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class RegisterStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.RegisterStatusResponse) */ {
 public:
  inline RegisterStatusResponse() : RegisterStatusResponse(nullptr) {}
  virtual ~RegisterStatusResponse();
  explicit constexpr RegisterStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterStatusResponse(const RegisterStatusResponse& from);
  RegisterStatusResponse(RegisterStatusResponse&& from) noexcept
    : RegisterStatusResponse() {
    *this = ::std::move(from);
  }

  inline RegisterStatusResponse& operator=(const RegisterStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterStatusResponse& operator=(RegisterStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterStatusResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterStatusResponse*>(
               &_RegisterStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(RegisterStatusResponse& a, RegisterStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterStatusResponse* New() const final {
    return CreateMaybeMessage<RegisterStatusResponse>(nullptr);
  }

  RegisterStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterStatusResponse& from);
  void MergeFrom(const RegisterStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.RegisterStatusResponse";
  }
  protected:
  explicit RegisterStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kStatusFieldNumber = 3,
    kOnuIdFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string status = 3;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.RegisterStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class OnuInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.OnuInfoResponse) */ {
 public:
  inline OnuInfoResponse() : OnuInfoResponse(nullptr) {}
  virtual ~OnuInfoResponse();
  explicit constexpr OnuInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OnuInfoResponse(const OnuInfoResponse& from);
  OnuInfoResponse(OnuInfoResponse&& from) noexcept
    : OnuInfoResponse() {
    *this = ::std::move(from);
  }

  inline OnuInfoResponse& operator=(const OnuInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnuInfoResponse& operator=(OnuInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnuInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OnuInfoResponse* internal_default_instance() {
    return reinterpret_cast<const OnuInfoResponse*>(
               &_OnuInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(OnuInfoResponse& a, OnuInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OnuInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnuInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnuInfoResponse* New() const final {
    return CreateMaybeMessage<OnuInfoResponse>(nullptr);
  }

  OnuInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnuInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnuInfoResponse& from);
  void MergeFrom(const OnuInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnuInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.OnuInfoResponse";
  }
  protected:
  explicit OnuInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kRateFieldNumber = 3,
    kVendorIdFieldNumber = 4,
    kVssnFieldNumber = 5,
    kStatusFieldNumber = 7,
    kDistanceFieldNumber = 6,
    kOnuIdFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string rate = 3;
  void clear_rate();
  const std::string& rate() const;
  void set_rate(const std::string& value);
  void set_rate(std::string&& value);
  void set_rate(const char* value);
  void set_rate(const char* value, size_t size);
  std::string* mutable_rate();
  std::string* release_rate();
  void set_allocated_rate(std::string* rate);
  private:
  const std::string& _internal_rate() const;
  void _internal_set_rate(const std::string& value);
  std::string* _internal_mutable_rate();
  public:

  // string vendor_id = 4;
  void clear_vendor_id();
  const std::string& vendor_id() const;
  void set_vendor_id(const std::string& value);
  void set_vendor_id(std::string&& value);
  void set_vendor_id(const char* value);
  void set_vendor_id(const char* value, size_t size);
  std::string* mutable_vendor_id();
  std::string* release_vendor_id();
  void set_allocated_vendor_id(std::string* vendor_id);
  private:
  const std::string& _internal_vendor_id() const;
  void _internal_set_vendor_id(const std::string& value);
  std::string* _internal_mutable_vendor_id();
  public:

  // string vssn = 5;
  void clear_vssn();
  const std::string& vssn() const;
  void set_vssn(const std::string& value);
  void set_vssn(std::string&& value);
  void set_vssn(const char* value);
  void set_vssn(const char* value, size_t size);
  std::string* mutable_vssn();
  std::string* release_vssn();
  void set_allocated_vssn(std::string* vssn);
  private:
  const std::string& _internal_vssn() const;
  void _internal_set_vssn(const std::string& value);
  std::string* _internal_mutable_vssn();
  public:

  // string status = 7;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // double distance = 6;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.OnuInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vssn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  double distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  virtual ~StatusResponse();
  explicit constexpr StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return CreateMaybeMessage<StatusResponse>(nullptr);
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class TodResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.TodResponse) */ {
 public:
  inline TodResponse() : TodResponse(nullptr) {}
  virtual ~TodResponse();
  explicit constexpr TodResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodResponse(const TodResponse& from);
  TodResponse(TodResponse&& from) noexcept
    : TodResponse() {
    *this = ::std::move(from);
  }

  inline TodResponse& operator=(const TodResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodResponse& operator=(TodResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TodResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodResponse* internal_default_instance() {
    return reinterpret_cast<const TodResponse*>(
               &_TodResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TodResponse& a, TodResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TodResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TodResponse* New() const final {
    return CreateMaybeMessage<TodResponse>(nullptr);
  }

  TodResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TodResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TodResponse& from);
  void MergeFrom(const TodResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TodResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.TodResponse";
  }
  protected:
  explicit TodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kModeFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // int32 mode = 2;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.TodResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class FecDecResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.FecDecResponse) */ {
 public:
  inline FecDecResponse() : FecDecResponse(nullptr) {}
  virtual ~FecDecResponse();
  explicit constexpr FecDecResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FecDecResponse(const FecDecResponse& from);
  FecDecResponse(FecDecResponse&& from) noexcept
    : FecDecResponse() {
    *this = ::std::move(from);
  }

  inline FecDecResponse& operator=(const FecDecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FecDecResponse& operator=(FecDecResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FecDecResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FecDecResponse* internal_default_instance() {
    return reinterpret_cast<const FecDecResponse*>(
               &_FecDecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(FecDecResponse& a, FecDecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FecDecResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FecDecResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FecDecResponse* New() const final {
    return CreateMaybeMessage<FecDecResponse>(nullptr);
  }

  FecDecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FecDecResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FecDecResponse& from);
  void MergeFrom(const FecDecResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FecDecResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.FecDecResponse";
  }
  protected:
  explicit FecDecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.FecDecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class ErrorPermitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.ErrorPermitResponse) */ {
 public:
  inline ErrorPermitResponse() : ErrorPermitResponse(nullptr) {}
  virtual ~ErrorPermitResponse();
  explicit constexpr ErrorPermitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorPermitResponse(const ErrorPermitResponse& from);
  ErrorPermitResponse(ErrorPermitResponse&& from) noexcept
    : ErrorPermitResponse() {
    *this = ::std::move(from);
  }

  inline ErrorPermitResponse& operator=(const ErrorPermitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorPermitResponse& operator=(ErrorPermitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorPermitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorPermitResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorPermitResponse*>(
               &_ErrorPermitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ErrorPermitResponse& a, ErrorPermitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorPermitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorPermitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorPermitResponse* New() const final {
    return CreateMaybeMessage<ErrorPermitResponse>(nullptr);
  }

  ErrorPermitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorPermitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorPermitResponse& from);
  void MergeFrom(const ErrorPermitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorPermitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.ErrorPermitResponse";
  }
  protected:
  explicit ErrorPermitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.ErrorPermitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class PmControlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.PmControlResponse) */ {
 public:
  inline PmControlResponse() : PmControlResponse(nullptr) {}
  virtual ~PmControlResponse();
  explicit constexpr PmControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PmControlResponse(const PmControlResponse& from);
  PmControlResponse(PmControlResponse&& from) noexcept
    : PmControlResponse() {
    *this = ::std::move(from);
  }

  inline PmControlResponse& operator=(const PmControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmControlResponse& operator=(PmControlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PmControlResponse* internal_default_instance() {
    return reinterpret_cast<const PmControlResponse*>(
               &_PmControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(PmControlResponse& a, PmControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PmControlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PmControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmControlResponse* New() const final {
    return CreateMaybeMessage<PmControlResponse>(nullptr);
  }

  PmControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmControlResponse& from);
  void MergeFrom(const PmControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.PmControlResponse";
  }
  protected:
  explicit PmControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kActionFieldNumber = 2,
    kOnuModeFieldNumber = 3,
    kTransinitFieldNumber = 4,
    kTxinitFieldNumber = 5,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string onu_mode = 3;
  void clear_onu_mode();
  const std::string& onu_mode() const;
  void set_onu_mode(const std::string& value);
  void set_onu_mode(std::string&& value);
  void set_onu_mode(const char* value);
  void set_onu_mode(const char* value, size_t size);
  std::string* mutable_onu_mode();
  std::string* release_onu_mode();
  void set_allocated_onu_mode(std::string* onu_mode);
  private:
  const std::string& _internal_onu_mode() const;
  void _internal_set_onu_mode(const std::string& value);
  std::string* _internal_mutable_onu_mode();
  public:

  // int32 transinit = 4;
  void clear_transinit();
  ::PROTOBUF_NAMESPACE_ID::int32 transinit() const;
  void set_transinit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transinit() const;
  void _internal_set_transinit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 txinit = 5;
  void clear_txinit();
  ::PROTOBUF_NAMESPACE_ID::int32 txinit() const;
  void set_txinit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_txinit() const;
  void _internal_set_txinit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.PmControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onu_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 transinit_;
  ::PROTOBUF_NAMESPACE_ID::int32 txinit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// -------------------------------------------------------------------

class PmTableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bossopenolt.PmTableResponse) */ {
 public:
  inline PmTableResponse() : PmTableResponse(nullptr) {}
  virtual ~PmTableResponse();
  explicit constexpr PmTableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PmTableResponse(const PmTableResponse& from);
  PmTableResponse(PmTableResponse&& from) noexcept
    : PmTableResponse() {
    *this = ::std::move(from);
  }

  inline PmTableResponse& operator=(const PmTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmTableResponse& operator=(PmTableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmTableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PmTableResponse* internal_default_instance() {
    return reinterpret_cast<const PmTableResponse*>(
               &_PmTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(PmTableResponse& a, PmTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PmTableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PmTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmTableResponse* New() const final {
    return CreateMaybeMessage<PmTableResponse>(nullptr);
  }

  PmTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmTableResponse& from);
  void MergeFrom(const PmTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bossopenolt.PmTableResponse";
  }
  protected:
  explicit PmTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bossopenolt_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdFieldNumber = 1,
    kModeFieldNumber = 3,
    kActionFieldNumber = 8,
    kStatusFieldNumber = 9,
    kOnuIdFieldNumber = 2,
    kSleepFieldNumber = 4,
    kAwareFieldNumber = 5,
    kRxoffFieldNumber = 6,
    kHoldFieldNumber = 7,
  };
  // string device_id = 1;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string mode = 3;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string action = 8;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string status = 9;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 onu_id = 2;
  void clear_onu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id() const;
  void set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_onu_id() const;
  void _internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sleep = 4;
  void clear_sleep();
  ::PROTOBUF_NAMESPACE_ID::int32 sleep() const;
  void set_sleep(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sleep() const;
  void _internal_set_sleep(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 aware = 5;
  void clear_aware();
  ::PROTOBUF_NAMESPACE_ID::int32 aware() const;
  void set_aware(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aware() const;
  void _internal_set_aware(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rxoff = 6;
  void clear_rxoff();
  ::PROTOBUF_NAMESPACE_ID::int32 rxoff() const;
  void set_rxoff(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rxoff() const;
  void _internal_set_rxoff(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hold = 7;
  void clear_hold();
  ::PROTOBUF_NAMESPACE_ID::int32 hold() const;
  void set_hold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hold() const;
  void _internal_set_hold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bossopenolt.PmTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int32 onu_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sleep_;
  ::PROTOBUF_NAMESPACE_ID::int32 aware_;
  ::PROTOBUF_NAMESPACE_ID::int32 rxoff_;
  ::PROTOBUF_NAMESPACE_ID::int32 hold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bossopenolt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// boss_request

// string device_id = 1;
inline void boss_request::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& boss_request::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.boss_request.device_id)
  return _internal_device_id();
}
inline void boss_request::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.boss_request.device_id)
}
inline std::string* boss_request::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.boss_request.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& boss_request::_internal_device_id() const {
  return device_id_.Get();
}
inline void boss_request::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void boss_request::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.boss_request.device_id)
}
inline void boss_request::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.boss_request.device_id)
}
inline void boss_request::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.boss_request.device_id)
}
inline std::string* boss_request::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* boss_request::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.boss_request.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void boss_request::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.boss_request.device_id)
}

// .bossopenolt.paramFields param = 2;
inline bool boss_request::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool boss_request::has_param() const {
  return _internal_has_param();
}
inline void boss_request::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::bossopenolt::paramFields& boss_request::_internal_param() const {
  const ::bossopenolt::paramFields* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::bossopenolt::paramFields&>(
      ::bossopenolt::_paramFields_default_instance_);
}
inline const ::bossopenolt::paramFields& boss_request::param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.boss_request.param)
  return _internal_param();
}
inline void boss_request::unsafe_arena_set_allocated_param(
    ::bossopenolt::paramFields* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.boss_request.param)
}
inline ::bossopenolt::paramFields* boss_request::release_param() {
  
  ::bossopenolt::paramFields* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bossopenolt::paramFields* boss_request::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.boss_request.param)
  
  ::bossopenolt::paramFields* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::bossopenolt::paramFields* boss_request::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::bossopenolt::paramFields>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::bossopenolt::paramFields* boss_request::mutable_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.boss_request.param)
  return _internal_mutable_param();
}
inline void boss_request::set_allocated_param(::bossopenolt::paramFields* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.boss_request.param)
}

// -------------------------------------------------------------------

// paramFields

// .bossopenolt.SetPmdTxdis setpmdtxdis_param = 2;
inline bool paramFields::_internal_has_setpmdtxdis_param() const {
  return data_case() == kSetpmdtxdisParam;
}
inline bool paramFields::has_setpmdtxdis_param() const {
  return _internal_has_setpmdtxdis_param();
}
inline void paramFields::set_has_setpmdtxdis_param() {
  _oneof_case_[0] = kSetpmdtxdisParam;
}
inline void paramFields::clear_setpmdtxdis_param() {
  if (_internal_has_setpmdtxdis_param()) {
    if (GetArena() == nullptr) {
      delete data_.setpmdtxdis_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetPmdTxdis* paramFields::release_setpmdtxdis_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setpmdtxdis_param)
  if (_internal_has_setpmdtxdis_param()) {
    clear_has_data();
      ::bossopenolt::SetPmdTxdis* temp = data_.setpmdtxdis_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setpmdtxdis_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetPmdTxdis& paramFields::_internal_setpmdtxdis_param() const {
  return _internal_has_setpmdtxdis_param()
      ? *data_.setpmdtxdis_param_
      : reinterpret_cast< ::bossopenolt::SetPmdTxdis&>(::bossopenolt::_SetPmdTxdis_default_instance_);
}
inline const ::bossopenolt::SetPmdTxdis& paramFields::setpmdtxdis_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setpmdtxdis_param)
  return _internal_setpmdtxdis_param();
}
inline ::bossopenolt::SetPmdTxdis* paramFields::unsafe_arena_release_setpmdtxdis_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setpmdtxdis_param)
  if (_internal_has_setpmdtxdis_param()) {
    clear_has_data();
    ::bossopenolt::SetPmdTxdis* temp = data_.setpmdtxdis_param_;
    data_.setpmdtxdis_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setpmdtxdis_param(::bossopenolt::SetPmdTxdis* setpmdtxdis_param) {
  clear_data();
  if (setpmdtxdis_param) {
    set_has_setpmdtxdis_param();
    data_.setpmdtxdis_param_ = setpmdtxdis_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setpmdtxdis_param)
}
inline ::bossopenolt::SetPmdTxdis* paramFields::_internal_mutable_setpmdtxdis_param() {
  if (!_internal_has_setpmdtxdis_param()) {
    clear_data();
    set_has_setpmdtxdis_param();
    data_.setpmdtxdis_param_ = CreateMaybeMessage< ::bossopenolt::SetPmdTxdis >(GetArena());
  }
  return data_.setpmdtxdis_param_;
}
inline ::bossopenolt::SetPmdTxdis* paramFields::mutable_setpmdtxdis_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setpmdtxdis_param)
  return _internal_mutable_setpmdtxdis_param();
}

// .bossopenolt.GetPmdsKind getpmdskind_param = 3;
inline bool paramFields::_internal_has_getpmdskind_param() const {
  return data_case() == kGetpmdskindParam;
}
inline bool paramFields::has_getpmdskind_param() const {
  return _internal_has_getpmdskind_param();
}
inline void paramFields::set_has_getpmdskind_param() {
  _oneof_case_[0] = kGetpmdskindParam;
}
inline void paramFields::clear_getpmdskind_param() {
  if (_internal_has_getpmdskind_param()) {
    if (GetArena() == nullptr) {
      delete data_.getpmdskind_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::GetPmdsKind* paramFields::release_getpmdskind_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.getpmdskind_param)
  if (_internal_has_getpmdskind_param()) {
    clear_has_data();
      ::bossopenolt::GetPmdsKind* temp = data_.getpmdskind_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.getpmdskind_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::GetPmdsKind& paramFields::_internal_getpmdskind_param() const {
  return _internal_has_getpmdskind_param()
      ? *data_.getpmdskind_param_
      : reinterpret_cast< ::bossopenolt::GetPmdsKind&>(::bossopenolt::_GetPmdsKind_default_instance_);
}
inline const ::bossopenolt::GetPmdsKind& paramFields::getpmdskind_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.getpmdskind_param)
  return _internal_getpmdskind_param();
}
inline ::bossopenolt::GetPmdsKind* paramFields::unsafe_arena_release_getpmdskind_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.getpmdskind_param)
  if (_internal_has_getpmdskind_param()) {
    clear_has_data();
    ::bossopenolt::GetPmdsKind* temp = data_.getpmdskind_param_;
    data_.getpmdskind_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_getpmdskind_param(::bossopenolt::GetPmdsKind* getpmdskind_param) {
  clear_data();
  if (getpmdskind_param) {
    set_has_getpmdskind_param();
    data_.getpmdskind_param_ = getpmdskind_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.getpmdskind_param)
}
inline ::bossopenolt::GetPmdsKind* paramFields::_internal_mutable_getpmdskind_param() {
  if (!_internal_has_getpmdskind_param()) {
    clear_data();
    set_has_getpmdskind_param();
    data_.getpmdskind_param_ = CreateMaybeMessage< ::bossopenolt::GetPmdsKind >(GetArena());
  }
  return data_.getpmdskind_param_;
}
inline ::bossopenolt::GetPmdsKind* paramFields::mutable_getpmdskind_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.getpmdskind_param)
  return _internal_mutable_getpmdskind_param();
}

// .bossopenolt.SetPort setport_aram = 4;
inline bool paramFields::_internal_has_setport_aram() const {
  return data_case() == kSetportAram;
}
inline bool paramFields::has_setport_aram() const {
  return _internal_has_setport_aram();
}
inline void paramFields::set_has_setport_aram() {
  _oneof_case_[0] = kSetportAram;
}
inline void paramFields::clear_setport_aram() {
  if (_internal_has_setport_aram()) {
    if (GetArena() == nullptr) {
      delete data_.setport_aram_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetPort* paramFields::release_setport_aram() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setport_aram)
  if (_internal_has_setport_aram()) {
    clear_has_data();
      ::bossopenolt::SetPort* temp = data_.setport_aram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setport_aram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetPort& paramFields::_internal_setport_aram() const {
  return _internal_has_setport_aram()
      ? *data_.setport_aram_
      : reinterpret_cast< ::bossopenolt::SetPort&>(::bossopenolt::_SetPort_default_instance_);
}
inline const ::bossopenolt::SetPort& paramFields::setport_aram() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setport_aram)
  return _internal_setport_aram();
}
inline ::bossopenolt::SetPort* paramFields::unsafe_arena_release_setport_aram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setport_aram)
  if (_internal_has_setport_aram()) {
    clear_has_data();
    ::bossopenolt::SetPort* temp = data_.setport_aram_;
    data_.setport_aram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setport_aram(::bossopenolt::SetPort* setport_aram) {
  clear_data();
  if (setport_aram) {
    set_has_setport_aram();
    data_.setport_aram_ = setport_aram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setport_aram)
}
inline ::bossopenolt::SetPort* paramFields::_internal_mutable_setport_aram() {
  if (!_internal_has_setport_aram()) {
    clear_data();
    set_has_setport_aram();
    data_.setport_aram_ = CreateMaybeMessage< ::bossopenolt::SetPort >(GetArena());
  }
  return data_.setport_aram_;
}
inline ::bossopenolt::SetPort* paramFields::mutable_setport_aram() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setport_aram)
  return _internal_mutable_setport_aram();
}

// .bossopenolt.SetPortKind setportkind_param = 5;
inline bool paramFields::_internal_has_setportkind_param() const {
  return data_case() == kSetportkindParam;
}
inline bool paramFields::has_setportkind_param() const {
  return _internal_has_setportkind_param();
}
inline void paramFields::set_has_setportkind_param() {
  _oneof_case_[0] = kSetportkindParam;
}
inline void paramFields::clear_setportkind_param() {
  if (_internal_has_setportkind_param()) {
    if (GetArena() == nullptr) {
      delete data_.setportkind_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetPortKind* paramFields::release_setportkind_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setportkind_param)
  if (_internal_has_setportkind_param()) {
    clear_has_data();
      ::bossopenolt::SetPortKind* temp = data_.setportkind_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setportkind_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetPortKind& paramFields::_internal_setportkind_param() const {
  return _internal_has_setportkind_param()
      ? *data_.setportkind_param_
      : reinterpret_cast< ::bossopenolt::SetPortKind&>(::bossopenolt::_SetPortKind_default_instance_);
}
inline const ::bossopenolt::SetPortKind& paramFields::setportkind_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setportkind_param)
  return _internal_setportkind_param();
}
inline ::bossopenolt::SetPortKind* paramFields::unsafe_arena_release_setportkind_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setportkind_param)
  if (_internal_has_setportkind_param()) {
    clear_has_data();
    ::bossopenolt::SetPortKind* temp = data_.setportkind_param_;
    data_.setportkind_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setportkind_param(::bossopenolt::SetPortKind* setportkind_param) {
  clear_data();
  if (setportkind_param) {
    set_has_setportkind_param();
    data_.setportkind_param_ = setportkind_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setportkind_param)
}
inline ::bossopenolt::SetPortKind* paramFields::_internal_mutable_setportkind_param() {
  if (!_internal_has_setportkind_param()) {
    clear_data();
    set_has_setportkind_param();
    data_.setportkind_param_ = CreateMaybeMessage< ::bossopenolt::SetPortKind >(GetArena());
  }
  return data_.setportkind_param_;
}
inline ::bossopenolt::SetPortKind* paramFields::mutable_setportkind_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setportkind_param)
  return _internal_mutable_setportkind_param();
}

// .bossopenolt.SetMtuSize setmtusize_param = 6;
inline bool paramFields::_internal_has_setmtusize_param() const {
  return data_case() == kSetmtusizeParam;
}
inline bool paramFields::has_setmtusize_param() const {
  return _internal_has_setmtusize_param();
}
inline void paramFields::set_has_setmtusize_param() {
  _oneof_case_[0] = kSetmtusizeParam;
}
inline void paramFields::clear_setmtusize_param() {
  if (_internal_has_setmtusize_param()) {
    if (GetArena() == nullptr) {
      delete data_.setmtusize_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetMtuSize* paramFields::release_setmtusize_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setmtusize_param)
  if (_internal_has_setmtusize_param()) {
    clear_has_data();
      ::bossopenolt::SetMtuSize* temp = data_.setmtusize_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setmtusize_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetMtuSize& paramFields::_internal_setmtusize_param() const {
  return _internal_has_setmtusize_param()
      ? *data_.setmtusize_param_
      : reinterpret_cast< ::bossopenolt::SetMtuSize&>(::bossopenolt::_SetMtuSize_default_instance_);
}
inline const ::bossopenolt::SetMtuSize& paramFields::setmtusize_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setmtusize_param)
  return _internal_setmtusize_param();
}
inline ::bossopenolt::SetMtuSize* paramFields::unsafe_arena_release_setmtusize_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setmtusize_param)
  if (_internal_has_setmtusize_param()) {
    clear_has_data();
    ::bossopenolt::SetMtuSize* temp = data_.setmtusize_param_;
    data_.setmtusize_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setmtusize_param(::bossopenolt::SetMtuSize* setmtusize_param) {
  clear_data();
  if (setmtusize_param) {
    set_has_setmtusize_param();
    data_.setmtusize_param_ = setmtusize_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setmtusize_param)
}
inline ::bossopenolt::SetMtuSize* paramFields::_internal_mutable_setmtusize_param() {
  if (!_internal_has_setmtusize_param()) {
    clear_data();
    set_has_setmtusize_param();
    data_.setmtusize_param_ = CreateMaybeMessage< ::bossopenolt::SetMtuSize >(GetArena());
  }
  return data_.setmtusize_param_;
}
inline ::bossopenolt::SetMtuSize* paramFields::mutable_setmtusize_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setmtusize_param)
  return _internal_mutable_setmtusize_param();
}

// .bossopenolt.SetVlan setvlan_param = 7;
inline bool paramFields::_internal_has_setvlan_param() const {
  return data_case() == kSetvlanParam;
}
inline bool paramFields::has_setvlan_param() const {
  return _internal_has_setvlan_param();
}
inline void paramFields::set_has_setvlan_param() {
  _oneof_case_[0] = kSetvlanParam;
}
inline void paramFields::clear_setvlan_param() {
  if (_internal_has_setvlan_param()) {
    if (GetArena() == nullptr) {
      delete data_.setvlan_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetVlan* paramFields::release_setvlan_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setvlan_param)
  if (_internal_has_setvlan_param()) {
    clear_has_data();
      ::bossopenolt::SetVlan* temp = data_.setvlan_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setvlan_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetVlan& paramFields::_internal_setvlan_param() const {
  return _internal_has_setvlan_param()
      ? *data_.setvlan_param_
      : reinterpret_cast< ::bossopenolt::SetVlan&>(::bossopenolt::_SetVlan_default_instance_);
}
inline const ::bossopenolt::SetVlan& paramFields::setvlan_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setvlan_param)
  return _internal_setvlan_param();
}
inline ::bossopenolt::SetVlan* paramFields::unsafe_arena_release_setvlan_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setvlan_param)
  if (_internal_has_setvlan_param()) {
    clear_has_data();
    ::bossopenolt::SetVlan* temp = data_.setvlan_param_;
    data_.setvlan_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setvlan_param(::bossopenolt::SetVlan* setvlan_param) {
  clear_data();
  if (setvlan_param) {
    set_has_setvlan_param();
    data_.setvlan_param_ = setvlan_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setvlan_param)
}
inline ::bossopenolt::SetVlan* paramFields::_internal_mutable_setvlan_param() {
  if (!_internal_has_setvlan_param()) {
    clear_data();
    set_has_setvlan_param();
    data_.setvlan_param_ = CreateMaybeMessage< ::bossopenolt::SetVlan >(GetArena());
  }
  return data_.setvlan_param_;
}
inline ::bossopenolt::SetVlan* paramFields::mutable_setvlan_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setvlan_param)
  return _internal_mutable_setvlan_param();
}

// .bossopenolt.SetDirectionMode setdirectiommode_param = 8;
inline bool paramFields::_internal_has_setdirectiommode_param() const {
  return data_case() == kSetdirectiommodeParam;
}
inline bool paramFields::has_setdirectiommode_param() const {
  return _internal_has_setdirectiommode_param();
}
inline void paramFields::set_has_setdirectiommode_param() {
  _oneof_case_[0] = kSetdirectiommodeParam;
}
inline void paramFields::clear_setdirectiommode_param() {
  if (_internal_has_setdirectiommode_param()) {
    if (GetArena() == nullptr) {
      delete data_.setdirectiommode_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetDirectionMode* paramFields::release_setdirectiommode_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setdirectiommode_param)
  if (_internal_has_setdirectiommode_param()) {
    clear_has_data();
      ::bossopenolt::SetDirectionMode* temp = data_.setdirectiommode_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setdirectiommode_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetDirectionMode& paramFields::_internal_setdirectiommode_param() const {
  return _internal_has_setdirectiommode_param()
      ? *data_.setdirectiommode_param_
      : reinterpret_cast< ::bossopenolt::SetDirectionMode&>(::bossopenolt::_SetDirectionMode_default_instance_);
}
inline const ::bossopenolt::SetDirectionMode& paramFields::setdirectiommode_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setdirectiommode_param)
  return _internal_setdirectiommode_param();
}
inline ::bossopenolt::SetDirectionMode* paramFields::unsafe_arena_release_setdirectiommode_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setdirectiommode_param)
  if (_internal_has_setdirectiommode_param()) {
    clear_has_data();
    ::bossopenolt::SetDirectionMode* temp = data_.setdirectiommode_param_;
    data_.setdirectiommode_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setdirectiommode_param(::bossopenolt::SetDirectionMode* setdirectiommode_param) {
  clear_data();
  if (setdirectiommode_param) {
    set_has_setdirectiommode_param();
    data_.setdirectiommode_param_ = setdirectiommode_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setdirectiommode_param)
}
inline ::bossopenolt::SetDirectionMode* paramFields::_internal_mutable_setdirectiommode_param() {
  if (!_internal_has_setdirectiommode_param()) {
    clear_data();
    set_has_setdirectiommode_param();
    data_.setdirectiommode_param_ = CreateMaybeMessage< ::bossopenolt::SetDirectionMode >(GetArena());
  }
  return data_.setdirectiommode_param_;
}
inline ::bossopenolt::SetDirectionMode* paramFields::mutable_setdirectiommode_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setdirectiommode_param)
  return _internal_mutable_setdirectiommode_param();
}

// .bossopenolt.GetDirectionValue getdirectionvalue_param = 9;
inline bool paramFields::_internal_has_getdirectionvalue_param() const {
  return data_case() == kGetdirectionvalueParam;
}
inline bool paramFields::has_getdirectionvalue_param() const {
  return _internal_has_getdirectionvalue_param();
}
inline void paramFields::set_has_getdirectionvalue_param() {
  _oneof_case_[0] = kGetdirectionvalueParam;
}
inline void paramFields::clear_getdirectionvalue_param() {
  if (_internal_has_getdirectionvalue_param()) {
    if (GetArena() == nullptr) {
      delete data_.getdirectionvalue_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::GetDirectionValue* paramFields::release_getdirectionvalue_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.getdirectionvalue_param)
  if (_internal_has_getdirectionvalue_param()) {
    clear_has_data();
      ::bossopenolt::GetDirectionValue* temp = data_.getdirectionvalue_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.getdirectionvalue_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::GetDirectionValue& paramFields::_internal_getdirectionvalue_param() const {
  return _internal_has_getdirectionvalue_param()
      ? *data_.getdirectionvalue_param_
      : reinterpret_cast< ::bossopenolt::GetDirectionValue&>(::bossopenolt::_GetDirectionValue_default_instance_);
}
inline const ::bossopenolt::GetDirectionValue& paramFields::getdirectionvalue_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.getdirectionvalue_param)
  return _internal_getdirectionvalue_param();
}
inline ::bossopenolt::GetDirectionValue* paramFields::unsafe_arena_release_getdirectionvalue_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.getdirectionvalue_param)
  if (_internal_has_getdirectionvalue_param()) {
    clear_has_data();
    ::bossopenolt::GetDirectionValue* temp = data_.getdirectionvalue_param_;
    data_.getdirectionvalue_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_getdirectionvalue_param(::bossopenolt::GetDirectionValue* getdirectionvalue_param) {
  clear_data();
  if (getdirectionvalue_param) {
    set_has_getdirectionvalue_param();
    data_.getdirectionvalue_param_ = getdirectionvalue_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.getdirectionvalue_param)
}
inline ::bossopenolt::GetDirectionValue* paramFields::_internal_mutable_getdirectionvalue_param() {
  if (!_internal_has_getdirectionvalue_param()) {
    clear_data();
    set_has_getdirectionvalue_param();
    data_.getdirectionvalue_param_ = CreateMaybeMessage< ::bossopenolt::GetDirectionValue >(GetArena());
  }
  return data_.getdirectionvalue_param_;
}
inline ::bossopenolt::GetDirectionValue* paramFields::mutable_getdirectionvalue_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.getdirectionvalue_param)
  return _internal_mutable_getdirectionvalue_param();
}

// .bossopenolt.IntegerValue integervalue_param = 10;
inline bool paramFields::_internal_has_integervalue_param() const {
  return data_case() == kIntegervalueParam;
}
inline bool paramFields::has_integervalue_param() const {
  return _internal_has_integervalue_param();
}
inline void paramFields::set_has_integervalue_param() {
  _oneof_case_[0] = kIntegervalueParam;
}
inline void paramFields::clear_integervalue_param() {
  if (_internal_has_integervalue_param()) {
    if (GetArena() == nullptr) {
      delete data_.integervalue_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::IntegerValue* paramFields::release_integervalue_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.integervalue_param)
  if (_internal_has_integervalue_param()) {
    clear_has_data();
      ::bossopenolt::IntegerValue* temp = data_.integervalue_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.integervalue_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::IntegerValue& paramFields::_internal_integervalue_param() const {
  return _internal_has_integervalue_param()
      ? *data_.integervalue_param_
      : reinterpret_cast< ::bossopenolt::IntegerValue&>(::bossopenolt::_IntegerValue_default_instance_);
}
inline const ::bossopenolt::IntegerValue& paramFields::integervalue_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.integervalue_param)
  return _internal_integervalue_param();
}
inline ::bossopenolt::IntegerValue* paramFields::unsafe_arena_release_integervalue_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.integervalue_param)
  if (_internal_has_integervalue_param()) {
    clear_has_data();
    ::bossopenolt::IntegerValue* temp = data_.integervalue_param_;
    data_.integervalue_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_integervalue_param(::bossopenolt::IntegerValue* integervalue_param) {
  clear_data();
  if (integervalue_param) {
    set_has_integervalue_param();
    data_.integervalue_param_ = integervalue_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.integervalue_param)
}
inline ::bossopenolt::IntegerValue* paramFields::_internal_mutable_integervalue_param() {
  if (!_internal_has_integervalue_param()) {
    clear_data();
    set_has_integervalue_param();
    data_.integervalue_param_ = CreateMaybeMessage< ::bossopenolt::IntegerValue >(GetArena());
  }
  return data_.integervalue_param_;
}
inline ::bossopenolt::IntegerValue* paramFields::mutable_integervalue_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.integervalue_param)
  return _internal_mutable_integervalue_param();
}

// .bossopenolt.SetSdnTable setsdntable_param = 11;
inline bool paramFields::_internal_has_setsdntable_param() const {
  return data_case() == kSetsdntableParam;
}
inline bool paramFields::has_setsdntable_param() const {
  return _internal_has_setsdntable_param();
}
inline void paramFields::set_has_setsdntable_param() {
  _oneof_case_[0] = kSetsdntableParam;
}
inline void paramFields::clear_setsdntable_param() {
  if (_internal_has_setsdntable_param()) {
    if (GetArena() == nullptr) {
      delete data_.setsdntable_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetSdnTable* paramFields::release_setsdntable_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setsdntable_param)
  if (_internal_has_setsdntable_param()) {
    clear_has_data();
      ::bossopenolt::SetSdnTable* temp = data_.setsdntable_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setsdntable_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetSdnTable& paramFields::_internal_setsdntable_param() const {
  return _internal_has_setsdntable_param()
      ? *data_.setsdntable_param_
      : reinterpret_cast< ::bossopenolt::SetSdnTable&>(::bossopenolt::_SetSdnTable_default_instance_);
}
inline const ::bossopenolt::SetSdnTable& paramFields::setsdntable_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setsdntable_param)
  return _internal_setsdntable_param();
}
inline ::bossopenolt::SetSdnTable* paramFields::unsafe_arena_release_setsdntable_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setsdntable_param)
  if (_internal_has_setsdntable_param()) {
    clear_has_data();
    ::bossopenolt::SetSdnTable* temp = data_.setsdntable_param_;
    data_.setsdntable_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setsdntable_param(::bossopenolt::SetSdnTable* setsdntable_param) {
  clear_data();
  if (setsdntable_param) {
    set_has_setsdntable_param();
    data_.setsdntable_param_ = setsdntable_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setsdntable_param)
}
inline ::bossopenolt::SetSdnTable* paramFields::_internal_mutable_setsdntable_param() {
  if (!_internal_has_setsdntable_param()) {
    clear_data();
    set_has_setsdntable_param();
    data_.setsdntable_param_ = CreateMaybeMessage< ::bossopenolt::SetSdnTable >(GetArena());
  }
  return data_.setsdntable_param_;
}
inline ::bossopenolt::SetSdnTable* paramFields::mutable_setsdntable_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setsdntable_param)
  return _internal_mutable_setsdntable_param();
}

// .bossopenolt.GetSdnTable getsdntable_param = 12;
inline bool paramFields::_internal_has_getsdntable_param() const {
  return data_case() == kGetsdntableParam;
}
inline bool paramFields::has_getsdntable_param() const {
  return _internal_has_getsdntable_param();
}
inline void paramFields::set_has_getsdntable_param() {
  _oneof_case_[0] = kGetsdntableParam;
}
inline void paramFields::clear_getsdntable_param() {
  if (_internal_has_getsdntable_param()) {
    if (GetArena() == nullptr) {
      delete data_.getsdntable_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::GetSdnTable* paramFields::release_getsdntable_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.getsdntable_param)
  if (_internal_has_getsdntable_param()) {
    clear_has_data();
      ::bossopenolt::GetSdnTable* temp = data_.getsdntable_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.getsdntable_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::GetSdnTable& paramFields::_internal_getsdntable_param() const {
  return _internal_has_getsdntable_param()
      ? *data_.getsdntable_param_
      : reinterpret_cast< ::bossopenolt::GetSdnTable&>(::bossopenolt::_GetSdnTable_default_instance_);
}
inline const ::bossopenolt::GetSdnTable& paramFields::getsdntable_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.getsdntable_param)
  return _internal_getsdntable_param();
}
inline ::bossopenolt::GetSdnTable* paramFields::unsafe_arena_release_getsdntable_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.getsdntable_param)
  if (_internal_has_getsdntable_param()) {
    clear_has_data();
    ::bossopenolt::GetSdnTable* temp = data_.getsdntable_param_;
    data_.getsdntable_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_getsdntable_param(::bossopenolt::GetSdnTable* getsdntable_param) {
  clear_data();
  if (getsdntable_param) {
    set_has_getsdntable_param();
    data_.getsdntable_param_ = getsdntable_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.getsdntable_param)
}
inline ::bossopenolt::GetSdnTable* paramFields::_internal_mutable_getsdntable_param() {
  if (!_internal_has_getsdntable_param()) {
    clear_data();
    set_has_getsdntable_param();
    data_.getsdntable_param_ = CreateMaybeMessage< ::bossopenolt::GetSdnTable >(GetArena());
  }
  return data_.getsdntable_param_;
}
inline ::bossopenolt::GetSdnTable* paramFields::mutable_getsdntable_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.getsdntable_param)
  return _internal_mutable_getsdntable_param();
}

// .bossopenolt.SetLength setlength_param = 13;
inline bool paramFields::_internal_has_setlength_param() const {
  return data_case() == kSetlengthParam;
}
inline bool paramFields::has_setlength_param() const {
  return _internal_has_setlength_param();
}
inline void paramFields::set_has_setlength_param() {
  _oneof_case_[0] = kSetlengthParam;
}
inline void paramFields::clear_setlength_param() {
  if (_internal_has_setlength_param()) {
    if (GetArena() == nullptr) {
      delete data_.setlength_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetLength* paramFields::release_setlength_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setlength_param)
  if (_internal_has_setlength_param()) {
    clear_has_data();
      ::bossopenolt::SetLength* temp = data_.setlength_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setlength_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetLength& paramFields::_internal_setlength_param() const {
  return _internal_has_setlength_param()
      ? *data_.setlength_param_
      : reinterpret_cast< ::bossopenolt::SetLength&>(::bossopenolt::_SetLength_default_instance_);
}
inline const ::bossopenolt::SetLength& paramFields::setlength_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setlength_param)
  return _internal_setlength_param();
}
inline ::bossopenolt::SetLength* paramFields::unsafe_arena_release_setlength_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setlength_param)
  if (_internal_has_setlength_param()) {
    clear_has_data();
    ::bossopenolt::SetLength* temp = data_.setlength_param_;
    data_.setlength_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setlength_param(::bossopenolt::SetLength* setlength_param) {
  clear_data();
  if (setlength_param) {
    set_has_setlength_param();
    data_.setlength_param_ = setlength_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setlength_param)
}
inline ::bossopenolt::SetLength* paramFields::_internal_mutable_setlength_param() {
  if (!_internal_has_setlength_param()) {
    clear_data();
    set_has_setlength_param();
    data_.setlength_param_ = CreateMaybeMessage< ::bossopenolt::SetLength >(GetArena());
  }
  return data_.setlength_param_;
}
inline ::bossopenolt::SetLength* paramFields::mutable_setlength_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setlength_param)
  return _internal_mutable_setlength_param();
}

// .bossopenolt.GetLength getlength_param = 14;
inline bool paramFields::_internal_has_getlength_param() const {
  return data_case() == kGetlengthParam;
}
inline bool paramFields::has_getlength_param() const {
  return _internal_has_getlength_param();
}
inline void paramFields::set_has_getlength_param() {
  _oneof_case_[0] = kGetlengthParam;
}
inline void paramFields::clear_getlength_param() {
  if (_internal_has_getlength_param()) {
    if (GetArena() == nullptr) {
      delete data_.getlength_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::GetLength* paramFields::release_getlength_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.getlength_param)
  if (_internal_has_getlength_param()) {
    clear_has_data();
      ::bossopenolt::GetLength* temp = data_.getlength_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.getlength_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::GetLength& paramFields::_internal_getlength_param() const {
  return _internal_has_getlength_param()
      ? *data_.getlength_param_
      : reinterpret_cast< ::bossopenolt::GetLength&>(::bossopenolt::_GetLength_default_instance_);
}
inline const ::bossopenolt::GetLength& paramFields::getlength_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.getlength_param)
  return _internal_getlength_param();
}
inline ::bossopenolt::GetLength* paramFields::unsafe_arena_release_getlength_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.getlength_param)
  if (_internal_has_getlength_param()) {
    clear_has_data();
    ::bossopenolt::GetLength* temp = data_.getlength_param_;
    data_.getlength_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_getlength_param(::bossopenolt::GetLength* getlength_param) {
  clear_data();
  if (getlength_param) {
    set_has_getlength_param();
    data_.getlength_param_ = getlength_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.getlength_param)
}
inline ::bossopenolt::GetLength* paramFields::_internal_mutable_getlength_param() {
  if (!_internal_has_getlength_param()) {
    clear_data();
    set_has_getlength_param();
    data_.getlength_param_ = CreateMaybeMessage< ::bossopenolt::GetLength >(GetArena());
  }
  return data_.getlength_param_;
}
inline ::bossopenolt::GetLength* paramFields::mutable_getlength_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.getlength_param)
  return _internal_mutable_getlength_param();
}

// .bossopenolt.OnuCtrl onuctrl_param = 15;
inline bool paramFields::_internal_has_onuctrl_param() const {
  return data_case() == kOnuctrlParam;
}
inline bool paramFields::has_onuctrl_param() const {
  return _internal_has_onuctrl_param();
}
inline void paramFields::set_has_onuctrl_param() {
  _oneof_case_[0] = kOnuctrlParam;
}
inline void paramFields::clear_onuctrl_param() {
  if (_internal_has_onuctrl_param()) {
    if (GetArena() == nullptr) {
      delete data_.onuctrl_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::OnuCtrl* paramFields::release_onuctrl_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.onuctrl_param)
  if (_internal_has_onuctrl_param()) {
    clear_has_data();
      ::bossopenolt::OnuCtrl* temp = data_.onuctrl_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.onuctrl_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::OnuCtrl& paramFields::_internal_onuctrl_param() const {
  return _internal_has_onuctrl_param()
      ? *data_.onuctrl_param_
      : reinterpret_cast< ::bossopenolt::OnuCtrl&>(::bossopenolt::_OnuCtrl_default_instance_);
}
inline const ::bossopenolt::OnuCtrl& paramFields::onuctrl_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.onuctrl_param)
  return _internal_onuctrl_param();
}
inline ::bossopenolt::OnuCtrl* paramFields::unsafe_arena_release_onuctrl_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.onuctrl_param)
  if (_internal_has_onuctrl_param()) {
    clear_has_data();
    ::bossopenolt::OnuCtrl* temp = data_.onuctrl_param_;
    data_.onuctrl_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_onuctrl_param(::bossopenolt::OnuCtrl* onuctrl_param) {
  clear_data();
  if (onuctrl_param) {
    set_has_onuctrl_param();
    data_.onuctrl_param_ = onuctrl_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.onuctrl_param)
}
inline ::bossopenolt::OnuCtrl* paramFields::_internal_mutable_onuctrl_param() {
  if (!_internal_has_onuctrl_param()) {
    clear_data();
    set_has_onuctrl_param();
    data_.onuctrl_param_ = CreateMaybeMessage< ::bossopenolt::OnuCtrl >(GetArena());
  }
  return data_.onuctrl_param_;
}
inline ::bossopenolt::OnuCtrl* paramFields::mutable_onuctrl_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.onuctrl_param)
  return _internal_mutable_onuctrl_param();
}

// .bossopenolt.AddOnuSla addonusla_param = 16;
inline bool paramFields::_internal_has_addonusla_param() const {
  return data_case() == kAddonuslaParam;
}
inline bool paramFields::has_addonusla_param() const {
  return _internal_has_addonusla_param();
}
inline void paramFields::set_has_addonusla_param() {
  _oneof_case_[0] = kAddonuslaParam;
}
inline void paramFields::clear_addonusla_param() {
  if (_internal_has_addonusla_param()) {
    if (GetArena() == nullptr) {
      delete data_.addonusla_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::AddOnuSla* paramFields::release_addonusla_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.addonusla_param)
  if (_internal_has_addonusla_param()) {
    clear_has_data();
      ::bossopenolt::AddOnuSla* temp = data_.addonusla_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.addonusla_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::AddOnuSla& paramFields::_internal_addonusla_param() const {
  return _internal_has_addonusla_param()
      ? *data_.addonusla_param_
      : reinterpret_cast< ::bossopenolt::AddOnuSla&>(::bossopenolt::_AddOnuSla_default_instance_);
}
inline const ::bossopenolt::AddOnuSla& paramFields::addonusla_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.addonusla_param)
  return _internal_addonusla_param();
}
inline ::bossopenolt::AddOnuSla* paramFields::unsafe_arena_release_addonusla_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.addonusla_param)
  if (_internal_has_addonusla_param()) {
    clear_has_data();
    ::bossopenolt::AddOnuSla* temp = data_.addonusla_param_;
    data_.addonusla_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_addonusla_param(::bossopenolt::AddOnuSla* addonusla_param) {
  clear_data();
  if (addonusla_param) {
    set_has_addonusla_param();
    data_.addonusla_param_ = addonusla_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.addonusla_param)
}
inline ::bossopenolt::AddOnuSla* paramFields::_internal_mutable_addonusla_param() {
  if (!_internal_has_addonusla_param()) {
    clear_data();
    set_has_addonusla_param();
    data_.addonusla_param_ = CreateMaybeMessage< ::bossopenolt::AddOnuSla >(GetArena());
  }
  return data_.addonusla_param_;
}
inline ::bossopenolt::AddOnuSla* paramFields::mutable_addonusla_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.addonusla_param)
  return _internal_mutable_addonusla_param();
}

// .bossopenolt.ClearOnuSla clearonusla_param = 17;
inline bool paramFields::_internal_has_clearonusla_param() const {
  return data_case() == kClearonuslaParam;
}
inline bool paramFields::has_clearonusla_param() const {
  return _internal_has_clearonusla_param();
}
inline void paramFields::set_has_clearonusla_param() {
  _oneof_case_[0] = kClearonuslaParam;
}
inline void paramFields::clear_clearonusla_param() {
  if (_internal_has_clearonusla_param()) {
    if (GetArena() == nullptr) {
      delete data_.clearonusla_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::ClearOnuSla* paramFields::release_clearonusla_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.clearonusla_param)
  if (_internal_has_clearonusla_param()) {
    clear_has_data();
      ::bossopenolt::ClearOnuSla* temp = data_.clearonusla_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.clearonusla_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::ClearOnuSla& paramFields::_internal_clearonusla_param() const {
  return _internal_has_clearonusla_param()
      ? *data_.clearonusla_param_
      : reinterpret_cast< ::bossopenolt::ClearOnuSla&>(::bossopenolt::_ClearOnuSla_default_instance_);
}
inline const ::bossopenolt::ClearOnuSla& paramFields::clearonusla_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.clearonusla_param)
  return _internal_clearonusla_param();
}
inline ::bossopenolt::ClearOnuSla* paramFields::unsafe_arena_release_clearonusla_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.clearonusla_param)
  if (_internal_has_clearonusla_param()) {
    clear_has_data();
    ::bossopenolt::ClearOnuSla* temp = data_.clearonusla_param_;
    data_.clearonusla_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_clearonusla_param(::bossopenolt::ClearOnuSla* clearonusla_param) {
  clear_data();
  if (clearonusla_param) {
    set_has_clearonusla_param();
    data_.clearonusla_param_ = clearonusla_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.clearonusla_param)
}
inline ::bossopenolt::ClearOnuSla* paramFields::_internal_mutable_clearonusla_param() {
  if (!_internal_has_clearonusla_param()) {
    clear_data();
    set_has_clearonusla_param();
    data_.clearonusla_param_ = CreateMaybeMessage< ::bossopenolt::ClearOnuSla >(GetArena());
  }
  return data_.clearonusla_param_;
}
inline ::bossopenolt::ClearOnuSla* paramFields::mutable_clearonusla_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.clearonusla_param)
  return _internal_mutable_clearonusla_param();
}

// .bossopenolt.SetOnuAllocid setonuallocid_param = 18;
inline bool paramFields::_internal_has_setonuallocid_param() const {
  return data_case() == kSetonuallocidParam;
}
inline bool paramFields::has_setonuallocid_param() const {
  return _internal_has_setonuallocid_param();
}
inline void paramFields::set_has_setonuallocid_param() {
  _oneof_case_[0] = kSetonuallocidParam;
}
inline void paramFields::clear_setonuallocid_param() {
  if (_internal_has_setonuallocid_param()) {
    if (GetArena() == nullptr) {
      delete data_.setonuallocid_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetOnuAllocid* paramFields::release_setonuallocid_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setonuallocid_param)
  if (_internal_has_setonuallocid_param()) {
    clear_has_data();
      ::bossopenolt::SetOnuAllocid* temp = data_.setonuallocid_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setonuallocid_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetOnuAllocid& paramFields::_internal_setonuallocid_param() const {
  return _internal_has_setonuallocid_param()
      ? *data_.setonuallocid_param_
      : reinterpret_cast< ::bossopenolt::SetOnuAllocid&>(::bossopenolt::_SetOnuAllocid_default_instance_);
}
inline const ::bossopenolt::SetOnuAllocid& paramFields::setonuallocid_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setonuallocid_param)
  return _internal_setonuallocid_param();
}
inline ::bossopenolt::SetOnuAllocid* paramFields::unsafe_arena_release_setonuallocid_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setonuallocid_param)
  if (_internal_has_setonuallocid_param()) {
    clear_has_data();
    ::bossopenolt::SetOnuAllocid* temp = data_.setonuallocid_param_;
    data_.setonuallocid_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setonuallocid_param(::bossopenolt::SetOnuAllocid* setonuallocid_param) {
  clear_data();
  if (setonuallocid_param) {
    set_has_setonuallocid_param();
    data_.setonuallocid_param_ = setonuallocid_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setonuallocid_param)
}
inline ::bossopenolt::SetOnuAllocid* paramFields::_internal_mutable_setonuallocid_param() {
  if (!_internal_has_setonuallocid_param()) {
    clear_data();
    set_has_setonuallocid_param();
    data_.setonuallocid_param_ = CreateMaybeMessage< ::bossopenolt::SetOnuAllocid >(GetArena());
  }
  return data_.setonuallocid_param_;
}
inline ::bossopenolt::SetOnuAllocid* paramFields::mutable_setonuallocid_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setonuallocid_param)
  return _internal_mutable_setonuallocid_param();
}

// .bossopenolt.SetOnuVssn setonuvssn_param = 19;
inline bool paramFields::_internal_has_setonuvssn_param() const {
  return data_case() == kSetonuvssnParam;
}
inline bool paramFields::has_setonuvssn_param() const {
  return _internal_has_setonuvssn_param();
}
inline void paramFields::set_has_setonuvssn_param() {
  _oneof_case_[0] = kSetonuvssnParam;
}
inline void paramFields::clear_setonuvssn_param() {
  if (_internal_has_setonuvssn_param()) {
    if (GetArena() == nullptr) {
      delete data_.setonuvssn_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetOnuVssn* paramFields::release_setonuvssn_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setonuvssn_param)
  if (_internal_has_setonuvssn_param()) {
    clear_has_data();
      ::bossopenolt::SetOnuVssn* temp = data_.setonuvssn_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setonuvssn_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetOnuVssn& paramFields::_internal_setonuvssn_param() const {
  return _internal_has_setonuvssn_param()
      ? *data_.setonuvssn_param_
      : reinterpret_cast< ::bossopenolt::SetOnuVssn&>(::bossopenolt::_SetOnuVssn_default_instance_);
}
inline const ::bossopenolt::SetOnuVssn& paramFields::setonuvssn_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setonuvssn_param)
  return _internal_setonuvssn_param();
}
inline ::bossopenolt::SetOnuVssn* paramFields::unsafe_arena_release_setonuvssn_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setonuvssn_param)
  if (_internal_has_setonuvssn_param()) {
    clear_has_data();
    ::bossopenolt::SetOnuVssn* temp = data_.setonuvssn_param_;
    data_.setonuvssn_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setonuvssn_param(::bossopenolt::SetOnuVssn* setonuvssn_param) {
  clear_data();
  if (setonuvssn_param) {
    set_has_setonuvssn_param();
    data_.setonuvssn_param_ = setonuvssn_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setonuvssn_param)
}
inline ::bossopenolt::SetOnuVssn* paramFields::_internal_mutable_setonuvssn_param() {
  if (!_internal_has_setonuvssn_param()) {
    clear_data();
    set_has_setonuvssn_param();
    data_.setonuvssn_param_ = CreateMaybeMessage< ::bossopenolt::SetOnuVssn >(GetArena());
  }
  return data_.setonuvssn_param_;
}
inline ::bossopenolt::SetOnuVssn* paramFields::mutable_setonuvssn_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setonuvssn_param)
  return _internal_mutable_setonuvssn_param();
}

// .bossopenolt.SetBurstDelimit setburstdelimit_param = 20;
inline bool paramFields::_internal_has_setburstdelimit_param() const {
  return data_case() == kSetburstdelimitParam;
}
inline bool paramFields::has_setburstdelimit_param() const {
  return _internal_has_setburstdelimit_param();
}
inline void paramFields::set_has_setburstdelimit_param() {
  _oneof_case_[0] = kSetburstdelimitParam;
}
inline void paramFields::clear_setburstdelimit_param() {
  if (_internal_has_setburstdelimit_param()) {
    if (GetArena() == nullptr) {
      delete data_.setburstdelimit_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetBurstDelimit* paramFields::release_setburstdelimit_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setburstdelimit_param)
  if (_internal_has_setburstdelimit_param()) {
    clear_has_data();
      ::bossopenolt::SetBurstDelimit* temp = data_.setburstdelimit_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setburstdelimit_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetBurstDelimit& paramFields::_internal_setburstdelimit_param() const {
  return _internal_has_setburstdelimit_param()
      ? *data_.setburstdelimit_param_
      : reinterpret_cast< ::bossopenolt::SetBurstDelimit&>(::bossopenolt::_SetBurstDelimit_default_instance_);
}
inline const ::bossopenolt::SetBurstDelimit& paramFields::setburstdelimit_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setburstdelimit_param)
  return _internal_setburstdelimit_param();
}
inline ::bossopenolt::SetBurstDelimit* paramFields::unsafe_arena_release_setburstdelimit_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setburstdelimit_param)
  if (_internal_has_setburstdelimit_param()) {
    clear_has_data();
    ::bossopenolt::SetBurstDelimit* temp = data_.setburstdelimit_param_;
    data_.setburstdelimit_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setburstdelimit_param(::bossopenolt::SetBurstDelimit* setburstdelimit_param) {
  clear_data();
  if (setburstdelimit_param) {
    set_has_setburstdelimit_param();
    data_.setburstdelimit_param_ = setburstdelimit_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setburstdelimit_param)
}
inline ::bossopenolt::SetBurstDelimit* paramFields::_internal_mutable_setburstdelimit_param() {
  if (!_internal_has_setburstdelimit_param()) {
    clear_data();
    set_has_setburstdelimit_param();
    data_.setburstdelimit_param_ = CreateMaybeMessage< ::bossopenolt::SetBurstDelimit >(GetArena());
  }
  return data_.setburstdelimit_param_;
}
inline ::bossopenolt::SetBurstDelimit* paramFields::mutable_setburstdelimit_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setburstdelimit_param)
  return _internal_mutable_setburstdelimit_param();
}

// .bossopenolt.SetBurstPreamble setburstpreamble_param = 21;
inline bool paramFields::_internal_has_setburstpreamble_param() const {
  return data_case() == kSetburstpreambleParam;
}
inline bool paramFields::has_setburstpreamble_param() const {
  return _internal_has_setburstpreamble_param();
}
inline void paramFields::set_has_setburstpreamble_param() {
  _oneof_case_[0] = kSetburstpreambleParam;
}
inline void paramFields::clear_setburstpreamble_param() {
  if (_internal_has_setburstpreamble_param()) {
    if (GetArena() == nullptr) {
      delete data_.setburstpreamble_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetBurstPreamble* paramFields::release_setburstpreamble_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setburstpreamble_param)
  if (_internal_has_setburstpreamble_param()) {
    clear_has_data();
      ::bossopenolt::SetBurstPreamble* temp = data_.setburstpreamble_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setburstpreamble_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetBurstPreamble& paramFields::_internal_setburstpreamble_param() const {
  return _internal_has_setburstpreamble_param()
      ? *data_.setburstpreamble_param_
      : reinterpret_cast< ::bossopenolt::SetBurstPreamble&>(::bossopenolt::_SetBurstPreamble_default_instance_);
}
inline const ::bossopenolt::SetBurstPreamble& paramFields::setburstpreamble_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setburstpreamble_param)
  return _internal_setburstpreamble_param();
}
inline ::bossopenolt::SetBurstPreamble* paramFields::unsafe_arena_release_setburstpreamble_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setburstpreamble_param)
  if (_internal_has_setburstpreamble_param()) {
    clear_has_data();
    ::bossopenolt::SetBurstPreamble* temp = data_.setburstpreamble_param_;
    data_.setburstpreamble_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setburstpreamble_param(::bossopenolt::SetBurstPreamble* setburstpreamble_param) {
  clear_data();
  if (setburstpreamble_param) {
    set_has_setburstpreamble_param();
    data_.setburstpreamble_param_ = setburstpreamble_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setburstpreamble_param)
}
inline ::bossopenolt::SetBurstPreamble* paramFields::_internal_mutable_setburstpreamble_param() {
  if (!_internal_has_setburstpreamble_param()) {
    clear_data();
    set_has_setburstpreamble_param();
    data_.setburstpreamble_param_ = CreateMaybeMessage< ::bossopenolt::SetBurstPreamble >(GetArena());
  }
  return data_.setburstpreamble_param_;
}
inline ::bossopenolt::SetBurstPreamble* paramFields::mutable_setburstpreamble_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setburstpreamble_param)
  return _internal_mutable_setburstpreamble_param();
}

// .bossopenolt.SetBurstVersion setburstversion_param = 22;
inline bool paramFields::_internal_has_setburstversion_param() const {
  return data_case() == kSetburstversionParam;
}
inline bool paramFields::has_setburstversion_param() const {
  return _internal_has_setburstversion_param();
}
inline void paramFields::set_has_setburstversion_param() {
  _oneof_case_[0] = kSetburstversionParam;
}
inline void paramFields::clear_setburstversion_param() {
  if (_internal_has_setburstversion_param()) {
    if (GetArena() == nullptr) {
      delete data_.setburstversion_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetBurstVersion* paramFields::release_setburstversion_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setburstversion_param)
  if (_internal_has_setburstversion_param()) {
    clear_has_data();
      ::bossopenolt::SetBurstVersion* temp = data_.setburstversion_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setburstversion_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetBurstVersion& paramFields::_internal_setburstversion_param() const {
  return _internal_has_setburstversion_param()
      ? *data_.setburstversion_param_
      : reinterpret_cast< ::bossopenolt::SetBurstVersion&>(::bossopenolt::_SetBurstVersion_default_instance_);
}
inline const ::bossopenolt::SetBurstVersion& paramFields::setburstversion_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setburstversion_param)
  return _internal_setburstversion_param();
}
inline ::bossopenolt::SetBurstVersion* paramFields::unsafe_arena_release_setburstversion_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setburstversion_param)
  if (_internal_has_setburstversion_param()) {
    clear_has_data();
    ::bossopenolt::SetBurstVersion* temp = data_.setburstversion_param_;
    data_.setburstversion_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setburstversion_param(::bossopenolt::SetBurstVersion* setburstversion_param) {
  clear_data();
  if (setburstversion_param) {
    set_has_setburstversion_param();
    data_.setburstversion_param_ = setburstversion_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setburstversion_param)
}
inline ::bossopenolt::SetBurstVersion* paramFields::_internal_mutable_setburstversion_param() {
  if (!_internal_has_setburstversion_param()) {
    clear_data();
    set_has_setburstversion_param();
    data_.setburstversion_param_ = CreateMaybeMessage< ::bossopenolt::SetBurstVersion >(GetArena());
  }
  return data_.setburstversion_param_;
}
inline ::bossopenolt::SetBurstVersion* paramFields::mutable_setburstversion_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setburstversion_param)
  return _internal_mutable_setburstversion_param();
}

// .bossopenolt.SetDsOmciData setdsomcidata_param = 23;
inline bool paramFields::_internal_has_setdsomcidata_param() const {
  return data_case() == kSetdsomcidataParam;
}
inline bool paramFields::has_setdsomcidata_param() const {
  return _internal_has_setdsomcidata_param();
}
inline void paramFields::set_has_setdsomcidata_param() {
  _oneof_case_[0] = kSetdsomcidataParam;
}
inline void paramFields::clear_setdsomcidata_param() {
  if (_internal_has_setdsomcidata_param()) {
    if (GetArena() == nullptr) {
      delete data_.setdsomcidata_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetDsOmciData* paramFields::release_setdsomcidata_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setdsomcidata_param)
  if (_internal_has_setdsomcidata_param()) {
    clear_has_data();
      ::bossopenolt::SetDsOmciData* temp = data_.setdsomcidata_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setdsomcidata_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetDsOmciData& paramFields::_internal_setdsomcidata_param() const {
  return _internal_has_setdsomcidata_param()
      ? *data_.setdsomcidata_param_
      : reinterpret_cast< ::bossopenolt::SetDsOmciData&>(::bossopenolt::_SetDsOmciData_default_instance_);
}
inline const ::bossopenolt::SetDsOmciData& paramFields::setdsomcidata_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setdsomcidata_param)
  return _internal_setdsomcidata_param();
}
inline ::bossopenolt::SetDsOmciData* paramFields::unsafe_arena_release_setdsomcidata_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setdsomcidata_param)
  if (_internal_has_setdsomcidata_param()) {
    clear_has_data();
    ::bossopenolt::SetDsOmciData* temp = data_.setdsomcidata_param_;
    data_.setdsomcidata_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setdsomcidata_param(::bossopenolt::SetDsOmciData* setdsomcidata_param) {
  clear_data();
  if (setdsomcidata_param) {
    set_has_setdsomcidata_param();
    data_.setdsomcidata_param_ = setdsomcidata_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setdsomcidata_param)
}
inline ::bossopenolt::SetDsOmciData* paramFields::_internal_mutable_setdsomcidata_param() {
  if (!_internal_has_setdsomcidata_param()) {
    clear_data();
    set_has_setdsomcidata_param();
    data_.setdsomcidata_param_ = CreateMaybeMessage< ::bossopenolt::SetDsOmciData >(GetArena());
  }
  return data_.setdsomcidata_param_;
}
inline ::bossopenolt::SetDsOmciData* paramFields::mutable_setdsomcidata_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setdsomcidata_param)
  return _internal_mutable_setdsomcidata_param();
}

// .bossopenolt.SetTod settod_param = 24;
inline bool paramFields::_internal_has_settod_param() const {
  return data_case() == kSettodParam;
}
inline bool paramFields::has_settod_param() const {
  return _internal_has_settod_param();
}
inline void paramFields::set_has_settod_param() {
  _oneof_case_[0] = kSettodParam;
}
inline void paramFields::clear_settod_param() {
  if (_internal_has_settod_param()) {
    if (GetArena() == nullptr) {
      delete data_.settod_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetTod* paramFields::release_settod_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.settod_param)
  if (_internal_has_settod_param()) {
    clear_has_data();
      ::bossopenolt::SetTod* temp = data_.settod_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.settod_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetTod& paramFields::_internal_settod_param() const {
  return _internal_has_settod_param()
      ? *data_.settod_param_
      : reinterpret_cast< ::bossopenolt::SetTod&>(::bossopenolt::_SetTod_default_instance_);
}
inline const ::bossopenolt::SetTod& paramFields::settod_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.settod_param)
  return _internal_settod_param();
}
inline ::bossopenolt::SetTod* paramFields::unsafe_arena_release_settod_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.settod_param)
  if (_internal_has_settod_param()) {
    clear_has_data();
    ::bossopenolt::SetTod* temp = data_.settod_param_;
    data_.settod_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_settod_param(::bossopenolt::SetTod* settod_param) {
  clear_data();
  if (settod_param) {
    set_has_settod_param();
    data_.settod_param_ = settod_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.settod_param)
}
inline ::bossopenolt::SetTod* paramFields::_internal_mutable_settod_param() {
  if (!_internal_has_settod_param()) {
    clear_data();
    set_has_settod_param();
    data_.settod_param_ = CreateMaybeMessage< ::bossopenolt::SetTod >(GetArena());
  }
  return data_.settod_param_;
}
inline ::bossopenolt::SetTod* paramFields::mutable_settod_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.settod_param)
  return _internal_mutable_settod_param();
}

// .bossopenolt.StringValue stringvalue_param = 25;
inline bool paramFields::_internal_has_stringvalue_param() const {
  return data_case() == kStringvalueParam;
}
inline bool paramFields::has_stringvalue_param() const {
  return _internal_has_stringvalue_param();
}
inline void paramFields::set_has_stringvalue_param() {
  _oneof_case_[0] = kStringvalueParam;
}
inline void paramFields::clear_stringvalue_param() {
  if (_internal_has_stringvalue_param()) {
    if (GetArena() == nullptr) {
      delete data_.stringvalue_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::StringValue* paramFields::release_stringvalue_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.stringvalue_param)
  if (_internal_has_stringvalue_param()) {
    clear_has_data();
      ::bossopenolt::StringValue* temp = data_.stringvalue_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.stringvalue_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::StringValue& paramFields::_internal_stringvalue_param() const {
  return _internal_has_stringvalue_param()
      ? *data_.stringvalue_param_
      : reinterpret_cast< ::bossopenolt::StringValue&>(::bossopenolt::_StringValue_default_instance_);
}
inline const ::bossopenolt::StringValue& paramFields::stringvalue_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.stringvalue_param)
  return _internal_stringvalue_param();
}
inline ::bossopenolt::StringValue* paramFields::unsafe_arena_release_stringvalue_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.stringvalue_param)
  if (_internal_has_stringvalue_param()) {
    clear_has_data();
    ::bossopenolt::StringValue* temp = data_.stringvalue_param_;
    data_.stringvalue_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_stringvalue_param(::bossopenolt::StringValue* stringvalue_param) {
  clear_data();
  if (stringvalue_param) {
    set_has_stringvalue_param();
    data_.stringvalue_param_ = stringvalue_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.stringvalue_param)
}
inline ::bossopenolt::StringValue* paramFields::_internal_mutable_stringvalue_param() {
  if (!_internal_has_stringvalue_param()) {
    clear_data();
    set_has_stringvalue_param();
    data_.stringvalue_param_ = CreateMaybeMessage< ::bossopenolt::StringValue >(GetArena());
  }
  return data_.stringvalue_param_;
}
inline ::bossopenolt::StringValue* paramFields::mutable_stringvalue_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.stringvalue_param)
  return _internal_mutable_stringvalue_param();
}

// .bossopenolt.SetPmControl setpmcontrol_param = 26;
inline bool paramFields::_internal_has_setpmcontrol_param() const {
  return data_case() == kSetpmcontrolParam;
}
inline bool paramFields::has_setpmcontrol_param() const {
  return _internal_has_setpmcontrol_param();
}
inline void paramFields::set_has_setpmcontrol_param() {
  _oneof_case_[0] = kSetpmcontrolParam;
}
inline void paramFields::clear_setpmcontrol_param() {
  if (_internal_has_setpmcontrol_param()) {
    if (GetArena() == nullptr) {
      delete data_.setpmcontrol_param_;
    }
    clear_has_data();
  }
}
inline ::bossopenolt::SetPmControl* paramFields::release_setpmcontrol_param() {
  // @@protoc_insertion_point(field_release:bossopenolt.paramFields.setpmcontrol_param)
  if (_internal_has_setpmcontrol_param()) {
    clear_has_data();
      ::bossopenolt::SetPmControl* temp = data_.setpmcontrol_param_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.setpmcontrol_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bossopenolt::SetPmControl& paramFields::_internal_setpmcontrol_param() const {
  return _internal_has_setpmcontrol_param()
      ? *data_.setpmcontrol_param_
      : reinterpret_cast< ::bossopenolt::SetPmControl&>(::bossopenolt::_SetPmControl_default_instance_);
}
inline const ::bossopenolt::SetPmControl& paramFields::setpmcontrol_param() const {
  // @@protoc_insertion_point(field_get:bossopenolt.paramFields.setpmcontrol_param)
  return _internal_setpmcontrol_param();
}
inline ::bossopenolt::SetPmControl* paramFields::unsafe_arena_release_setpmcontrol_param() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bossopenolt.paramFields.setpmcontrol_param)
  if (_internal_has_setpmcontrol_param()) {
    clear_has_data();
    ::bossopenolt::SetPmControl* temp = data_.setpmcontrol_param_;
    data_.setpmcontrol_param_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void paramFields::unsafe_arena_set_allocated_setpmcontrol_param(::bossopenolt::SetPmControl* setpmcontrol_param) {
  clear_data();
  if (setpmcontrol_param) {
    set_has_setpmcontrol_param();
    data_.setpmcontrol_param_ = setpmcontrol_param;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bossopenolt.paramFields.setpmcontrol_param)
}
inline ::bossopenolt::SetPmControl* paramFields::_internal_mutable_setpmcontrol_param() {
  if (!_internal_has_setpmcontrol_param()) {
    clear_data();
    set_has_setpmcontrol_param();
    data_.setpmcontrol_param_ = CreateMaybeMessage< ::bossopenolt::SetPmControl >(GetArena());
  }
  return data_.setpmcontrol_param_;
}
inline ::bossopenolt::SetPmControl* paramFields::mutable_setpmcontrol_param() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.paramFields.setpmcontrol_param)
  return _internal_mutable_setpmcontrol_param();
}

inline bool paramFields::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void paramFields::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline paramFields::DataCase paramFields::data_case() const {
  return paramFields::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetPmControl

// int32 onu_id = 1;
inline void SetPmControl::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmControl.onu_id)
  return _internal_onu_id();
}
inline void SetPmControl::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void SetPmControl::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmControl.onu_id)
}

// int32 mode = 2;
inline void SetPmControl::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmControl.mode)
  return _internal_mode();
}
inline void SetPmControl::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SetPmControl::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmControl.mode)
}

// int32 power_time = 3;
inline void SetPmControl::clear_power_time() {
  power_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::_internal_power_time() const {
  return power_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::power_time() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmControl.power_time)
  return _internal_power_time();
}
inline void SetPmControl::_internal_set_power_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  power_time_ = value;
}
inline void SetPmControl::set_power_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_power_time(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmControl.power_time)
}

// int32 aware_time = 4;
inline void SetPmControl::clear_aware_time() {
  aware_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::_internal_aware_time() const {
  return aware_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmControl::aware_time() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmControl.aware_time)
  return _internal_aware_time();
}
inline void SetPmControl::_internal_set_aware_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aware_time_ = value;
}
inline void SetPmControl::set_aware_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aware_time(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmControl.aware_time)
}

// -------------------------------------------------------------------

// SetTod

// int32 mode = 1;
inline void SetTod::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetTod::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetTod::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetTod.mode)
  return _internal_mode();
}
inline void SetTod::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SetTod::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetTod.mode)
}

// int32 time = 2;
inline void SetTod::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetTod::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetTod::time() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetTod.time)
  return _internal_time();
}
inline void SetTod::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void SetTod::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetTod.time)
}

// -------------------------------------------------------------------

// SetDsOmciData

// int32 control = 1;
inline void SetDsOmciData::clear_control() {
  control_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDsOmciData::_internal_control() const {
  return control_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDsOmciData::control() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetDsOmciData.control)
  return _internal_control();
}
inline void SetDsOmciData::_internal_set_control(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  control_ = value;
}
inline void SetDsOmciData::set_control(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_control(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetDsOmciData.control)
}

// string data = 2;
inline void SetDsOmciData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& SetDsOmciData::data() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetDsOmciData.data)
  return _internal_data();
}
inline void SetDsOmciData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetDsOmciData.data)
}
inline std::string* SetDsOmciData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetDsOmciData.data)
  return _internal_mutable_data();
}
inline const std::string& SetDsOmciData::_internal_data() const {
  return data_.Get();
}
inline void SetDsOmciData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetDsOmciData::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetDsOmciData.data)
}
inline void SetDsOmciData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetDsOmciData.data)
}
inline void SetDsOmciData::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetDsOmciData.data)
}
inline std::string* SetDsOmciData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetDsOmciData::release_data() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetDsOmciData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetDsOmciData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetDsOmciData.data)
}

// -------------------------------------------------------------------

// SetBurstVersion

// string version = 1;
inline void SetBurstVersion::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SetBurstVersion::version() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetBurstVersion.version)
  return _internal_version();
}
inline void SetBurstVersion::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetBurstVersion.version)
}
inline std::string* SetBurstVersion::mutable_version() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetBurstVersion.version)
  return _internal_mutable_version();
}
inline const std::string& SetBurstVersion::_internal_version() const {
  return version_.Get();
}
inline void SetBurstVersion::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBurstVersion::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetBurstVersion.version)
}
inline void SetBurstVersion::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetBurstVersion.version)
}
inline void SetBurstVersion::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetBurstVersion.version)
}
inline std::string* SetBurstVersion::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBurstVersion::release_version() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetBurstVersion.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBurstVersion::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetBurstVersion.version)
}

// int32 index = 2;
inline void SetBurstVersion::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBurstVersion::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBurstVersion::index() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetBurstVersion.index)
  return _internal_index();
}
inline void SetBurstVersion::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SetBurstVersion::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetBurstVersion.index)
}

// string pontag = 3;
inline void SetBurstVersion::clear_pontag() {
  pontag_.ClearToEmpty();
}
inline const std::string& SetBurstVersion::pontag() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetBurstVersion.pontag)
  return _internal_pontag();
}
inline void SetBurstVersion::set_pontag(const std::string& value) {
  _internal_set_pontag(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetBurstVersion.pontag)
}
inline std::string* SetBurstVersion::mutable_pontag() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetBurstVersion.pontag)
  return _internal_mutable_pontag();
}
inline const std::string& SetBurstVersion::_internal_pontag() const {
  return pontag_.Get();
}
inline void SetBurstVersion::_internal_set_pontag(const std::string& value) {
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBurstVersion::set_pontag(std::string&& value) {
  
  pontag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetBurstVersion.pontag)
}
inline void SetBurstVersion::set_pontag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetBurstVersion.pontag)
}
inline void SetBurstVersion::set_pontag(const char* value,
    size_t size) {
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetBurstVersion.pontag)
}
inline std::string* SetBurstVersion::_internal_mutable_pontag() {
  
  return pontag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBurstVersion::release_pontag() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetBurstVersion.pontag)
  return pontag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBurstVersion::set_allocated_pontag(std::string* pontag) {
  if (pontag != nullptr) {
    
  } else {
    
  }
  pontag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pontag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetBurstVersion.pontag)
}

// -------------------------------------------------------------------

// SetBurstPreamble

// string repeat = 1;
inline void SetBurstPreamble::clear_repeat() {
  repeat_.ClearToEmpty();
}
inline const std::string& SetBurstPreamble::repeat() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetBurstPreamble.repeat)
  return _internal_repeat();
}
inline void SetBurstPreamble::set_repeat(const std::string& value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetBurstPreamble.repeat)
}
inline std::string* SetBurstPreamble::mutable_repeat() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetBurstPreamble.repeat)
  return _internal_mutable_repeat();
}
inline const std::string& SetBurstPreamble::_internal_repeat() const {
  return repeat_.Get();
}
inline void SetBurstPreamble::_internal_set_repeat(const std::string& value) {
  
  repeat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBurstPreamble::set_repeat(std::string&& value) {
  
  repeat_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetBurstPreamble.repeat)
}
inline void SetBurstPreamble::set_repeat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repeat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetBurstPreamble.repeat)
}
inline void SetBurstPreamble::set_repeat(const char* value,
    size_t size) {
  
  repeat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetBurstPreamble.repeat)
}
inline std::string* SetBurstPreamble::_internal_mutable_repeat() {
  
  return repeat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBurstPreamble::release_repeat() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetBurstPreamble.repeat)
  return repeat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBurstPreamble::set_allocated_repeat(std::string* repeat) {
  if (repeat != nullptr) {
    
  } else {
    
  }
  repeat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repeat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetBurstPreamble.repeat)
}

// -------------------------------------------------------------------

// SetBurstDelimit

// int32 length = 1;
inline void SetBurstDelimit::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBurstDelimit::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetBurstDelimit::length() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetBurstDelimit.length)
  return _internal_length();
}
inline void SetBurstDelimit::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void SetBurstDelimit::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetBurstDelimit.length)
}

// string delimiter = 2;
inline void SetBurstDelimit::clear_delimiter() {
  delimiter_.ClearToEmpty();
}
inline const std::string& SetBurstDelimit::delimiter() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetBurstDelimit.delimiter)
  return _internal_delimiter();
}
inline void SetBurstDelimit::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetBurstDelimit.delimiter)
}
inline std::string* SetBurstDelimit::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetBurstDelimit.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& SetBurstDelimit::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void SetBurstDelimit::_internal_set_delimiter(const std::string& value) {
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetBurstDelimit::set_delimiter(std::string&& value) {
  
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetBurstDelimit.delimiter)
}
inline void SetBurstDelimit::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetBurstDelimit.delimiter)
}
inline void SetBurstDelimit::set_delimiter(const char* value,
    size_t size) {
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetBurstDelimit.delimiter)
}
inline std::string* SetBurstDelimit::_internal_mutable_delimiter() {
  
  return delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetBurstDelimit::release_delimiter() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetBurstDelimit.delimiter)
  return delimiter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetBurstDelimit::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    
  } else {
    
  }
  delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetBurstDelimit.delimiter)
}

// -------------------------------------------------------------------

// SetOnuVssn

// int32 onu_id = 1;
inline void SetOnuVssn::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetOnuVssn::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetOnuVssn::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetOnuVssn.onu_id)
  return _internal_onu_id();
}
inline void SetOnuVssn::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void SetOnuVssn::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetOnuVssn.onu_id)
}

// string vssn = 2;
inline void SetOnuVssn::clear_vssn() {
  vssn_.ClearToEmpty();
}
inline const std::string& SetOnuVssn::vssn() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetOnuVssn.vssn)
  return _internal_vssn();
}
inline void SetOnuVssn::set_vssn(const std::string& value) {
  _internal_set_vssn(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetOnuVssn.vssn)
}
inline std::string* SetOnuVssn::mutable_vssn() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetOnuVssn.vssn)
  return _internal_mutable_vssn();
}
inline const std::string& SetOnuVssn::_internal_vssn() const {
  return vssn_.Get();
}
inline void SetOnuVssn::_internal_set_vssn(const std::string& value) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetOnuVssn::set_vssn(std::string&& value) {
  
  vssn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetOnuVssn.vssn)
}
inline void SetOnuVssn::set_vssn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetOnuVssn.vssn)
}
inline void SetOnuVssn::set_vssn(const char* value,
    size_t size) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetOnuVssn.vssn)
}
inline std::string* SetOnuVssn::_internal_mutable_vssn() {
  
  return vssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetOnuVssn::release_vssn() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetOnuVssn.vssn)
  return vssn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetOnuVssn::set_allocated_vssn(std::string* vssn) {
  if (vssn != nullptr) {
    
  } else {
    
  }
  vssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vssn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetOnuVssn.vssn)
}

// -------------------------------------------------------------------

// SetOnuAllocid

// int32 onu_id = 1;
inline void SetOnuAllocid::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetOnuAllocid::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetOnuAllocid::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetOnuAllocid.onu_id)
  return _internal_onu_id();
}
inline void SetOnuAllocid::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void SetOnuAllocid::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetOnuAllocid.onu_id)
}

// string alloc_id = 2;
inline void SetOnuAllocid::clear_alloc_id() {
  alloc_id_.ClearToEmpty();
}
inline const std::string& SetOnuAllocid::alloc_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetOnuAllocid.alloc_id)
  return _internal_alloc_id();
}
inline void SetOnuAllocid::set_alloc_id(const std::string& value) {
  _internal_set_alloc_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetOnuAllocid.alloc_id)
}
inline std::string* SetOnuAllocid::mutable_alloc_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetOnuAllocid.alloc_id)
  return _internal_mutable_alloc_id();
}
inline const std::string& SetOnuAllocid::_internal_alloc_id() const {
  return alloc_id_.Get();
}
inline void SetOnuAllocid::_internal_set_alloc_id(const std::string& value) {
  
  alloc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetOnuAllocid::set_alloc_id(std::string&& value) {
  
  alloc_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetOnuAllocid.alloc_id)
}
inline void SetOnuAllocid::set_alloc_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alloc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetOnuAllocid.alloc_id)
}
inline void SetOnuAllocid::set_alloc_id(const char* value,
    size_t size) {
  
  alloc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetOnuAllocid.alloc_id)
}
inline std::string* SetOnuAllocid::_internal_mutable_alloc_id() {
  
  return alloc_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetOnuAllocid::release_alloc_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetOnuAllocid.alloc_id)
  return alloc_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetOnuAllocid::set_allocated_alloc_id(std::string* alloc_id) {
  if (alloc_id != nullptr) {
    
  } else {
    
  }
  alloc_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alloc_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetOnuAllocid.alloc_id)
}

// -------------------------------------------------------------------

// ClearOnuSla

// int32 onu_id = 1;
inline void ClearOnuSla::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearOnuSla::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearOnuSla::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ClearOnuSla.onu_id)
  return _internal_onu_id();
}
inline void ClearOnuSla::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void ClearOnuSla::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ClearOnuSla.onu_id)
}

// int32 tcont = 2;
inline void ClearOnuSla::clear_tcont() {
  tcont_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearOnuSla::_internal_tcont() const {
  return tcont_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearOnuSla::tcont() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ClearOnuSla.tcont)
  return _internal_tcont();
}
inline void ClearOnuSla::_internal_set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tcont_ = value;
}
inline void ClearOnuSla::set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tcont(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ClearOnuSla.tcont)
}

// -------------------------------------------------------------------

// AddOnuSla

// int32 onu_id = 1;
inline void AddOnuSla::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuSla.onu_id)
  return _internal_onu_id();
}
inline void AddOnuSla::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void AddOnuSla::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuSla.onu_id)
}

// int32 tcont = 2;
inline void AddOnuSla::clear_tcont() {
  tcont_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::_internal_tcont() const {
  return tcont_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::tcont() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuSla.tcont)
  return _internal_tcont();
}
inline void AddOnuSla::_internal_set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tcont_ = value;
}
inline void AddOnuSla::set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tcont(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuSla.tcont)
}

// int32 type = 3;
inline void AddOnuSla::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::type() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuSla.type)
  return _internal_type();
}
inline void AddOnuSla::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void AddOnuSla::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuSla.type)
}

// int32 si = 4;
inline void AddOnuSla::clear_si() {
  si_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::_internal_si() const {
  return si_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::si() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuSla.si)
  return _internal_si();
}
inline void AddOnuSla::_internal_set_si(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  si_ = value;
}
inline void AddOnuSla::set_si(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_si(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuSla.si)
}

// int32 abmin = 5;
inline void AddOnuSla::clear_abmin() {
  abmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::_internal_abmin() const {
  return abmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::abmin() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuSla.abmin)
  return _internal_abmin();
}
inline void AddOnuSla::_internal_set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  abmin_ = value;
}
inline void AddOnuSla::set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_abmin(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuSla.abmin)
}

// int32 absur = 6;
inline void AddOnuSla::clear_absur() {
  absur_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::_internal_absur() const {
  return absur_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuSla::absur() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuSla.absur)
  return _internal_absur();
}
inline void AddOnuSla::_internal_set_absur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  absur_ = value;
}
inline void AddOnuSla::set_absur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_absur(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuSla.absur)
}

// -------------------------------------------------------------------

// SetPmdTxdis

// int32 port_type = 1;
inline void SetPmdTxdis::clear_port_type() {
  port_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmdTxdis::_internal_port_type() const {
  return port_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmdTxdis::port_type() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmdTxdis.port_type)
  return _internal_port_type();
}
inline void SetPmdTxdis::_internal_set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_type_ = value;
}
inline void SetPmdTxdis::set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_type(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmdTxdis.port_type)
}

// int32 mode = 2;
inline void SetPmdTxdis::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmdTxdis::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmdTxdis::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmdTxdis.mode)
  return _internal_mode();
}
inline void SetPmdTxdis::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SetPmdTxdis::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmdTxdis.mode)
}

// int32 port_no = 3;
inline void SetPmdTxdis::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmdTxdis::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPmdTxdis::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPmdTxdis.port_no)
  return _internal_port_no();
}
inline void SetPmdTxdis::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void SetPmdTxdis::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPmdTxdis.port_no)
}

// -------------------------------------------------------------------

// GetPmdsKind

// int32 port_type = 1;
inline void GetPmdsKind::clear_port_type() {
  port_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPmdsKind::_internal_port_type() const {
  return port_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPmdsKind::port_type() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetPmdsKind.port_type)
  return _internal_port_type();
}
inline void GetPmdsKind::_internal_set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_type_ = value;
}
inline void GetPmdsKind::set_port_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_type(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetPmdsKind.port_type)
}

// int32 port_no = 2;
inline void GetPmdsKind::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPmdsKind::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPmdsKind::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetPmdsKind.port_no)
  return _internal_port_no();
}
inline void GetPmdsKind::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void GetPmdsKind::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetPmdsKind.port_no)
}

// -------------------------------------------------------------------

// SetPort

// int32 mode = 1;
inline void SetPort::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPort::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPort::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPort.mode)
  return _internal_mode();
}
inline void SetPort::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SetPort::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPort.mode)
}

// int32 port_no = 2;
inline void SetPort::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPort::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPort::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPort.port_no)
  return _internal_port_no();
}
inline void SetPort::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void SetPort::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPort.port_no)
}

// -------------------------------------------------------------------

// SetPortKind

// int32 port_no = 1;
inline void SetPortKind::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPortKind::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPortKind::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetPortKind.port_no)
  return _internal_port_no();
}
inline void SetPortKind::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void SetPortKind::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetPortKind.port_no)
}

// -------------------------------------------------------------------

// SetMtuSize

// int32 mtu_size = 2;
inline void SetMtuSize::clear_mtu_size() {
  mtu_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMtuSize::_internal_mtu_size() const {
  return mtu_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMtuSize::mtu_size() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetMtuSize.mtu_size)
  return _internal_mtu_size();
}
inline void SetMtuSize::_internal_set_mtu_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtu_size_ = value;
}
inline void SetMtuSize::set_mtu_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtu_size(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetMtuSize.mtu_size)
}

// -------------------------------------------------------------------

// SetVlan

// int32 action = 2;
inline void SetVlan::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetVlan::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetVlan::action() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetVlan.action)
  return _internal_action();
}
inline void SetVlan::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void SetVlan::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetVlan.action)
}

// int32 vid = 3;
inline void SetVlan::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetVlan::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetVlan::vid() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetVlan.vid)
  return _internal_vid();
}
inline void SetVlan::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void SetVlan::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetVlan.vid)
}

// int32 pbit = 4;
inline void SetVlan::clear_pbit() {
  pbit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetVlan::_internal_pbit() const {
  return pbit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetVlan::pbit() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetVlan.pbit)
  return _internal_pbit();
}
inline void SetVlan::_internal_set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pbit_ = value;
}
inline void SetVlan::set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pbit(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetVlan.pbit)
}

// -------------------------------------------------------------------

// SetSdnTable

// string port_id = 1;
inline void SetSdnTable::clear_port_id() {
  port_id_.ClearToEmpty();
}
inline const std::string& SetSdnTable::port_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetSdnTable.port_id)
  return _internal_port_id();
}
inline void SetSdnTable::set_port_id(const std::string& value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetSdnTable.port_id)
}
inline std::string* SetSdnTable::mutable_port_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SetSdnTable.port_id)
  return _internal_mutable_port_id();
}
inline const std::string& SetSdnTable::_internal_port_id() const {
  return port_id_.Get();
}
inline void SetSdnTable::_internal_set_port_id(const std::string& value) {
  
  port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetSdnTable::set_port_id(std::string&& value) {
  
  port_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SetSdnTable.port_id)
}
inline void SetSdnTable::set_port_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SetSdnTable.port_id)
}
inline void SetSdnTable::set_port_id(const char* value,
    size_t size) {
  
  port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SetSdnTable.port_id)
}
inline std::string* SetSdnTable::_internal_mutable_port_id() {
  
  return port_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetSdnTable::release_port_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.SetSdnTable.port_id)
  return port_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetSdnTable::set_allocated_port_id(std::string* port_id) {
  if (port_id != nullptr) {
    
  } else {
    
  }
  port_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SetSdnTable.port_id)
}

// int32 vid = 2;
inline void SetSdnTable::clear_vid() {
  vid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetSdnTable::_internal_vid() const {
  return vid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetSdnTable::vid() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetSdnTable.vid)
  return _internal_vid();
}
inline void SetSdnTable::_internal_set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vid_ = value;
}
inline void SetSdnTable::set_vid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vid(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetSdnTable.vid)
}

// int32 pbit = 3;
inline void SetSdnTable::clear_pbit() {
  pbit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetSdnTable::_internal_pbit() const {
  return pbit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetSdnTable::pbit() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetSdnTable.pbit)
  return _internal_pbit();
}
inline void SetSdnTable::_internal_set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pbit_ = value;
}
inline void SetSdnTable::set_pbit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pbit(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetSdnTable.pbit)
}

// -------------------------------------------------------------------

// SetDirectionMode

// int32 direction = 1;
inline void SetDirectionMode::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDirectionMode::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDirectionMode::direction() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetDirectionMode.direction)
  return _internal_direction();
}
inline void SetDirectionMode::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void SetDirectionMode::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetDirectionMode.direction)
}

// int32 mode = 2;
inline void SetDirectionMode::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDirectionMode::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDirectionMode::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetDirectionMode.mode)
  return _internal_mode();
}
inline void SetDirectionMode::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void SetDirectionMode::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetDirectionMode.mode)
}

// -------------------------------------------------------------------

// GetDirectionValue

// int32 direction = 1;
inline void GetDirectionValue::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDirectionValue::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDirectionValue::direction() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetDirectionValue.direction)
  return _internal_direction();
}
inline void GetDirectionValue::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void GetDirectionValue::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetDirectionValue.direction)
}

// -------------------------------------------------------------------

// GetSdnTable

// string address = 1;
inline void GetSdnTable::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GetSdnTable::address() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetSdnTable.address)
  return _internal_address();
}
inline void GetSdnTable::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetSdnTable.address)
}
inline std::string* GetSdnTable::mutable_address() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.GetSdnTable.address)
  return _internal_mutable_address();
}
inline const std::string& GetSdnTable::_internal_address() const {
  return address_.Get();
}
inline void GetSdnTable::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSdnTable::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.GetSdnTable.address)
}
inline void GetSdnTable::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.GetSdnTable.address)
}
inline void GetSdnTable::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.GetSdnTable.address)
}
inline std::string* GetSdnTable::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSdnTable::release_address() {
  // @@protoc_insertion_point(field_release:bossopenolt.GetSdnTable.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSdnTable::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.GetSdnTable.address)
}

// -------------------------------------------------------------------

// IntegerValue

// int32 value = 1;
inline void IntegerValue::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerValue::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IntegerValue::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.IntegerValue.value)
  return _internal_value();
}
inline void IntegerValue::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void IntegerValue::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.IntegerValue.value)
}

// -------------------------------------------------------------------

// StringValue

// string value = 1;
inline void StringValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StringValue::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.StringValue.value)
  return _internal_value();
}
inline void StringValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.StringValue.value)
}
inline std::string* StringValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.StringValue.value)
  return _internal_mutable_value();
}
inline const std::string& StringValue::_internal_value() const {
  return value_.Get();
}
inline void StringValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StringValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.StringValue.value)
}
inline void StringValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.StringValue.value)
}
inline void StringValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.StringValue.value)
}
inline std::string* StringValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StringValue::release_value() {
  // @@protoc_insertion_point(field_release:bossopenolt.StringValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.StringValue.value)
}

// -------------------------------------------------------------------

// SetLength

// int32 operation = 1;
inline void SetLength::clear_operation() {
  operation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLength::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLength::operation() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetLength.operation)
  return _internal_operation();
}
inline void SetLength::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operation_ = value;
}
inline void SetLength::set_operation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetLength.operation)
}

// int32 value = 2;
inline void SetLength::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLength::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLength::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SetLength.value)
  return _internal_value();
}
inline void SetLength::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void SetLength::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SetLength.value)
}

// -------------------------------------------------------------------

// GetLength

// int32 operation = 1;
inline void GetLength::clear_operation() {
  operation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLength::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLength::operation() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetLength.operation)
  return _internal_operation();
}
inline void GetLength::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operation_ = value;
}
inline void GetLength::set_operation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetLength.operation)
}

// -------------------------------------------------------------------

// OnuCtrl

// int32 onu_id = 1;
inline void OnuCtrl::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuCtrl::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuCtrl::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuCtrl.onu_id)
  return _internal_onu_id();
}
inline void OnuCtrl::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void OnuCtrl::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuCtrl.onu_id)
}

// -------------------------------------------------------------------

// OltConnResponse

// string device_id = 1;
inline void OltConnResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& OltConnResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltConnResponse.device_id)
  return _internal_device_id();
}
inline void OltConnResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltConnResponse.device_id)
}
inline std::string* OltConnResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltConnResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OltConnResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void OltConnResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltConnResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltConnResponse.device_id)
}
inline void OltConnResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltConnResponse.device_id)
}
inline void OltConnResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltConnResponse.device_id)
}
inline std::string* OltConnResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltConnResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltConnResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltConnResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltConnResponse.device_id)
}

// string ip = 2;
inline void OltConnResponse::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& OltConnResponse::ip() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltConnResponse.ip)
  return _internal_ip();
}
inline void OltConnResponse::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltConnResponse.ip)
}
inline std::string* OltConnResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltConnResponse.ip)
  return _internal_mutable_ip();
}
inline const std::string& OltConnResponse::_internal_ip() const {
  return ip_.Get();
}
inline void OltConnResponse::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltConnResponse::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltConnResponse.ip)
}
inline void OltConnResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltConnResponse.ip)
}
inline void OltConnResponse::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltConnResponse.ip)
}
inline std::string* OltConnResponse::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltConnResponse::release_ip() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltConnResponse.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltConnResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltConnResponse.ip)
}

// string mac = 3;
inline void OltConnResponse::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& OltConnResponse::mac() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltConnResponse.mac)
  return _internal_mac();
}
inline void OltConnResponse::set_mac(const std::string& value) {
  _internal_set_mac(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltConnResponse.mac)
}
inline std::string* OltConnResponse::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltConnResponse.mac)
  return _internal_mutable_mac();
}
inline const std::string& OltConnResponse::_internal_mac() const {
  return mac_.Get();
}
inline void OltConnResponse::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltConnResponse::set_mac(std::string&& value) {
  
  mac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltConnResponse.mac)
}
inline void OltConnResponse::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltConnResponse.mac)
}
inline void OltConnResponse::set_mac(const char* value,
    size_t size) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltConnResponse.mac)
}
inline std::string* OltConnResponse::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltConnResponse::release_mac() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltConnResponse.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltConnResponse::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltConnResponse.mac)
}

// -------------------------------------------------------------------

// OltDevResponse

// string device_id = 1;
inline void OltDevResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& OltDevResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltDevResponse.device_id)
  return _internal_device_id();
}
inline void OltDevResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltDevResponse.device_id)
}
inline std::string* OltDevResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltDevResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OltDevResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void OltDevResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltDevResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltDevResponse.device_id)
}
inline void OltDevResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltDevResponse.device_id)
}
inline void OltDevResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltDevResponse.device_id)
}
inline std::string* OltDevResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltDevResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltDevResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltDevResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltDevResponse.device_id)
}

// string fpga_type = 2;
inline void OltDevResponse::clear_fpga_type() {
  fpga_type_.ClearToEmpty();
}
inline const std::string& OltDevResponse::fpga_type() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltDevResponse.fpga_type)
  return _internal_fpga_type();
}
inline void OltDevResponse::set_fpga_type(const std::string& value) {
  _internal_set_fpga_type(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltDevResponse.fpga_type)
}
inline std::string* OltDevResponse::mutable_fpga_type() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltDevResponse.fpga_type)
  return _internal_mutable_fpga_type();
}
inline const std::string& OltDevResponse::_internal_fpga_type() const {
  return fpga_type_.Get();
}
inline void OltDevResponse::_internal_set_fpga_type(const std::string& value) {
  
  fpga_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltDevResponse::set_fpga_type(std::string&& value) {
  
  fpga_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltDevResponse.fpga_type)
}
inline void OltDevResponse::set_fpga_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fpga_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltDevResponse.fpga_type)
}
inline void OltDevResponse::set_fpga_type(const char* value,
    size_t size) {
  
  fpga_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltDevResponse.fpga_type)
}
inline std::string* OltDevResponse::_internal_mutable_fpga_type() {
  
  return fpga_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltDevResponse::release_fpga_type() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltDevResponse.fpga_type)
  return fpga_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltDevResponse::set_allocated_fpga_type(std::string* fpga_type) {
  if (fpga_type != nullptr) {
    
  } else {
    
  }
  fpga_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fpga_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltDevResponse.fpga_type)
}

// string fpga_ver = 3;
inline void OltDevResponse::clear_fpga_ver() {
  fpga_ver_.ClearToEmpty();
}
inline const std::string& OltDevResponse::fpga_ver() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltDevResponse.fpga_ver)
  return _internal_fpga_ver();
}
inline void OltDevResponse::set_fpga_ver(const std::string& value) {
  _internal_set_fpga_ver(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltDevResponse.fpga_ver)
}
inline std::string* OltDevResponse::mutable_fpga_ver() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltDevResponse.fpga_ver)
  return _internal_mutable_fpga_ver();
}
inline const std::string& OltDevResponse::_internal_fpga_ver() const {
  return fpga_ver_.Get();
}
inline void OltDevResponse::_internal_set_fpga_ver(const std::string& value) {
  
  fpga_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltDevResponse::set_fpga_ver(std::string&& value) {
  
  fpga_ver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltDevResponse.fpga_ver)
}
inline void OltDevResponse::set_fpga_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fpga_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltDevResponse.fpga_ver)
}
inline void OltDevResponse::set_fpga_ver(const char* value,
    size_t size) {
  
  fpga_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltDevResponse.fpga_ver)
}
inline std::string* OltDevResponse::_internal_mutable_fpga_ver() {
  
  return fpga_ver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltDevResponse::release_fpga_ver() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltDevResponse.fpga_ver)
  return fpga_ver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltDevResponse::set_allocated_fpga_ver(std::string* fpga_ver) {
  if (fpga_ver != nullptr) {
    
  } else {
    
  }
  fpga_ver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fpga_ver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltDevResponse.fpga_ver)
}

// string fpga_Date = 4;
inline void OltDevResponse::clear_fpga_date() {
  fpga_date_.ClearToEmpty();
}
inline const std::string& OltDevResponse::fpga_date() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltDevResponse.fpga_Date)
  return _internal_fpga_date();
}
inline void OltDevResponse::set_fpga_date(const std::string& value) {
  _internal_set_fpga_date(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltDevResponse.fpga_Date)
}
inline std::string* OltDevResponse::mutable_fpga_date() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltDevResponse.fpga_Date)
  return _internal_mutable_fpga_date();
}
inline const std::string& OltDevResponse::_internal_fpga_date() const {
  return fpga_date_.Get();
}
inline void OltDevResponse::_internal_set_fpga_date(const std::string& value) {
  
  fpga_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltDevResponse::set_fpga_date(std::string&& value) {
  
  fpga_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltDevResponse.fpga_Date)
}
inline void OltDevResponse::set_fpga_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fpga_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltDevResponse.fpga_Date)
}
inline void OltDevResponse::set_fpga_date(const char* value,
    size_t size) {
  
  fpga_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltDevResponse.fpga_Date)
}
inline std::string* OltDevResponse::_internal_mutable_fpga_date() {
  
  return fpga_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltDevResponse::release_fpga_date() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltDevResponse.fpga_Date)
  return fpga_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltDevResponse::set_allocated_fpga_date(std::string* fpga_date) {
  if (fpga_date != nullptr) {
    
  } else {
    
  }
  fpga_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fpga_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltDevResponse.fpga_Date)
}

// string sw_ver = 5;
inline void OltDevResponse::clear_sw_ver() {
  sw_ver_.ClearToEmpty();
}
inline const std::string& OltDevResponse::sw_ver() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltDevResponse.sw_ver)
  return _internal_sw_ver();
}
inline void OltDevResponse::set_sw_ver(const std::string& value) {
  _internal_set_sw_ver(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltDevResponse.sw_ver)
}
inline std::string* OltDevResponse::mutable_sw_ver() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltDevResponse.sw_ver)
  return _internal_mutable_sw_ver();
}
inline const std::string& OltDevResponse::_internal_sw_ver() const {
  return sw_ver_.Get();
}
inline void OltDevResponse::_internal_set_sw_ver(const std::string& value) {
  
  sw_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltDevResponse::set_sw_ver(std::string&& value) {
  
  sw_ver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltDevResponse.sw_ver)
}
inline void OltDevResponse::set_sw_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sw_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltDevResponse.sw_ver)
}
inline void OltDevResponse::set_sw_ver(const char* value,
    size_t size) {
  
  sw_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltDevResponse.sw_ver)
}
inline std::string* OltDevResponse::_internal_mutable_sw_ver() {
  
  return sw_ver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltDevResponse::release_sw_ver() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltDevResponse.sw_ver)
  return sw_ver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltDevResponse::set_allocated_sw_ver(std::string* sw_ver) {
  if (sw_ver != nullptr) {
    
  } else {
    
  }
  sw_ver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw_ver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltDevResponse.sw_ver)
}

// string sw_date = 6;
inline void OltDevResponse::clear_sw_date() {
  sw_date_.ClearToEmpty();
}
inline const std::string& OltDevResponse::sw_date() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OltDevResponse.sw_date)
  return _internal_sw_date();
}
inline void OltDevResponse::set_sw_date(const std::string& value) {
  _internal_set_sw_date(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OltDevResponse.sw_date)
}
inline std::string* OltDevResponse::mutable_sw_date() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OltDevResponse.sw_date)
  return _internal_mutable_sw_date();
}
inline const std::string& OltDevResponse::_internal_sw_date() const {
  return sw_date_.Get();
}
inline void OltDevResponse::_internal_set_sw_date(const std::string& value) {
  
  sw_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OltDevResponse::set_sw_date(std::string&& value) {
  
  sw_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OltDevResponse.sw_date)
}
inline void OltDevResponse::set_sw_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sw_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OltDevResponse.sw_date)
}
inline void OltDevResponse::set_sw_date(const char* value,
    size_t size) {
  
  sw_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OltDevResponse.sw_date)
}
inline std::string* OltDevResponse::_internal_mutable_sw_date() {
  
  return sw_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OltDevResponse::release_sw_date() {
  // @@protoc_insertion_point(field_release:bossopenolt.OltDevResponse.sw_date)
  return sw_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OltDevResponse::set_allocated_sw_date(std::string* sw_date) {
  if (sw_date != nullptr) {
    
  } else {
    
  }
  sw_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OltDevResponse.sw_date)
}

// -------------------------------------------------------------------

// ExecResult

// int32 result = 1;
inline void ExecResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecResult::result() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ExecResult.result)
  return _internal_result();
}
inline void ExecResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void ExecResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ExecResult.result)
}

// -------------------------------------------------------------------

// PmdTxdisResponse

// int32 port_no = 1;
inline void PmdTxdisResponse::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmdTxdisResponse::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmdTxdisResponse::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdTxdisResponse.port_no)
  return _internal_port_no();
}
inline void PmdTxdisResponse::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void PmdTxdisResponse::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdTxdisResponse.port_no)
}

// string status = 2;
inline void PmdTxdisResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PmdTxdisResponse::status() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdTxdisResponse.status)
  return _internal_status();
}
inline void PmdTxdisResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdTxdisResponse.status)
}
inline std::string* PmdTxdisResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmdTxdisResponse.status)
  return _internal_mutable_status();
}
inline const std::string& PmdTxdisResponse::_internal_status() const {
  return status_.Get();
}
inline void PmdTxdisResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmdTxdisResponse::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmdTxdisResponse.status)
}
inline void PmdTxdisResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmdTxdisResponse.status)
}
inline void PmdTxdisResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmdTxdisResponse.status)
}
inline std::string* PmdTxdisResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmdTxdisResponse::release_status() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmdTxdisResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmdTxdisResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmdTxdisResponse.status)
}

// -------------------------------------------------------------------

// PmdStatusResponse

// int32 port_no = 1;
inline void PmdStatusResponse::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmdStatusResponse::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmdStatusResponse::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdStatusResponse.port_no)
  return _internal_port_no();
}
inline void PmdStatusResponse::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void PmdStatusResponse::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdStatusResponse.port_no)
}

// string loss = 2;
inline void PmdStatusResponse::clear_loss() {
  loss_.ClearToEmpty();
}
inline const std::string& PmdStatusResponse::loss() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdStatusResponse.loss)
  return _internal_loss();
}
inline void PmdStatusResponse::set_loss(const std::string& value) {
  _internal_set_loss(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdStatusResponse.loss)
}
inline std::string* PmdStatusResponse::mutable_loss() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmdStatusResponse.loss)
  return _internal_mutable_loss();
}
inline const std::string& PmdStatusResponse::_internal_loss() const {
  return loss_.Get();
}
inline void PmdStatusResponse::_internal_set_loss(const std::string& value) {
  
  loss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmdStatusResponse::set_loss(std::string&& value) {
  
  loss_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmdStatusResponse.loss)
}
inline void PmdStatusResponse::set_loss(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmdStatusResponse.loss)
}
inline void PmdStatusResponse::set_loss(const char* value,
    size_t size) {
  
  loss_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmdStatusResponse.loss)
}
inline std::string* PmdStatusResponse::_internal_mutable_loss() {
  
  return loss_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmdStatusResponse::release_loss() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmdStatusResponse.loss)
  return loss_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmdStatusResponse::set_allocated_loss(std::string* loss) {
  if (loss != nullptr) {
    
  } else {
    
  }
  loss_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loss,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmdStatusResponse.loss)
}

// string module = 3;
inline void PmdStatusResponse::clear_module() {
  module_.ClearToEmpty();
}
inline const std::string& PmdStatusResponse::module() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdStatusResponse.module)
  return _internal_module();
}
inline void PmdStatusResponse::set_module(const std::string& value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdStatusResponse.module)
}
inline std::string* PmdStatusResponse::mutable_module() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmdStatusResponse.module)
  return _internal_mutable_module();
}
inline const std::string& PmdStatusResponse::_internal_module() const {
  return module_.Get();
}
inline void PmdStatusResponse::_internal_set_module(const std::string& value) {
  
  module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmdStatusResponse::set_module(std::string&& value) {
  
  module_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmdStatusResponse.module)
}
inline void PmdStatusResponse::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmdStatusResponse.module)
}
inline void PmdStatusResponse::set_module(const char* value,
    size_t size) {
  
  module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmdStatusResponse.module)
}
inline std::string* PmdStatusResponse::_internal_mutable_module() {
  
  return module_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmdStatusResponse::release_module() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmdStatusResponse.module)
  return module_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmdStatusResponse::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    
  } else {
    
  }
  module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmdStatusResponse.module)
}

// string fault = 4;
inline void PmdStatusResponse::clear_fault() {
  fault_.ClearToEmpty();
}
inline const std::string& PmdStatusResponse::fault() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdStatusResponse.fault)
  return _internal_fault();
}
inline void PmdStatusResponse::set_fault(const std::string& value) {
  _internal_set_fault(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdStatusResponse.fault)
}
inline std::string* PmdStatusResponse::mutable_fault() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmdStatusResponse.fault)
  return _internal_mutable_fault();
}
inline const std::string& PmdStatusResponse::_internal_fault() const {
  return fault_.Get();
}
inline void PmdStatusResponse::_internal_set_fault(const std::string& value) {
  
  fault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmdStatusResponse::set_fault(std::string&& value) {
  
  fault_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmdStatusResponse.fault)
}
inline void PmdStatusResponse::set_fault(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmdStatusResponse.fault)
}
inline void PmdStatusResponse::set_fault(const char* value,
    size_t size) {
  
  fault_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmdStatusResponse.fault)
}
inline std::string* PmdStatusResponse::_internal_mutable_fault() {
  
  return fault_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmdStatusResponse::release_fault() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmdStatusResponse.fault)
  return fault_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmdStatusResponse::set_allocated_fault(std::string* fault) {
  if (fault != nullptr) {
    
  } else {
    
  }
  fault_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fault,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmdStatusResponse.fault)
}

// string link = 5;
inline void PmdStatusResponse::clear_link() {
  link_.ClearToEmpty();
}
inline const std::string& PmdStatusResponse::link() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmdStatusResponse.link)
  return _internal_link();
}
inline void PmdStatusResponse::set_link(const std::string& value) {
  _internal_set_link(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmdStatusResponse.link)
}
inline std::string* PmdStatusResponse::mutable_link() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmdStatusResponse.link)
  return _internal_mutable_link();
}
inline const std::string& PmdStatusResponse::_internal_link() const {
  return link_.Get();
}
inline void PmdStatusResponse::_internal_set_link(const std::string& value) {
  
  link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmdStatusResponse::set_link(std::string&& value) {
  
  link_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmdStatusResponse.link)
}
inline void PmdStatusResponse::set_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmdStatusResponse.link)
}
inline void PmdStatusResponse::set_link(const char* value,
    size_t size) {
  
  link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmdStatusResponse.link)
}
inline std::string* PmdStatusResponse::_internal_mutable_link() {
  
  return link_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmdStatusResponse::release_link() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmdStatusResponse.link)
  return link_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmdStatusResponse::set_allocated_link(std::string* link) {
  if (link != nullptr) {
    
  } else {
    
  }
  link_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), link,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmdStatusResponse.link)
}

// -------------------------------------------------------------------

// GetPortResponse

// int32 port_no = 1;
inline void GetPortResponse::clear_port_no() {
  port_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPortResponse::_internal_port_no() const {
  return port_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPortResponse::port_no() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetPortResponse.port_no)
  return _internal_port_no();
}
inline void GetPortResponse::_internal_set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_no_ = value;
}
inline void GetPortResponse::set_port_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetPortResponse.port_no)
}

// string state = 2;
inline void GetPortResponse::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& GetPortResponse::state() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetPortResponse.state)
  return _internal_state();
}
inline void GetPortResponse::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetPortResponse.state)
}
inline std::string* GetPortResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.GetPortResponse.state)
  return _internal_mutable_state();
}
inline const std::string& GetPortResponse::_internal_state() const {
  return state_.Get();
}
inline void GetPortResponse::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPortResponse::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.GetPortResponse.state)
}
inline void GetPortResponse::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.GetPortResponse.state)
}
inline void GetPortResponse::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.GetPortResponse.state)
}
inline std::string* GetPortResponse::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPortResponse::release_state() {
  // @@protoc_insertion_point(field_release:bossopenolt.GetPortResponse.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPortResponse::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.GetPortResponse.state)
}

// -------------------------------------------------------------------

// MtuSizeResponse

// int32 mtu = 1;
inline void MtuSizeResponse::clear_mtu() {
  mtu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MtuSizeResponse::_internal_mtu() const {
  return mtu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MtuSizeResponse::mtu() const {
  // @@protoc_insertion_point(field_get:bossopenolt.MtuSizeResponse.mtu)
  return _internal_mtu();
}
inline void MtuSizeResponse::_internal_set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtu_ = value;
}
inline void MtuSizeResponse::set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:bossopenolt.MtuSizeResponse.mtu)
}

// -------------------------------------------------------------------

// GetVlanResponse

// string device_id = 1;
inline void GetVlanResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& GetVlanResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetVlanResponse.device_id)
  return _internal_device_id();
}
inline void GetVlanResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetVlanResponse.device_id)
}
inline std::string* GetVlanResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.GetVlanResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& GetVlanResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void GetVlanResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetVlanResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.GetVlanResponse.device_id)
}
inline void GetVlanResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.GetVlanResponse.device_id)
}
inline void GetVlanResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.GetVlanResponse.device_id)
}
inline std::string* GetVlanResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetVlanResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.GetVlanResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVlanResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.GetVlanResponse.device_id)
}

// int32 vlan_mode = 2;
inline void GetVlanResponse::clear_vlan_mode() {
  vlan_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVlanResponse::_internal_vlan_mode() const {
  return vlan_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVlanResponse::vlan_mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetVlanResponse.vlan_mode)
  return _internal_vlan_mode();
}
inline void GetVlanResponse::_internal_set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vlan_mode_ = value;
}
inline void GetVlanResponse::set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vlan_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetVlanResponse.vlan_mode)
}

// string fields = 3;
inline void GetVlanResponse::clear_fields() {
  fields_.ClearToEmpty();
}
inline const std::string& GetVlanResponse::fields() const {
  // @@protoc_insertion_point(field_get:bossopenolt.GetVlanResponse.fields)
  return _internal_fields();
}
inline void GetVlanResponse::set_fields(const std::string& value) {
  _internal_set_fields(value);
  // @@protoc_insertion_point(field_set:bossopenolt.GetVlanResponse.fields)
}
inline std::string* GetVlanResponse::mutable_fields() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.GetVlanResponse.fields)
  return _internal_mutable_fields();
}
inline const std::string& GetVlanResponse::_internal_fields() const {
  return fields_.Get();
}
inline void GetVlanResponse::_internal_set_fields(const std::string& value) {
  
  fields_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetVlanResponse::set_fields(std::string&& value) {
  
  fields_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.GetVlanResponse.fields)
}
inline void GetVlanResponse::set_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fields_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.GetVlanResponse.fields)
}
inline void GetVlanResponse::set_fields(const char* value,
    size_t size) {
  
  fields_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.GetVlanResponse.fields)
}
inline std::string* GetVlanResponse::_internal_mutable_fields() {
  
  return fields_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetVlanResponse::release_fields() {
  // @@protoc_insertion_point(field_release:bossopenolt.GetVlanResponse.fields)
  return fields_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVlanResponse::set_allocated_fields(std::string* fields) {
  if (fields != nullptr) {
    
  } else {
    
  }
  fields_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fields,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.GetVlanResponse.fields)
}

// -------------------------------------------------------------------

// ModeResponse

// string device_id = 1;
inline void ModeResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& ModeResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ModeResponse.device_id)
  return _internal_device_id();
}
inline void ModeResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ModeResponse.device_id)
}
inline std::string* ModeResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.ModeResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& ModeResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void ModeResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModeResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.ModeResponse.device_id)
}
inline void ModeResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.ModeResponse.device_id)
}
inline void ModeResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.ModeResponse.device_id)
}
inline std::string* ModeResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModeResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.ModeResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModeResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.ModeResponse.device_id)
}

// int32 mode = 2;
inline void ModeResponse::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModeResponse::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModeResponse::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ModeResponse.mode)
  return _internal_mode();
}
inline void ModeResponse::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void ModeResponse::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ModeResponse.mode)
}

// -------------------------------------------------------------------

// AgingTimeResponse

// string device_id = 1;
inline void AgingTimeResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& AgingTimeResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AgingTimeResponse.device_id)
  return _internal_device_id();
}
inline void AgingTimeResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AgingTimeResponse.device_id)
}
inline std::string* AgingTimeResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.AgingTimeResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& AgingTimeResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void AgingTimeResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AgingTimeResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.AgingTimeResponse.device_id)
}
inline void AgingTimeResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.AgingTimeResponse.device_id)
}
inline void AgingTimeResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.AgingTimeResponse.device_id)
}
inline std::string* AgingTimeResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AgingTimeResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.AgingTimeResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgingTimeResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.AgingTimeResponse.device_id)
}

// int32 aging_time = 2;
inline void AgingTimeResponse::clear_aging_time() {
  aging_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgingTimeResponse::_internal_aging_time() const {
  return aging_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AgingTimeResponse::aging_time() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AgingTimeResponse.aging_time)
  return _internal_aging_time();
}
inline void AgingTimeResponse::_internal_set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aging_time_ = value;
}
inline void AgingTimeResponse::set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aging_time(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AgingTimeResponse.aging_time)
}

// -------------------------------------------------------------------

// DevMacInfoResponse

// string device_id = 1;
inline void DevMacInfoResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& DevMacInfoResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.DevMacInfoResponse.device_id)
  return _internal_device_id();
}
inline void DevMacInfoResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.DevMacInfoResponse.device_id)
}
inline std::string* DevMacInfoResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.DevMacInfoResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DevMacInfoResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void DevMacInfoResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DevMacInfoResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.DevMacInfoResponse.device_id)
}
inline void DevMacInfoResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.DevMacInfoResponse.device_id)
}
inline void DevMacInfoResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.DevMacInfoResponse.device_id)
}
inline std::string* DevMacInfoResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DevMacInfoResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.DevMacInfoResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DevMacInfoResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.DevMacInfoResponse.device_id)
}

// int32 mtu = 2;
inline void DevMacInfoResponse::clear_mtu() {
  mtu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::_internal_mtu() const {
  return mtu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::mtu() const {
  // @@protoc_insertion_point(field_get:bossopenolt.DevMacInfoResponse.mtu)
  return _internal_mtu();
}
inline void DevMacInfoResponse::_internal_set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtu_ = value;
}
inline void DevMacInfoResponse::set_mtu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:bossopenolt.DevMacInfoResponse.mtu)
}

// int32 vlan_mode = 3;
inline void DevMacInfoResponse::clear_vlan_mode() {
  vlan_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::_internal_vlan_mode() const {
  return vlan_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::vlan_mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.DevMacInfoResponse.vlan_mode)
  return _internal_vlan_mode();
}
inline void DevMacInfoResponse::_internal_set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vlan_mode_ = value;
}
inline void DevMacInfoResponse::set_vlan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vlan_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.DevMacInfoResponse.vlan_mode)
}

// int32 lookup_mode = 4;
inline void DevMacInfoResponse::clear_lookup_mode() {
  lookup_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::_internal_lookup_mode() const {
  return lookup_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::lookup_mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.DevMacInfoResponse.lookup_mode)
  return _internal_lookup_mode();
}
inline void DevMacInfoResponse::_internal_set_lookup_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lookup_mode_ = value;
}
inline void DevMacInfoResponse::set_lookup_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lookup_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.DevMacInfoResponse.lookup_mode)
}

// string aging_mode = 5;
inline void DevMacInfoResponse::clear_aging_mode() {
  aging_mode_.ClearToEmpty();
}
inline const std::string& DevMacInfoResponse::aging_mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.DevMacInfoResponse.aging_mode)
  return _internal_aging_mode();
}
inline void DevMacInfoResponse::set_aging_mode(const std::string& value) {
  _internal_set_aging_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.DevMacInfoResponse.aging_mode)
}
inline std::string* DevMacInfoResponse::mutable_aging_mode() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.DevMacInfoResponse.aging_mode)
  return _internal_mutable_aging_mode();
}
inline const std::string& DevMacInfoResponse::_internal_aging_mode() const {
  return aging_mode_.Get();
}
inline void DevMacInfoResponse::_internal_set_aging_mode(const std::string& value) {
  
  aging_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DevMacInfoResponse::set_aging_mode(std::string&& value) {
  
  aging_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.DevMacInfoResponse.aging_mode)
}
inline void DevMacInfoResponse::set_aging_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aging_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.DevMacInfoResponse.aging_mode)
}
inline void DevMacInfoResponse::set_aging_mode(const char* value,
    size_t size) {
  
  aging_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.DevMacInfoResponse.aging_mode)
}
inline std::string* DevMacInfoResponse::_internal_mutable_aging_mode() {
  
  return aging_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DevMacInfoResponse::release_aging_mode() {
  // @@protoc_insertion_point(field_release:bossopenolt.DevMacInfoResponse.aging_mode)
  return aging_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DevMacInfoResponse::set_allocated_aging_mode(std::string* aging_mode) {
  if (aging_mode != nullptr) {
    
  } else {
    
  }
  aging_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aging_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.DevMacInfoResponse.aging_mode)
}

// int32 aging_time = 6;
inline void DevMacInfoResponse::clear_aging_time() {
  aging_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::_internal_aging_time() const {
  return aging_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevMacInfoResponse::aging_time() const {
  // @@protoc_insertion_point(field_get:bossopenolt.DevMacInfoResponse.aging_time)
  return _internal_aging_time();
}
inline void DevMacInfoResponse::_internal_set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aging_time_ = value;
}
inline void DevMacInfoResponse::set_aging_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aging_time(value);
  // @@protoc_insertion_point(field_set:bossopenolt.DevMacInfoResponse.aging_time)
}

// -------------------------------------------------------------------

// SdnTableKeyResponse

// string hash_key = 1;
inline void SdnTableKeyResponse::clear_hash_key() {
  hash_key_.ClearToEmpty();
}
inline const std::string& SdnTableKeyResponse::hash_key() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SdnTableKeyResponse.hash_key)
  return _internal_hash_key();
}
inline void SdnTableKeyResponse::set_hash_key(const std::string& value) {
  _internal_set_hash_key(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SdnTableKeyResponse.hash_key)
}
inline std::string* SdnTableKeyResponse::mutable_hash_key() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SdnTableKeyResponse.hash_key)
  return _internal_mutable_hash_key();
}
inline const std::string& SdnTableKeyResponse::_internal_hash_key() const {
  return hash_key_.Get();
}
inline void SdnTableKeyResponse::_internal_set_hash_key(const std::string& value) {
  
  hash_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SdnTableKeyResponse::set_hash_key(std::string&& value) {
  
  hash_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SdnTableKeyResponse.hash_key)
}
inline void SdnTableKeyResponse::set_hash_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SdnTableKeyResponse.hash_key)
}
inline void SdnTableKeyResponse::set_hash_key(const char* value,
    size_t size) {
  
  hash_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SdnTableKeyResponse.hash_key)
}
inline std::string* SdnTableKeyResponse::_internal_mutable_hash_key() {
  
  return hash_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SdnTableKeyResponse::release_hash_key() {
  // @@protoc_insertion_point(field_release:bossopenolt.SdnTableKeyResponse.hash_key)
  return hash_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SdnTableKeyResponse::set_allocated_hash_key(std::string* hash_key) {
  if (hash_key != nullptr) {
    
  } else {
    
  }
  hash_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SdnTableKeyResponse.hash_key)
}

// -------------------------------------------------------------------

// SdnTableResponse

// string device_id = 1;
inline void SdnTableResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& SdnTableResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SdnTableResponse.device_id)
  return _internal_device_id();
}
inline void SdnTableResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SdnTableResponse.device_id)
}
inline std::string* SdnTableResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SdnTableResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& SdnTableResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void SdnTableResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SdnTableResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SdnTableResponse.device_id)
}
inline void SdnTableResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SdnTableResponse.device_id)
}
inline void SdnTableResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SdnTableResponse.device_id)
}
inline std::string* SdnTableResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SdnTableResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.SdnTableResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SdnTableResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SdnTableResponse.device_id)
}

// string address = 2;
inline void SdnTableResponse::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& SdnTableResponse::address() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SdnTableResponse.address)
  return _internal_address();
}
inline void SdnTableResponse::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SdnTableResponse.address)
}
inline std::string* SdnTableResponse::mutable_address() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SdnTableResponse.address)
  return _internal_mutable_address();
}
inline const std::string& SdnTableResponse::_internal_address() const {
  return address_.Get();
}
inline void SdnTableResponse::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SdnTableResponse::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SdnTableResponse.address)
}
inline void SdnTableResponse::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SdnTableResponse.address)
}
inline void SdnTableResponse::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SdnTableResponse.address)
}
inline std::string* SdnTableResponse::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SdnTableResponse::release_address() {
  // @@protoc_insertion_point(field_release:bossopenolt.SdnTableResponse.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SdnTableResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SdnTableResponse.address)
}

// string port_id = 3;
inline void SdnTableResponse::clear_port_id() {
  port_id_.ClearToEmpty();
}
inline const std::string& SdnTableResponse::port_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SdnTableResponse.port_id)
  return _internal_port_id();
}
inline void SdnTableResponse::set_port_id(const std::string& value) {
  _internal_set_port_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SdnTableResponse.port_id)
}
inline std::string* SdnTableResponse::mutable_port_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SdnTableResponse.port_id)
  return _internal_mutable_port_id();
}
inline const std::string& SdnTableResponse::_internal_port_id() const {
  return port_id_.Get();
}
inline void SdnTableResponse::_internal_set_port_id(const std::string& value) {
  
  port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SdnTableResponse::set_port_id(std::string&& value) {
  
  port_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SdnTableResponse.port_id)
}
inline void SdnTableResponse::set_port_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SdnTableResponse.port_id)
}
inline void SdnTableResponse::set_port_id(const char* value,
    size_t size) {
  
  port_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SdnTableResponse.port_id)
}
inline std::string* SdnTableResponse::_internal_mutable_port_id() {
  
  return port_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SdnTableResponse::release_port_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.SdnTableResponse.port_id)
  return port_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SdnTableResponse::set_allocated_port_id(std::string* port_id) {
  if (port_id != nullptr) {
    
  } else {
    
  }
  port_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SdnTableResponse.port_id)
}

// string mac_addr = 4;
inline void SdnTableResponse::clear_mac_addr() {
  mac_addr_.ClearToEmpty();
}
inline const std::string& SdnTableResponse::mac_addr() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SdnTableResponse.mac_addr)
  return _internal_mac_addr();
}
inline void SdnTableResponse::set_mac_addr(const std::string& value) {
  _internal_set_mac_addr(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SdnTableResponse.mac_addr)
}
inline std::string* SdnTableResponse::mutable_mac_addr() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SdnTableResponse.mac_addr)
  return _internal_mutable_mac_addr();
}
inline const std::string& SdnTableResponse::_internal_mac_addr() const {
  return mac_addr_.Get();
}
inline void SdnTableResponse::_internal_set_mac_addr(const std::string& value) {
  
  mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SdnTableResponse::set_mac_addr(std::string&& value) {
  
  mac_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SdnTableResponse.mac_addr)
}
inline void SdnTableResponse::set_mac_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SdnTableResponse.mac_addr)
}
inline void SdnTableResponse::set_mac_addr(const char* value,
    size_t size) {
  
  mac_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SdnTableResponse.mac_addr)
}
inline std::string* SdnTableResponse::_internal_mutable_mac_addr() {
  
  return mac_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SdnTableResponse::release_mac_addr() {
  // @@protoc_insertion_point(field_release:bossopenolt.SdnTableResponse.mac_addr)
  return mac_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SdnTableResponse::set_allocated_mac_addr(std::string* mac_addr) {
  if (mac_addr != nullptr) {
    
  } else {
    
  }
  mac_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SdnTableResponse.mac_addr)
}

// -------------------------------------------------------------------

// LengthResponse

// string device_id = 1;
inline void LengthResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& LengthResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.LengthResponse.device_id)
  return _internal_device_id();
}
inline void LengthResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.LengthResponse.device_id)
}
inline std::string* LengthResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.LengthResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& LengthResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void LengthResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LengthResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.LengthResponse.device_id)
}
inline void LengthResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.LengthResponse.device_id)
}
inline void LengthResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.LengthResponse.device_id)
}
inline std::string* LengthResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LengthResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.LengthResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LengthResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.LengthResponse.device_id)
}

// double value = 2;
inline void LengthResponse::clear_value() {
  value_ = 0;
}
inline double LengthResponse::_internal_value() const {
  return value_;
}
inline double LengthResponse::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.LengthResponse.value)
  return _internal_value();
}
inline void LengthResponse::_internal_set_value(double value) {
  
  value_ = value;
}
inline void LengthResponse::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.LengthResponse.value)
}

// -------------------------------------------------------------------

// QuietZoneResponse

// string device_id = 1;
inline void QuietZoneResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& QuietZoneResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.QuietZoneResponse.device_id)
  return _internal_device_id();
}
inline void QuietZoneResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.QuietZoneResponse.device_id)
}
inline std::string* QuietZoneResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.QuietZoneResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& QuietZoneResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void QuietZoneResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QuietZoneResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.QuietZoneResponse.device_id)
}
inline void QuietZoneResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.QuietZoneResponse.device_id)
}
inline void QuietZoneResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.QuietZoneResponse.device_id)
}
inline std::string* QuietZoneResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QuietZoneResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.QuietZoneResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QuietZoneResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.QuietZoneResponse.device_id)
}

// double value = 2;
inline void QuietZoneResponse::clear_value() {
  value_ = 0;
}
inline double QuietZoneResponse::_internal_value() const {
  return value_;
}
inline double QuietZoneResponse::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.QuietZoneResponse.value)
  return _internal_value();
}
inline void QuietZoneResponse::_internal_set_value(double value) {
  
  value_ = value;
}
inline void QuietZoneResponse::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.QuietZoneResponse.value)
}

// -------------------------------------------------------------------

// AddOnuResponse

// string device_id = 1;
inline void AddOnuResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& AddOnuResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuResponse.device_id)
  return _internal_device_id();
}
inline void AddOnuResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuResponse.device_id)
}
inline std::string* AddOnuResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.AddOnuResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& AddOnuResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void AddOnuResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddOnuResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.AddOnuResponse.device_id)
}
inline void AddOnuResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.AddOnuResponse.device_id)
}
inline void AddOnuResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.AddOnuResponse.device_id)
}
inline std::string* AddOnuResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddOnuResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.AddOnuResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOnuResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.AddOnuResponse.device_id)
}

// int32 onu_id = 2;
inline void AddOnuResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddOnuResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuResponse.onu_id)
  return _internal_onu_id();
}
inline void AddOnuResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void AddOnuResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuResponse.onu_id)
}

// string result = 3;
inline void AddOnuResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& AddOnuResponse::result() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuResponse.result)
  return _internal_result();
}
inline void AddOnuResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuResponse.result)
}
inline std::string* AddOnuResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.AddOnuResponse.result)
  return _internal_mutable_result();
}
inline const std::string& AddOnuResponse::_internal_result() const {
  return result_.Get();
}
inline void AddOnuResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddOnuResponse::set_result(std::string&& value) {
  
  result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.AddOnuResponse.result)
}
inline void AddOnuResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.AddOnuResponse.result)
}
inline void AddOnuResponse::set_result(const char* value,
    size_t size) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.AddOnuResponse.result)
}
inline std::string* AddOnuResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddOnuResponse::release_result() {
  // @@protoc_insertion_point(field_release:bossopenolt.AddOnuResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOnuResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.AddOnuResponse.result)
}

// string rate = 4;
inline void AddOnuResponse::clear_rate() {
  rate_.ClearToEmpty();
}
inline const std::string& AddOnuResponse::rate() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuResponse.rate)
  return _internal_rate();
}
inline void AddOnuResponse::set_rate(const std::string& value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuResponse.rate)
}
inline std::string* AddOnuResponse::mutable_rate() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.AddOnuResponse.rate)
  return _internal_mutable_rate();
}
inline const std::string& AddOnuResponse::_internal_rate() const {
  return rate_.Get();
}
inline void AddOnuResponse::_internal_set_rate(const std::string& value) {
  
  rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddOnuResponse::set_rate(std::string&& value) {
  
  rate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.AddOnuResponse.rate)
}
inline void AddOnuResponse::set_rate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.AddOnuResponse.rate)
}
inline void AddOnuResponse::set_rate(const char* value,
    size_t size) {
  
  rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.AddOnuResponse.rate)
}
inline std::string* AddOnuResponse::_internal_mutable_rate() {
  
  return rate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddOnuResponse::release_rate() {
  // @@protoc_insertion_point(field_release:bossopenolt.AddOnuResponse.rate)
  return rate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOnuResponse::set_allocated_rate(std::string* rate) {
  if (rate != nullptr) {
    
  } else {
    
  }
  rate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.AddOnuResponse.rate)
}

// string vendor_id = 5;
inline void AddOnuResponse::clear_vendor_id() {
  vendor_id_.ClearToEmpty();
}
inline const std::string& AddOnuResponse::vendor_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuResponse.vendor_id)
  return _internal_vendor_id();
}
inline void AddOnuResponse::set_vendor_id(const std::string& value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuResponse.vendor_id)
}
inline std::string* AddOnuResponse::mutable_vendor_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.AddOnuResponse.vendor_id)
  return _internal_mutable_vendor_id();
}
inline const std::string& AddOnuResponse::_internal_vendor_id() const {
  return vendor_id_.Get();
}
inline void AddOnuResponse::_internal_set_vendor_id(const std::string& value) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddOnuResponse::set_vendor_id(std::string&& value) {
  
  vendor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.AddOnuResponse.vendor_id)
}
inline void AddOnuResponse::set_vendor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.AddOnuResponse.vendor_id)
}
inline void AddOnuResponse::set_vendor_id(const char* value,
    size_t size) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.AddOnuResponse.vendor_id)
}
inline std::string* AddOnuResponse::_internal_mutable_vendor_id() {
  
  return vendor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddOnuResponse::release_vendor_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.AddOnuResponse.vendor_id)
  return vendor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOnuResponse::set_allocated_vendor_id(std::string* vendor_id) {
  if (vendor_id != nullptr) {
    
  } else {
    
  }
  vendor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.AddOnuResponse.vendor_id)
}

// string vssn = 6;
inline void AddOnuResponse::clear_vssn() {
  vssn_.ClearToEmpty();
}
inline const std::string& AddOnuResponse::vssn() const {
  // @@protoc_insertion_point(field_get:bossopenolt.AddOnuResponse.vssn)
  return _internal_vssn();
}
inline void AddOnuResponse::set_vssn(const std::string& value) {
  _internal_set_vssn(value);
  // @@protoc_insertion_point(field_set:bossopenolt.AddOnuResponse.vssn)
}
inline std::string* AddOnuResponse::mutable_vssn() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.AddOnuResponse.vssn)
  return _internal_mutable_vssn();
}
inline const std::string& AddOnuResponse::_internal_vssn() const {
  return vssn_.Get();
}
inline void AddOnuResponse::_internal_set_vssn(const std::string& value) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddOnuResponse::set_vssn(std::string&& value) {
  
  vssn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.AddOnuResponse.vssn)
}
inline void AddOnuResponse::set_vssn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.AddOnuResponse.vssn)
}
inline void AddOnuResponse::set_vssn(const char* value,
    size_t size) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.AddOnuResponse.vssn)
}
inline std::string* AddOnuResponse::_internal_mutable_vssn() {
  
  return vssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddOnuResponse::release_vssn() {
  // @@protoc_insertion_point(field_release:bossopenolt.AddOnuResponse.vssn)
  return vssn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddOnuResponse::set_allocated_vssn(std::string* vssn) {
  if (vssn != nullptr) {
    
  } else {
    
  }
  vssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vssn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.AddOnuResponse.vssn)
}

// -------------------------------------------------------------------

// SlaResponse

// string device_id = 1;
inline void SlaResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& SlaResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.device_id)
  return _internal_device_id();
}
inline void SlaResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.device_id)
}
inline std::string* SlaResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SlaResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& SlaResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void SlaResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SlaResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SlaResponse.device_id)
}
inline void SlaResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SlaResponse.device_id)
}
inline void SlaResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SlaResponse.device_id)
}
inline std::string* SlaResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SlaResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.SlaResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SlaResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SlaResponse.device_id)
}

// int32 onu_id = 2;
inline void SlaResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.onu_id)
  return _internal_onu_id();
}
inline void SlaResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void SlaResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.onu_id)
}

// int32 tcont = 3;
inline void SlaResponse::clear_tcont() {
  tcont_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::_internal_tcont() const {
  return tcont_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::tcont() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.tcont)
  return _internal_tcont();
}
inline void SlaResponse::_internal_set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tcont_ = value;
}
inline void SlaResponse::set_tcont(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tcont(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.tcont)
}

// string type = 4;
inline void SlaResponse::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& SlaResponse::type() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.type)
  return _internal_type();
}
inline void SlaResponse::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.type)
}
inline std::string* SlaResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SlaResponse.type)
  return _internal_mutable_type();
}
inline const std::string& SlaResponse::_internal_type() const {
  return type_.Get();
}
inline void SlaResponse::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SlaResponse::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SlaResponse.type)
}
inline void SlaResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SlaResponse.type)
}
inline void SlaResponse::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SlaResponse.type)
}
inline std::string* SlaResponse::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SlaResponse::release_type() {
  // @@protoc_insertion_point(field_release:bossopenolt.SlaResponse.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SlaResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SlaResponse.type)
}

// int32 si = 5;
inline void SlaResponse::clear_si() {
  si_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::_internal_si() const {
  return si_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::si() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.si)
  return _internal_si();
}
inline void SlaResponse::_internal_set_si(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  si_ = value;
}
inline void SlaResponse::set_si(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_si(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.si)
}

// int32 abmin = 6;
inline void SlaResponse::clear_abmin() {
  abmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::_internal_abmin() const {
  return abmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::abmin() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.abmin)
  return _internal_abmin();
}
inline void SlaResponse::_internal_set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  abmin_ = value;
}
inline void SlaResponse::set_abmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_abmin(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.abmin)
}

// int32 absur = 7;
inline void SlaResponse::clear_absur() {
  absur_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::_internal_absur() const {
  return absur_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SlaResponse::absur() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.absur)
  return _internal_absur();
}
inline void SlaResponse::_internal_set_absur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  absur_ = value;
}
inline void SlaResponse::set_absur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_absur(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.absur)
}

// string fec = 8;
inline void SlaResponse::clear_fec() {
  fec_.ClearToEmpty();
}
inline const std::string& SlaResponse::fec() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.fec)
  return _internal_fec();
}
inline void SlaResponse::set_fec(const std::string& value) {
  _internal_set_fec(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.fec)
}
inline std::string* SlaResponse::mutable_fec() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.SlaResponse.fec)
  return _internal_mutable_fec();
}
inline const std::string& SlaResponse::_internal_fec() const {
  return fec_.Get();
}
inline void SlaResponse::_internal_set_fec(const std::string& value) {
  
  fec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SlaResponse::set_fec(std::string&& value) {
  
  fec_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.SlaResponse.fec)
}
inline void SlaResponse::set_fec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.SlaResponse.fec)
}
inline void SlaResponse::set_fec(const char* value,
    size_t size) {
  
  fec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.SlaResponse.fec)
}
inline std::string* SlaResponse::_internal_mutable_fec() {
  
  return fec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SlaResponse::release_fec() {
  // @@protoc_insertion_point(field_release:bossopenolt.SlaResponse.fec)
  return fec_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SlaResponse::set_allocated_fec(std::string* fec) {
  if (fec != nullptr) {
    
  } else {
    
  }
  fec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fec,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.SlaResponse.fec)
}

// double distance = 9;
inline void SlaResponse::clear_distance() {
  distance_ = 0;
}
inline double SlaResponse::_internal_distance() const {
  return distance_;
}
inline double SlaResponse::distance() const {
  // @@protoc_insertion_point(field_get:bossopenolt.SlaResponse.distance)
  return _internal_distance();
}
inline void SlaResponse::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void SlaResponse::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:bossopenolt.SlaResponse.distance)
}

// -------------------------------------------------------------------

// OnuVssnResponse

// string device_id = 1;
inline void OnuVssnResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& OnuVssnResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuVssnResponse.device_id)
  return _internal_device_id();
}
inline void OnuVssnResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuVssnResponse.device_id)
}
inline std::string* OnuVssnResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuVssnResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OnuVssnResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void OnuVssnResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuVssnResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuVssnResponse.device_id)
}
inline void OnuVssnResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuVssnResponse.device_id)
}
inline void OnuVssnResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuVssnResponse.device_id)
}
inline std::string* OnuVssnResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuVssnResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuVssnResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuVssnResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuVssnResponse.device_id)
}

// int32 onu_id = 2;
inline void OnuVssnResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuVssnResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuVssnResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuVssnResponse.onu_id)
  return _internal_onu_id();
}
inline void OnuVssnResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void OnuVssnResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuVssnResponse.onu_id)
}

// string vssn = 3;
inline void OnuVssnResponse::clear_vssn() {
  vssn_.ClearToEmpty();
}
inline const std::string& OnuVssnResponse::vssn() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuVssnResponse.vssn)
  return _internal_vssn();
}
inline void OnuVssnResponse::set_vssn(const std::string& value) {
  _internal_set_vssn(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuVssnResponse.vssn)
}
inline std::string* OnuVssnResponse::mutable_vssn() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuVssnResponse.vssn)
  return _internal_mutable_vssn();
}
inline const std::string& OnuVssnResponse::_internal_vssn() const {
  return vssn_.Get();
}
inline void OnuVssnResponse::_internal_set_vssn(const std::string& value) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuVssnResponse::set_vssn(std::string&& value) {
  
  vssn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuVssnResponse.vssn)
}
inline void OnuVssnResponse::set_vssn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuVssnResponse.vssn)
}
inline void OnuVssnResponse::set_vssn(const char* value,
    size_t size) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuVssnResponse.vssn)
}
inline std::string* OnuVssnResponse::_internal_mutable_vssn() {
  
  return vssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuVssnResponse::release_vssn() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuVssnResponse.vssn)
  return vssn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuVssnResponse::set_allocated_vssn(std::string* vssn) {
  if (vssn != nullptr) {
    
  } else {
    
  }
  vssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vssn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuVssnResponse.vssn)
}

// -------------------------------------------------------------------

// OnuDistResponse

// string device_id = 1;
inline void OnuDistResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& OnuDistResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuDistResponse.device_id)
  return _internal_device_id();
}
inline void OnuDistResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuDistResponse.device_id)
}
inline std::string* OnuDistResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuDistResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OnuDistResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void OnuDistResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuDistResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuDistResponse.device_id)
}
inline void OnuDistResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuDistResponse.device_id)
}
inline void OnuDistResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuDistResponse.device_id)
}
inline std::string* OnuDistResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuDistResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuDistResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuDistResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuDistResponse.device_id)
}

// int32 onu_id = 2;
inline void OnuDistResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuDistResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuDistResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuDistResponse.onu_id)
  return _internal_onu_id();
}
inline void OnuDistResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void OnuDistResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuDistResponse.onu_id)
}

// double distance = 3;
inline void OnuDistResponse::clear_distance() {
  distance_ = 0;
}
inline double OnuDistResponse::_internal_distance() const {
  return distance_;
}
inline double OnuDistResponse::distance() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuDistResponse.distance)
  return _internal_distance();
}
inline void OnuDistResponse::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void OnuDistResponse::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuDistResponse.distance)
}

// -------------------------------------------------------------------

// BurstDelimitResponse

// string device_id = 1;
inline void BurstDelimitResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& BurstDelimitResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstDelimitResponse.device_id)
  return _internal_device_id();
}
inline void BurstDelimitResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstDelimitResponse.device_id)
}
inline std::string* BurstDelimitResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstDelimitResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& BurstDelimitResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void BurstDelimitResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstDelimitResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstDelimitResponse.device_id)
}
inline void BurstDelimitResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstDelimitResponse.device_id)
}
inline void BurstDelimitResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstDelimitResponse.device_id)
}
inline std::string* BurstDelimitResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstDelimitResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstDelimitResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstDelimitResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstDelimitResponse.device_id)
}

// int32 length = 2;
inline void BurstDelimitResponse::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstDelimitResponse::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstDelimitResponse::length() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstDelimitResponse.length)
  return _internal_length();
}
inline void BurstDelimitResponse::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void BurstDelimitResponse::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstDelimitResponse.length)
}

// string delimiter = 3;
inline void BurstDelimitResponse::clear_delimiter() {
  delimiter_.ClearToEmpty();
}
inline const std::string& BurstDelimitResponse::delimiter() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstDelimitResponse.delimiter)
  return _internal_delimiter();
}
inline void BurstDelimitResponse::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstDelimitResponse.delimiter)
}
inline std::string* BurstDelimitResponse::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstDelimitResponse.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& BurstDelimitResponse::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void BurstDelimitResponse::_internal_set_delimiter(const std::string& value) {
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstDelimitResponse::set_delimiter(std::string&& value) {
  
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstDelimitResponse.delimiter)
}
inline void BurstDelimitResponse::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstDelimitResponse.delimiter)
}
inline void BurstDelimitResponse::set_delimiter(const char* value,
    size_t size) {
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstDelimitResponse.delimiter)
}
inline std::string* BurstDelimitResponse::_internal_mutable_delimiter() {
  
  return delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstDelimitResponse::release_delimiter() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstDelimitResponse.delimiter)
  return delimiter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstDelimitResponse::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    
  } else {
    
  }
  delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstDelimitResponse.delimiter)
}

// -------------------------------------------------------------------

// BurstPreambleResponse

// string device_id = 1;
inline void BurstPreambleResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& BurstPreambleResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstPreambleResponse.device_id)
  return _internal_device_id();
}
inline void BurstPreambleResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstPreambleResponse.device_id)
}
inline std::string* BurstPreambleResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstPreambleResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& BurstPreambleResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void BurstPreambleResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstPreambleResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstPreambleResponse.device_id)
}
inline void BurstPreambleResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstPreambleResponse.device_id)
}
inline void BurstPreambleResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstPreambleResponse.device_id)
}
inline std::string* BurstPreambleResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstPreambleResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstPreambleResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstPreambleResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstPreambleResponse.device_id)
}

// int32 length = 2;
inline void BurstPreambleResponse::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstPreambleResponse::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstPreambleResponse::length() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstPreambleResponse.length)
  return _internal_length();
}
inline void BurstPreambleResponse::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void BurstPreambleResponse::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstPreambleResponse.length)
}

// string preamble = 3;
inline void BurstPreambleResponse::clear_preamble() {
  preamble_.ClearToEmpty();
}
inline const std::string& BurstPreambleResponse::preamble() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstPreambleResponse.preamble)
  return _internal_preamble();
}
inline void BurstPreambleResponse::set_preamble(const std::string& value) {
  _internal_set_preamble(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstPreambleResponse.preamble)
}
inline std::string* BurstPreambleResponse::mutable_preamble() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstPreambleResponse.preamble)
  return _internal_mutable_preamble();
}
inline const std::string& BurstPreambleResponse::_internal_preamble() const {
  return preamble_.Get();
}
inline void BurstPreambleResponse::_internal_set_preamble(const std::string& value) {
  
  preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstPreambleResponse::set_preamble(std::string&& value) {
  
  preamble_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstPreambleResponse.preamble)
}
inline void BurstPreambleResponse::set_preamble(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstPreambleResponse.preamble)
}
inline void BurstPreambleResponse::set_preamble(const char* value,
    size_t size) {
  
  preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstPreambleResponse.preamble)
}
inline std::string* BurstPreambleResponse::_internal_mutable_preamble() {
  
  return preamble_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstPreambleResponse::release_preamble() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstPreambleResponse.preamble)
  return preamble_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstPreambleResponse::set_allocated_preamble(std::string* preamble) {
  if (preamble != nullptr) {
    
  } else {
    
  }
  preamble_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preamble,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstPreambleResponse.preamble)
}

// int32 repeat = 4;
inline void BurstPreambleResponse::clear_repeat() {
  repeat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstPreambleResponse::_internal_repeat() const {
  return repeat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstPreambleResponse::repeat() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstPreambleResponse.repeat)
  return _internal_repeat();
}
inline void BurstPreambleResponse::_internal_set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  repeat_ = value;
}
inline void BurstPreambleResponse::set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstPreambleResponse.repeat)
}

// -------------------------------------------------------------------

// BurstVersionResponse

// string device_id = 1;
inline void BurstVersionResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& BurstVersionResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstVersionResponse.device_id)
  return _internal_device_id();
}
inline void BurstVersionResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstVersionResponse.device_id)
}
inline std::string* BurstVersionResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstVersionResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& BurstVersionResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void BurstVersionResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstVersionResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstVersionResponse.device_id)
}
inline void BurstVersionResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstVersionResponse.device_id)
}
inline void BurstVersionResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstVersionResponse.device_id)
}
inline std::string* BurstVersionResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstVersionResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstVersionResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstVersionResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstVersionResponse.device_id)
}

// string version = 2;
inline void BurstVersionResponse::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& BurstVersionResponse::version() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstVersionResponse.version)
  return _internal_version();
}
inline void BurstVersionResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstVersionResponse.version)
}
inline std::string* BurstVersionResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstVersionResponse.version)
  return _internal_mutable_version();
}
inline const std::string& BurstVersionResponse::_internal_version() const {
  return version_.Get();
}
inline void BurstVersionResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstVersionResponse::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstVersionResponse.version)
}
inline void BurstVersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstVersionResponse.version)
}
inline void BurstVersionResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstVersionResponse.version)
}
inline std::string* BurstVersionResponse::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstVersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstVersionResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstVersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstVersionResponse.version)
}

// int32 index = 3;
inline void BurstVersionResponse::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstVersionResponse::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstVersionResponse::index() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstVersionResponse.index)
  return _internal_index();
}
inline void BurstVersionResponse::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void BurstVersionResponse::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstVersionResponse.index)
}

// string pontag = 4;
inline void BurstVersionResponse::clear_pontag() {
  pontag_.ClearToEmpty();
}
inline const std::string& BurstVersionResponse::pontag() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstVersionResponse.pontag)
  return _internal_pontag();
}
inline void BurstVersionResponse::set_pontag(const std::string& value) {
  _internal_set_pontag(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstVersionResponse.pontag)
}
inline std::string* BurstVersionResponse::mutable_pontag() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstVersionResponse.pontag)
  return _internal_mutable_pontag();
}
inline const std::string& BurstVersionResponse::_internal_pontag() const {
  return pontag_.Get();
}
inline void BurstVersionResponse::_internal_set_pontag(const std::string& value) {
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstVersionResponse::set_pontag(std::string&& value) {
  
  pontag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstVersionResponse.pontag)
}
inline void BurstVersionResponse::set_pontag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstVersionResponse.pontag)
}
inline void BurstVersionResponse::set_pontag(const char* value,
    size_t size) {
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstVersionResponse.pontag)
}
inline std::string* BurstVersionResponse::_internal_mutable_pontag() {
  
  return pontag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstVersionResponse::release_pontag() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstVersionResponse.pontag)
  return pontag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstVersionResponse::set_allocated_pontag(std::string* pontag) {
  if (pontag != nullptr) {
    
  } else {
    
  }
  pontag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pontag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstVersionResponse.pontag)
}

// -------------------------------------------------------------------

// BurstProfileResponse

// string device_id = 1;
inline void BurstProfileResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& BurstProfileResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.device_id)
  return _internal_device_id();
}
inline void BurstProfileResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.device_id)
}
inline std::string* BurstProfileResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstProfileResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& BurstProfileResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void BurstProfileResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstProfileResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstProfileResponse.device_id)
}
inline void BurstProfileResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstProfileResponse.device_id)
}
inline void BurstProfileResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstProfileResponse.device_id)
}
inline std::string* BurstProfileResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstProfileResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstProfileResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstProfileResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstProfileResponse.device_id)
}

// int32 onu_id = 2;
inline void BurstProfileResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.onu_id)
  return _internal_onu_id();
}
inline void BurstProfileResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void BurstProfileResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.onu_id)
}

// string version = 3;
inline void BurstProfileResponse::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& BurstProfileResponse::version() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.version)
  return _internal_version();
}
inline void BurstProfileResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.version)
}
inline std::string* BurstProfileResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstProfileResponse.version)
  return _internal_mutable_version();
}
inline const std::string& BurstProfileResponse::_internal_version() const {
  return version_.Get();
}
inline void BurstProfileResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstProfileResponse::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstProfileResponse.version)
}
inline void BurstProfileResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstProfileResponse.version)
}
inline void BurstProfileResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstProfileResponse.version)
}
inline std::string* BurstProfileResponse::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstProfileResponse::release_version() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstProfileResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstProfileResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstProfileResponse.version)
}

// int32 index = 4;
inline void BurstProfileResponse::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::index() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.index)
  return _internal_index();
}
inline void BurstProfileResponse::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void BurstProfileResponse::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.index)
}

// int32 delimiter_length = 5;
inline void BurstProfileResponse::clear_delimiter_length() {
  delimiter_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::_internal_delimiter_length() const {
  return delimiter_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::delimiter_length() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.delimiter_length)
  return _internal_delimiter_length();
}
inline void BurstProfileResponse::_internal_set_delimiter_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delimiter_length_ = value;
}
inline void BurstProfileResponse::set_delimiter_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delimiter_length(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.delimiter_length)
}

// string delimiter = 6;
inline void BurstProfileResponse::clear_delimiter() {
  delimiter_.ClearToEmpty();
}
inline const std::string& BurstProfileResponse::delimiter() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.delimiter)
  return _internal_delimiter();
}
inline void BurstProfileResponse::set_delimiter(const std::string& value) {
  _internal_set_delimiter(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.delimiter)
}
inline std::string* BurstProfileResponse::mutable_delimiter() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstProfileResponse.delimiter)
  return _internal_mutable_delimiter();
}
inline const std::string& BurstProfileResponse::_internal_delimiter() const {
  return delimiter_.Get();
}
inline void BurstProfileResponse::_internal_set_delimiter(const std::string& value) {
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstProfileResponse::set_delimiter(std::string&& value) {
  
  delimiter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstProfileResponse.delimiter)
}
inline void BurstProfileResponse::set_delimiter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstProfileResponse.delimiter)
}
inline void BurstProfileResponse::set_delimiter(const char* value,
    size_t size) {
  
  delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstProfileResponse.delimiter)
}
inline std::string* BurstProfileResponse::_internal_mutable_delimiter() {
  
  return delimiter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstProfileResponse::release_delimiter() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstProfileResponse.delimiter)
  return delimiter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstProfileResponse::set_allocated_delimiter(std::string* delimiter) {
  if (delimiter != nullptr) {
    
  } else {
    
  }
  delimiter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delimiter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstProfileResponse.delimiter)
}

// int32 preamble_length = 7;
inline void BurstProfileResponse::clear_preamble_length() {
  preamble_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::_internal_preamble_length() const {
  return preamble_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::preamble_length() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.preamble_length)
  return _internal_preamble_length();
}
inline void BurstProfileResponse::_internal_set_preamble_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  preamble_length_ = value;
}
inline void BurstProfileResponse::set_preamble_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_preamble_length(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.preamble_length)
}

// string preamble = 8;
inline void BurstProfileResponse::clear_preamble() {
  preamble_.ClearToEmpty();
}
inline const std::string& BurstProfileResponse::preamble() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.preamble)
  return _internal_preamble();
}
inline void BurstProfileResponse::set_preamble(const std::string& value) {
  _internal_set_preamble(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.preamble)
}
inline std::string* BurstProfileResponse::mutable_preamble() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstProfileResponse.preamble)
  return _internal_mutable_preamble();
}
inline const std::string& BurstProfileResponse::_internal_preamble() const {
  return preamble_.Get();
}
inline void BurstProfileResponse::_internal_set_preamble(const std::string& value) {
  
  preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstProfileResponse::set_preamble(std::string&& value) {
  
  preamble_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstProfileResponse.preamble)
}
inline void BurstProfileResponse::set_preamble(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstProfileResponse.preamble)
}
inline void BurstProfileResponse::set_preamble(const char* value,
    size_t size) {
  
  preamble_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstProfileResponse.preamble)
}
inline std::string* BurstProfileResponse::_internal_mutable_preamble() {
  
  return preamble_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstProfileResponse::release_preamble() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstProfileResponse.preamble)
  return preamble_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstProfileResponse::set_allocated_preamble(std::string* preamble) {
  if (preamble != nullptr) {
    
  } else {
    
  }
  preamble_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preamble,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstProfileResponse.preamble)
}

// int32 repeat = 9;
inline void BurstProfileResponse::clear_repeat() {
  repeat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::_internal_repeat() const {
  return repeat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BurstProfileResponse::repeat() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.repeat)
  return _internal_repeat();
}
inline void BurstProfileResponse::_internal_set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  repeat_ = value;
}
inline void BurstProfileResponse::set_repeat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.repeat)
}

// string pontag = 10;
inline void BurstProfileResponse::clear_pontag() {
  pontag_.ClearToEmpty();
}
inline const std::string& BurstProfileResponse::pontag() const {
  // @@protoc_insertion_point(field_get:bossopenolt.BurstProfileResponse.pontag)
  return _internal_pontag();
}
inline void BurstProfileResponse::set_pontag(const std::string& value) {
  _internal_set_pontag(value);
  // @@protoc_insertion_point(field_set:bossopenolt.BurstProfileResponse.pontag)
}
inline std::string* BurstProfileResponse::mutable_pontag() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.BurstProfileResponse.pontag)
  return _internal_mutable_pontag();
}
inline const std::string& BurstProfileResponse::_internal_pontag() const {
  return pontag_.Get();
}
inline void BurstProfileResponse::_internal_set_pontag(const std::string& value) {
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BurstProfileResponse::set_pontag(std::string&& value) {
  
  pontag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.BurstProfileResponse.pontag)
}
inline void BurstProfileResponse::set_pontag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.BurstProfileResponse.pontag)
}
inline void BurstProfileResponse::set_pontag(const char* value,
    size_t size) {
  
  pontag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.BurstProfileResponse.pontag)
}
inline std::string* BurstProfileResponse::_internal_mutable_pontag() {
  
  return pontag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BurstProfileResponse::release_pontag() {
  // @@protoc_insertion_point(field_release:bossopenolt.BurstProfileResponse.pontag)
  return pontag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BurstProfileResponse::set_allocated_pontag(std::string* pontag) {
  if (pontag != nullptr) {
    
  } else {
    
  }
  pontag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pontag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.BurstProfileResponse.pontag)
}

// -------------------------------------------------------------------

// RegisterStatusResponse

// string device_id = 1;
inline void RegisterStatusResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& RegisterStatusResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.RegisterStatusResponse.device_id)
  return _internal_device_id();
}
inline void RegisterStatusResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.RegisterStatusResponse.device_id)
}
inline std::string* RegisterStatusResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.RegisterStatusResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& RegisterStatusResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void RegisterStatusResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterStatusResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.RegisterStatusResponse.device_id)
}
inline void RegisterStatusResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.RegisterStatusResponse.device_id)
}
inline void RegisterStatusResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.RegisterStatusResponse.device_id)
}
inline std::string* RegisterStatusResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterStatusResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.RegisterStatusResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterStatusResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.RegisterStatusResponse.device_id)
}

// int32 onu_id = 2;
inline void RegisterStatusResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterStatusResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterStatusResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.RegisterStatusResponse.onu_id)
  return _internal_onu_id();
}
inline void RegisterStatusResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void RegisterStatusResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.RegisterStatusResponse.onu_id)
}

// string status = 3;
inline void RegisterStatusResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& RegisterStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:bossopenolt.RegisterStatusResponse.status)
  return _internal_status();
}
inline void RegisterStatusResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bossopenolt.RegisterStatusResponse.status)
}
inline std::string* RegisterStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.RegisterStatusResponse.status)
  return _internal_mutable_status();
}
inline const std::string& RegisterStatusResponse::_internal_status() const {
  return status_.Get();
}
inline void RegisterStatusResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterStatusResponse::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.RegisterStatusResponse.status)
}
inline void RegisterStatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.RegisterStatusResponse.status)
}
inline void RegisterStatusResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.RegisterStatusResponse.status)
}
inline std::string* RegisterStatusResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:bossopenolt.RegisterStatusResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterStatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.RegisterStatusResponse.status)
}

// -------------------------------------------------------------------

// OnuInfoResponse

// string device_id = 1;
inline void OnuInfoResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& OnuInfoResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.device_id)
  return _internal_device_id();
}
inline void OnuInfoResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.device_id)
}
inline std::string* OnuInfoResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuInfoResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& OnuInfoResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void OnuInfoResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuInfoResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuInfoResponse.device_id)
}
inline void OnuInfoResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuInfoResponse.device_id)
}
inline void OnuInfoResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuInfoResponse.device_id)
}
inline std::string* OnuInfoResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuInfoResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuInfoResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuInfoResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuInfoResponse.device_id)
}

// int32 onu_id = 2;
inline void OnuInfoResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuInfoResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnuInfoResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.onu_id)
  return _internal_onu_id();
}
inline void OnuInfoResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void OnuInfoResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.onu_id)
}

// string rate = 3;
inline void OnuInfoResponse::clear_rate() {
  rate_.ClearToEmpty();
}
inline const std::string& OnuInfoResponse::rate() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.rate)
  return _internal_rate();
}
inline void OnuInfoResponse::set_rate(const std::string& value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.rate)
}
inline std::string* OnuInfoResponse::mutable_rate() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuInfoResponse.rate)
  return _internal_mutable_rate();
}
inline const std::string& OnuInfoResponse::_internal_rate() const {
  return rate_.Get();
}
inline void OnuInfoResponse::_internal_set_rate(const std::string& value) {
  
  rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuInfoResponse::set_rate(std::string&& value) {
  
  rate_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuInfoResponse.rate)
}
inline void OnuInfoResponse::set_rate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuInfoResponse.rate)
}
inline void OnuInfoResponse::set_rate(const char* value,
    size_t size) {
  
  rate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuInfoResponse.rate)
}
inline std::string* OnuInfoResponse::_internal_mutable_rate() {
  
  return rate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuInfoResponse::release_rate() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuInfoResponse.rate)
  return rate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuInfoResponse::set_allocated_rate(std::string* rate) {
  if (rate != nullptr) {
    
  } else {
    
  }
  rate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuInfoResponse.rate)
}

// string vendor_id = 4;
inline void OnuInfoResponse::clear_vendor_id() {
  vendor_id_.ClearToEmpty();
}
inline const std::string& OnuInfoResponse::vendor_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.vendor_id)
  return _internal_vendor_id();
}
inline void OnuInfoResponse::set_vendor_id(const std::string& value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.vendor_id)
}
inline std::string* OnuInfoResponse::mutable_vendor_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuInfoResponse.vendor_id)
  return _internal_mutable_vendor_id();
}
inline const std::string& OnuInfoResponse::_internal_vendor_id() const {
  return vendor_id_.Get();
}
inline void OnuInfoResponse::_internal_set_vendor_id(const std::string& value) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuInfoResponse::set_vendor_id(std::string&& value) {
  
  vendor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuInfoResponse.vendor_id)
}
inline void OnuInfoResponse::set_vendor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuInfoResponse.vendor_id)
}
inline void OnuInfoResponse::set_vendor_id(const char* value,
    size_t size) {
  
  vendor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuInfoResponse.vendor_id)
}
inline std::string* OnuInfoResponse::_internal_mutable_vendor_id() {
  
  return vendor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuInfoResponse::release_vendor_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuInfoResponse.vendor_id)
  return vendor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuInfoResponse::set_allocated_vendor_id(std::string* vendor_id) {
  if (vendor_id != nullptr) {
    
  } else {
    
  }
  vendor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuInfoResponse.vendor_id)
}

// string vssn = 5;
inline void OnuInfoResponse::clear_vssn() {
  vssn_.ClearToEmpty();
}
inline const std::string& OnuInfoResponse::vssn() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.vssn)
  return _internal_vssn();
}
inline void OnuInfoResponse::set_vssn(const std::string& value) {
  _internal_set_vssn(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.vssn)
}
inline std::string* OnuInfoResponse::mutable_vssn() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuInfoResponse.vssn)
  return _internal_mutable_vssn();
}
inline const std::string& OnuInfoResponse::_internal_vssn() const {
  return vssn_.Get();
}
inline void OnuInfoResponse::_internal_set_vssn(const std::string& value) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuInfoResponse::set_vssn(std::string&& value) {
  
  vssn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuInfoResponse.vssn)
}
inline void OnuInfoResponse::set_vssn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuInfoResponse.vssn)
}
inline void OnuInfoResponse::set_vssn(const char* value,
    size_t size) {
  
  vssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuInfoResponse.vssn)
}
inline std::string* OnuInfoResponse::_internal_mutable_vssn() {
  
  return vssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuInfoResponse::release_vssn() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuInfoResponse.vssn)
  return vssn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuInfoResponse::set_allocated_vssn(std::string* vssn) {
  if (vssn != nullptr) {
    
  } else {
    
  }
  vssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vssn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuInfoResponse.vssn)
}

// double distance = 6;
inline void OnuInfoResponse::clear_distance() {
  distance_ = 0;
}
inline double OnuInfoResponse::_internal_distance() const {
  return distance_;
}
inline double OnuInfoResponse::distance() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.distance)
  return _internal_distance();
}
inline void OnuInfoResponse::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void OnuInfoResponse::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.distance)
}

// string status = 7;
inline void OnuInfoResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& OnuInfoResponse::status() const {
  // @@protoc_insertion_point(field_get:bossopenolt.OnuInfoResponse.status)
  return _internal_status();
}
inline void OnuInfoResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bossopenolt.OnuInfoResponse.status)
}
inline std::string* OnuInfoResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.OnuInfoResponse.status)
  return _internal_mutable_status();
}
inline const std::string& OnuInfoResponse::_internal_status() const {
  return status_.Get();
}
inline void OnuInfoResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OnuInfoResponse::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.OnuInfoResponse.status)
}
inline void OnuInfoResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.OnuInfoResponse.status)
}
inline void OnuInfoResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.OnuInfoResponse.status)
}
inline std::string* OnuInfoResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OnuInfoResponse::release_status() {
  // @@protoc_insertion_point(field_release:bossopenolt.OnuInfoResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnuInfoResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.OnuInfoResponse.status)
}

// -------------------------------------------------------------------

// StatusResponse

// string device_id = 1;
inline void StatusResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& StatusResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.StatusResponse.device_id)
  return _internal_device_id();
}
inline void StatusResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.StatusResponse.device_id)
}
inline std::string* StatusResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.StatusResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& StatusResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void StatusResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatusResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.StatusResponse.device_id)
}
inline void StatusResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.StatusResponse.device_id)
}
inline void StatusResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.StatusResponse.device_id)
}
inline std::string* StatusResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatusResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.StatusResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.StatusResponse.device_id)
}

// string status = 2;
inline void StatusResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:bossopenolt.StatusResponse.status)
  return _internal_status();
}
inline void StatusResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bossopenolt.StatusResponse.status)
}
inline std::string* StatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.StatusResponse.status)
  return _internal_mutable_status();
}
inline const std::string& StatusResponse::_internal_status() const {
  return status_.Get();
}
inline void StatusResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StatusResponse::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.StatusResponse.status)
}
inline void StatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.StatusResponse.status)
}
inline void StatusResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.StatusResponse.status)
}
inline std::string* StatusResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:bossopenolt.StatusResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.StatusResponse.status)
}

// -------------------------------------------------------------------

// TodResponse

// string device_id = 1;
inline void TodResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& TodResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.TodResponse.device_id)
  return _internal_device_id();
}
inline void TodResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.TodResponse.device_id)
}
inline std::string* TodResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.TodResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& TodResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void TodResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TodResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.TodResponse.device_id)
}
inline void TodResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.TodResponse.device_id)
}
inline void TodResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.TodResponse.device_id)
}
inline std::string* TodResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TodResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.TodResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TodResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.TodResponse.device_id)
}

// int32 mode = 2;
inline void TodResponse::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TodResponse::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TodResponse::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.TodResponse.mode)
  return _internal_mode();
}
inline void TodResponse::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void TodResponse::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.TodResponse.mode)
}

// int32 time = 3;
inline void TodResponse::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TodResponse::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TodResponse::time() const {
  // @@protoc_insertion_point(field_get:bossopenolt.TodResponse.time)
  return _internal_time();
}
inline void TodResponse::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void TodResponse::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:bossopenolt.TodResponse.time)
}

// -------------------------------------------------------------------

// FecDecResponse

// string device_id = 1;
inline void FecDecResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& FecDecResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.FecDecResponse.device_id)
  return _internal_device_id();
}
inline void FecDecResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.FecDecResponse.device_id)
}
inline std::string* FecDecResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.FecDecResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& FecDecResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void FecDecResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FecDecResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.FecDecResponse.device_id)
}
inline void FecDecResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.FecDecResponse.device_id)
}
inline void FecDecResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.FecDecResponse.device_id)
}
inline std::string* FecDecResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FecDecResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.FecDecResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FecDecResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.FecDecResponse.device_id)
}

// string value = 2;
inline void FecDecResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FecDecResponse::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.FecDecResponse.value)
  return _internal_value();
}
inline void FecDecResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.FecDecResponse.value)
}
inline std::string* FecDecResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.FecDecResponse.value)
  return _internal_mutable_value();
}
inline const std::string& FecDecResponse::_internal_value() const {
  return value_.Get();
}
inline void FecDecResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FecDecResponse::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.FecDecResponse.value)
}
inline void FecDecResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.FecDecResponse.value)
}
inline void FecDecResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.FecDecResponse.value)
}
inline std::string* FecDecResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FecDecResponse::release_value() {
  // @@protoc_insertion_point(field_release:bossopenolt.FecDecResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FecDecResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.FecDecResponse.value)
}

// -------------------------------------------------------------------

// ErrorPermitResponse

// string device_id = 1;
inline void ErrorPermitResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& ErrorPermitResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ErrorPermitResponse.device_id)
  return _internal_device_id();
}
inline void ErrorPermitResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ErrorPermitResponse.device_id)
}
inline std::string* ErrorPermitResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.ErrorPermitResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& ErrorPermitResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void ErrorPermitResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ErrorPermitResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.ErrorPermitResponse.device_id)
}
inline void ErrorPermitResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.ErrorPermitResponse.device_id)
}
inline void ErrorPermitResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.ErrorPermitResponse.device_id)
}
inline std::string* ErrorPermitResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ErrorPermitResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.ErrorPermitResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ErrorPermitResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.ErrorPermitResponse.device_id)
}

// int32 value = 2;
inline void ErrorPermitResponse::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorPermitResponse::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorPermitResponse::value() const {
  // @@protoc_insertion_point(field_get:bossopenolt.ErrorPermitResponse.value)
  return _internal_value();
}
inline void ErrorPermitResponse::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ErrorPermitResponse::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bossopenolt.ErrorPermitResponse.value)
}

// -------------------------------------------------------------------

// PmControlResponse

// string device_id = 1;
inline void PmControlResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& PmControlResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmControlResponse.device_id)
  return _internal_device_id();
}
inline void PmControlResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmControlResponse.device_id)
}
inline std::string* PmControlResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmControlResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& PmControlResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void PmControlResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmControlResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmControlResponse.device_id)
}
inline void PmControlResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmControlResponse.device_id)
}
inline void PmControlResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmControlResponse.device_id)
}
inline std::string* PmControlResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmControlResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmControlResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmControlResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmControlResponse.device_id)
}

// string action = 2;
inline void PmControlResponse::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PmControlResponse::action() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmControlResponse.action)
  return _internal_action();
}
inline void PmControlResponse::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmControlResponse.action)
}
inline std::string* PmControlResponse::mutable_action() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmControlResponse.action)
  return _internal_mutable_action();
}
inline const std::string& PmControlResponse::_internal_action() const {
  return action_.Get();
}
inline void PmControlResponse::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmControlResponse::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmControlResponse.action)
}
inline void PmControlResponse::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmControlResponse.action)
}
inline void PmControlResponse::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmControlResponse.action)
}
inline std::string* PmControlResponse::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmControlResponse::release_action() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmControlResponse.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmControlResponse::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmControlResponse.action)
}

// string onu_mode = 3;
inline void PmControlResponse::clear_onu_mode() {
  onu_mode_.ClearToEmpty();
}
inline const std::string& PmControlResponse::onu_mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmControlResponse.onu_mode)
  return _internal_onu_mode();
}
inline void PmControlResponse::set_onu_mode(const std::string& value) {
  _internal_set_onu_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmControlResponse.onu_mode)
}
inline std::string* PmControlResponse::mutable_onu_mode() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmControlResponse.onu_mode)
  return _internal_mutable_onu_mode();
}
inline const std::string& PmControlResponse::_internal_onu_mode() const {
  return onu_mode_.Get();
}
inline void PmControlResponse::_internal_set_onu_mode(const std::string& value) {
  
  onu_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmControlResponse::set_onu_mode(std::string&& value) {
  
  onu_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmControlResponse.onu_mode)
}
inline void PmControlResponse::set_onu_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  onu_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmControlResponse.onu_mode)
}
inline void PmControlResponse::set_onu_mode(const char* value,
    size_t size) {
  
  onu_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmControlResponse.onu_mode)
}
inline std::string* PmControlResponse::_internal_mutable_onu_mode() {
  
  return onu_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmControlResponse::release_onu_mode() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmControlResponse.onu_mode)
  return onu_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmControlResponse::set_allocated_onu_mode(std::string* onu_mode) {
  if (onu_mode != nullptr) {
    
  } else {
    
  }
  onu_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onu_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmControlResponse.onu_mode)
}

// int32 transinit = 4;
inline void PmControlResponse::clear_transinit() {
  transinit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmControlResponse::_internal_transinit() const {
  return transinit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmControlResponse::transinit() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmControlResponse.transinit)
  return _internal_transinit();
}
inline void PmControlResponse::_internal_set_transinit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transinit_ = value;
}
inline void PmControlResponse::set_transinit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transinit(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmControlResponse.transinit)
}

// int32 txinit = 5;
inline void PmControlResponse::clear_txinit() {
  txinit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmControlResponse::_internal_txinit() const {
  return txinit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmControlResponse::txinit() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmControlResponse.txinit)
  return _internal_txinit();
}
inline void PmControlResponse::_internal_set_txinit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  txinit_ = value;
}
inline void PmControlResponse::set_txinit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_txinit(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmControlResponse.txinit)
}

// -------------------------------------------------------------------

// PmTableResponse

// string device_id = 1;
inline void PmTableResponse::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& PmTableResponse::device_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.device_id)
  return _internal_device_id();
}
inline void PmTableResponse::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.device_id)
}
inline std::string* PmTableResponse::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmTableResponse.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& PmTableResponse::_internal_device_id() const {
  return device_id_.Get();
}
inline void PmTableResponse::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmTableResponse::set_device_id(std::string&& value) {
  
  device_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmTableResponse.device_id)
}
inline void PmTableResponse::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmTableResponse.device_id)
}
inline void PmTableResponse::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmTableResponse.device_id)
}
inline std::string* PmTableResponse::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmTableResponse::release_device_id() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmTableResponse.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmTableResponse::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmTableResponse.device_id)
}

// int32 onu_id = 2;
inline void PmTableResponse::clear_onu_id() {
  onu_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::_internal_onu_id() const {
  return onu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::onu_id() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.onu_id)
  return _internal_onu_id();
}
inline void PmTableResponse::_internal_set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  onu_id_ = value;
}
inline void PmTableResponse::set_onu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_onu_id(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.onu_id)
}

// string mode = 3;
inline void PmTableResponse::clear_mode() {
  mode_.ClearToEmpty();
}
inline const std::string& PmTableResponse::mode() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.mode)
  return _internal_mode();
}
inline void PmTableResponse::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.mode)
}
inline std::string* PmTableResponse::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmTableResponse.mode)
  return _internal_mutable_mode();
}
inline const std::string& PmTableResponse::_internal_mode() const {
  return mode_.Get();
}
inline void PmTableResponse::_internal_set_mode(const std::string& value) {
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmTableResponse::set_mode(std::string&& value) {
  
  mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmTableResponse.mode)
}
inline void PmTableResponse::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmTableResponse.mode)
}
inline void PmTableResponse::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmTableResponse.mode)
}
inline std::string* PmTableResponse::_internal_mutable_mode() {
  
  return mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmTableResponse::release_mode() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmTableResponse.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmTableResponse::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmTableResponse.mode)
}

// int32 sleep = 4;
inline void PmTableResponse::clear_sleep() {
  sleep_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::_internal_sleep() const {
  return sleep_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::sleep() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.sleep)
  return _internal_sleep();
}
inline void PmTableResponse::_internal_set_sleep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sleep_ = value;
}
inline void PmTableResponse::set_sleep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sleep(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.sleep)
}

// int32 aware = 5;
inline void PmTableResponse::clear_aware() {
  aware_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::_internal_aware() const {
  return aware_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::aware() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.aware)
  return _internal_aware();
}
inline void PmTableResponse::_internal_set_aware(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aware_ = value;
}
inline void PmTableResponse::set_aware(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aware(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.aware)
}

// int32 rxoff = 6;
inline void PmTableResponse::clear_rxoff() {
  rxoff_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::_internal_rxoff() const {
  return rxoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::rxoff() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.rxoff)
  return _internal_rxoff();
}
inline void PmTableResponse::_internal_set_rxoff(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rxoff_ = value;
}
inline void PmTableResponse::set_rxoff(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rxoff(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.rxoff)
}

// int32 hold = 7;
inline void PmTableResponse::clear_hold() {
  hold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::_internal_hold() const {
  return hold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PmTableResponse::hold() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.hold)
  return _internal_hold();
}
inline void PmTableResponse::_internal_set_hold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hold_ = value;
}
inline void PmTableResponse::set_hold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hold(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.hold)
}

// string action = 8;
inline void PmTableResponse::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& PmTableResponse::action() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.action)
  return _internal_action();
}
inline void PmTableResponse::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.action)
}
inline std::string* PmTableResponse::mutable_action() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmTableResponse.action)
  return _internal_mutable_action();
}
inline const std::string& PmTableResponse::_internal_action() const {
  return action_.Get();
}
inline void PmTableResponse::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmTableResponse::set_action(std::string&& value) {
  
  action_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmTableResponse.action)
}
inline void PmTableResponse::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmTableResponse.action)
}
inline void PmTableResponse::set_action(const char* value,
    size_t size) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmTableResponse.action)
}
inline std::string* PmTableResponse::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmTableResponse::release_action() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmTableResponse.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmTableResponse::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmTableResponse.action)
}

// string status = 9;
inline void PmTableResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& PmTableResponse::status() const {
  // @@protoc_insertion_point(field_get:bossopenolt.PmTableResponse.status)
  return _internal_status();
}
inline void PmTableResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bossopenolt.PmTableResponse.status)
}
inline std::string* PmTableResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bossopenolt.PmTableResponse.status)
  return _internal_mutable_status();
}
inline const std::string& PmTableResponse::_internal_status() const {
  return status_.Get();
}
inline void PmTableResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PmTableResponse::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bossopenolt.PmTableResponse.status)
}
inline void PmTableResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bossopenolt.PmTableResponse.status)
}
inline void PmTableResponse::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bossopenolt.PmTableResponse.status)
}
inline std::string* PmTableResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PmTableResponse::release_status() {
  // @@protoc_insertion_point(field_release:bossopenolt.PmTableResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PmTableResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bossopenolt.PmTableResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bossopenolt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bossopenolt_2eproto
